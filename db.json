{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/av-core-mini-0.6.4.js","path":"av-core-mini-0.6.4.js","modified":1,"renderable":0},{"_id":"source/images/Smile.png","path":"images/Smile.png","modified":1,"renderable":0},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":0},{"_id":"source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/weibo.png","path":"images/weibo.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar2.png","path":"images/avatar2.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/fireworks.js","path":"js/src/fireworks.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/particle.js","path":"js/src/particle.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"source/images/favicon2.png","path":"images/favicon2.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521609061019},{"_id":"source/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1524202003610},{"_id":"source/CNAME","hash":"031519940b65a914b94d2bbe61a216ff82b6034b","modified":1520927132142},{"_id":"source/baidu_verify_c7GpAJhSvl.html","hash":"cb2293d1fb95be8f1af3c805f7924864b9c3b3da","modified":1521439283857},{"_id":"source/google95784a9a78d968a0.html","hash":"82580de1d2d6eff8932274c27a141ef4900ebe50","modified":1522777516432},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1524214602353},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1524214602353},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1524214602353},{"_id":"themes/next/.gitignore","hash":"5f43d3c6ec9b9e54b5af3d906c4fee675daa9935","modified":1524214602353},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1524214602354},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1524214602354},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1524214602354},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1524214602354},{"_id":"themes/next/LICENSE","hash":"80391c457205ec9a84d39f5e889e133c9c5765d4","modified":1524214602354},{"_id":"themes/next/README.md","hash":"07ad1b98221cea0abf2b2d59cdba0fd20b48ce39","modified":1524214602355},{"_id":"themes/next/_config.yml","hash":"f499e98fd242d19bd4bc5515a34689fe44af2525","modified":1524217647931},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1524214602355},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1524214602355},{"_id":"themes/next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1524214602377},{"_id":"source/av-core-mini-0.6.4.js","hash":"3f12d6e14cb074b4139c54b360d4e04fc33d1679","modified":1522047041750},{"_id":"source/_posts/.DS_Store","hash":"dcb5020341e23fcc8e41446fa3b3dc60f303af50","modified":1524043096527},{"_id":"source/_posts/firstblog.md","hash":"28cda48b5494ea471a2d8d823b2bc8bdc578e15d","modified":1521686732064},{"_id":"source/about/index.md","hash":"759c860c1d47b81a301b956780b4c8973c01dc5e","modified":1521434395723},{"_id":"source/archives/index.md","hash":"0643355ce7cd7fe3e624a60ba4ea639f4fba119f","modified":1520343876675},{"_id":"source/categories/index.md","hash":"e59c31249747c16ab710f2f8a0d7263d20d5092d","modified":1520940277959},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1521430917354},{"_id":"source/images/Smile.png","hash":"f40cee49c1fc6fb650edc829f9d9504205fc234f","modified":1520925086162},{"_id":"source/images/avatar.png","hash":"8a96048efc70a4b53c76ad523456a7f9b133914f","modified":1521430818599},{"_id":"source/images/favicon.png","hash":"46dad95925d3f9f625c76c5d232cc681182e5006","modified":1520925232084},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1520430361914},{"_id":"source/tags/index.md","hash":"a7525bc7a300c2274c2e49464ad04d98b93ebe40","modified":1521434314262},{"_id":"source/uploads/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1521430976408},{"_id":"source/uploads/avatar.png","hash":"8a96048efc70a4b53c76ad523456a7f9b133914f","modified":1521430818599},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1524214602348},{"_id":"themes/next/.git/config","hash":"6d96544dbeeccc9fde96bd987acd08c0ba84039b","modified":1524214602351},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1524214423435},{"_id":"themes/next/.git/index","hash":"9d86fe71ffbe6e25333e77b862f2162982bd84c1","modified":1524214602478},{"_id":"themes/next/.git/packed-refs","hash":"12ef2a2833967192d14a2e3707e6ce6b231985f7","modified":1524214602346},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1524214602355},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1524214602356},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1524214602356},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1524214602356},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1524214602356},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1524214602356},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1524214602357},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1524214602356},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1524214602357},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1524214602357},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1524214602357},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1524214602357},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1524214602357},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1524214602357},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1524214602358},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1524214602358},{"_id":"themes/next/layout/_layout.swig","hash":"3fa2a0b9a6bb42be15e90e6bc7302aebc5fdada3","modified":1524214602358},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1524214602375},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1524214602375},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1524214602376},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1524214602376},{"_id":"themes/next/layout/post.swig","hash":"d23fd5213324e70b7d24214eabe9dd0f27ee6f8d","modified":1524214602376},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1524214602376},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1524214602377},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1524214602377},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1524214602378},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1524214602477},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1524214602477},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1524214602477},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524214602412},{"_id":"source/_posts/ConcurrentSourceCodeRead/concurrent-source-code-read.md","hash":"4460322cdb6eb082a38680f053e98aaa357812c1","modified":1524042957944},{"_id":"source/_posts/DesignPattern/SingletonPattern.md","hash":"ddada1640b60b80885660eb7a3bfd9e0a1b30421","modified":1523555486407},{"_id":"source/_posts/DevTools/developing-tools.md","hash":"7ba8ca4d5bad33395a8a79665e264260b1b9f143","modified":1524116204784},{"_id":"source/_posts/InterviewCase/Java面试题目集锦.md","hash":"017309f3f4b65bb1c10330cc852b2316f98fb50e","modified":1520994947142},{"_id":"source/_posts/JDKSourceCodeRead/JDK-source-code-read.md","hash":"9d42f213a4644b700e70dcbb4469584f66bca3b9","modified":1524042826227},{"_id":"source/_posts/JVM/JVM3.md","hash":"fb9c7fb6f1d93545f4926ad51e91040bfdc1f670","modified":1523554965016},{"_id":"source/_posts/JVM/jvm-introduce.md","hash":"92fc6849a7fbd1f3388e1bfb9b787e054f4d1e55","modified":1524021077283},{"_id":"source/_posts/JVM/jvm.md","hash":"aefa5e745dc694aeb45292323ba6f829e35cc843","modified":1524132498684},{"_id":"source/_posts/JVM/jvm2.md","hash":"94752b506232c265e9048f39916037f7f96c4972","modified":1524036739709},{"_id":"source/_posts/JavaCore/Java-Core-1.md","hash":"44cf2608e0e88e0860cbe84e25b686c1aa46c6db","modified":1522816537457},{"_id":"source/_posts/JavaCore/Java-Core-2.md","hash":"44cf2608e0e88e0860cbe84e25b686c1aa46c6db","modified":1522816537457},{"_id":"source/_posts/JavaCore/Java-Core-3.md","hash":"44cf2608e0e88e0860cbe84e25b686c1aa46c6db","modified":1522816537457},{"_id":"source/_posts/JavaCore/Java-Core-4.md","hash":"44cf2608e0e88e0860cbe84e25b686c1aa46c6db","modified":1522816537457},{"_id":"source/_posts/JavaMultiThread/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1524042093863},{"_id":"source/_posts/JavaMultiThread/ThreadPoolExecutor.md","hash":"b1d6aa37c8498ac76e4a1198c1acf7924ab46919","modified":1523951284148},{"_id":"source/_posts/JavaMultiThread/thread-pool.md","hash":"d852fcdf9a7bd2d040ce804f20e2e5bf481a89d4","modified":1524034407495},{"_id":"source/_posts/JavaMultiThread/thread-safety-demo.md","hash":"0bfbc6554909f72ebbfa933f1d9f36e03b0fcc54","modified":1524045452312},{"_id":"source/_posts/JavaMultiThread/thread-sample-introduce.md","hash":"2859787d94b69552735c2a9661f77bf98cbe5f58","modified":1524031468517},{"_id":"source/_posts/JavaMultiThreadBook/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1524061588482},{"_id":"source/_posts/JavaMultiThreadBook/MultiThreadChapter1.md","hash":"3d138f56f7da763348c50f6379da534db0ebf194","modified":1524192428152},{"_id":"source/_posts/JavaMultiThreadBook/MultiThreadChapter2.md","hash":"b1d6aa37c8498ac76e4a1198c1acf7924ab46919","modified":1523951284148},{"_id":"source/_posts/JavaMultiThreadBook/MultiThreadChapter3.md","hash":"b1d6aa37c8498ac76e4a1198c1acf7924ab46919","modified":1523951284148},{"_id":"source/_posts/JavaMultiThreadBook/MultiThreadChapter4.md","hash":"b1d6aa37c8498ac76e4a1198c1acf7924ab46919","modified":1523951284148},{"_id":"source/_posts/JavaPremium/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1524043958158},{"_id":"source/_posts/JavaPremium/Java-CAS.md","hash":"e862f0b86bfc3a3a3e70c513a03cbb49616ecc5c","modified":1521455823986},{"_id":"source/_posts/JavaPremium/Java-LDAP.md","hash":"ea38f522924b83be4ed1d0a59fba15fb7fd86bd0","modified":1520994923955},{"_id":"source/_posts/JavaPremium/Java-NIO.md","hash":"81f5c6d5548bdc9d75b6219ec946b74dc21618d2","modified":1520994931573},{"_id":"source/_posts/JavaPremium/Java序列化.md","hash":"0e059458097f8119257ce43163c3960cdaae0e58","modified":1520994535234},{"_id":"source/_posts/Lock/optimistic-pessimistic.md","hash":"b9d5b9fb9a22bb291a790f149351b77a724d42eb","modified":1523949456641},{"_id":"source/_posts/Mysql/dataSourceRead.md","hash":"dceef599a4b7e4c4aec3a723ed573423891db94e","modified":1523551650517},{"_id":"source/_posts/Mysql/dateSourceLock.md","hash":"13368a284d65ba4f90647a408b9511afc3aa2dc3","modified":1523550998432},{"_id":"source/_posts/Mysql/mysql-index.md","hash":"a49650b632c050035299b5704f475d4b348d5131","modified":1523555565468},{"_id":"source/_posts/SortAlogrithms/countingSort.md","hash":"ca3da7973e179d6430b814d72a0f551ad9b4fa2a","modified":1523726127725},{"_id":"source/_posts/SortAlogrithms/division-recursion.md","hash":"c6cfba00e1ecd01ea218e1ff2a485545e292f23e","modified":1523516219537},{"_id":"source/_posts/SortAlogrithms/heapSort.md","hash":"a6e6b7d074820906615f20fdcf1c6070e775c9aa","modified":1523516350032},{"_id":"source/_posts/SortAlogrithms/high-efficiency.md","hash":"720cdaef9abd06a9c7e6250ab8400a53b35801da","modified":1522217548980},{"_id":"source/_posts/SortAlogrithms/linear.md","hash":"2159610df95d8fbb4426d1bfa746524578b02b01","modified":1522217561427},{"_id":"source/_posts/SortAlogrithms/mergeSort.md","hash":"eced25e5683708781ae1d8bc0810525c3814b607","modified":1523516250388},{"_id":"source/_posts/SortAlogrithms/optimistic-pessimistic-locking.md","hash":"e179f9a57b3dd423ef3bdbce6430af22ba1e5d9a","modified":1524024243592},{"_id":"source/_posts/SortAlogrithms/quickSort.md","hash":"a6652be5ce59a2d1190e36bff48503d0917037b9","modified":1522218094970},{"_id":"source/_posts/SortAlogrithms/radixSort.md","hash":"c97dba3a5a0e3e3a75e424911f91804790e2d681","modified":1523516289570},{"_id":"source/_posts/SortAlogrithms/shellSort.md","hash":"0da4a47eecce719bf4af87dbff16f6c57e798424","modified":1523516261003},{"_id":"source/_posts/SortAlogrithms/simple-sort.md","hash":"b947c6eeb03b5f4ce3de0c70651edb2b1aeaa032","modified":1523516278307},{"_id":"source/_posts/SortAlogrithms/sort-algorithm.md","hash":"23929fb4624f3e6db8ddc519da6e959cc8d8f854","modified":1523516332120},{"_id":"source/_posts/SpringSourceCodeRead/spring-source-code-read.md","hash":"c17f32c3fe8ddc71c62363c00ca70939c109d489","modified":1524042861072},{"_id":"source/_posts/Transaction/transaction.md","hash":"ee5d3c47898f9760a7f1eab84df9f90de5fee431","modified":1524045698517},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1524214423436},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1524214423435},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1524214423437},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1524214423438},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1524214423436},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1524214423438},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1524214423436},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1524214423437},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1524214423437},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1524214423438},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1524214423434},{"_id":"themes/next/.git/logs/HEAD","hash":"5249ca43acd72148187711e2c15d43ef7f3d1882","modified":1524214602349},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1524214602358},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1524214602358},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"449a6b886bc7d51362df6be8ce63c7e2dc79cad8","modified":1524214602359},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"560f043e8f4353fa0101014748e40a58d2d57506","modified":1524214602359},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1524214602359},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1524214602359},{"_id":"themes/next/layout/_macro/post.swig","hash":"6476ca278938bc1f87738ea703bd066909abe882","modified":1524214602359},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1524214602360},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1524214602360},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1524214602360},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1524214602360},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4953e1e77abd6bbb138bcece248b31ef05485154","modified":1524214602360},{"_id":"themes/next/layout/_partials/head.swig","hash":"31d7e19d7211130ad7a4e22faa0c4d2c7cf6f693","modified":1524214602361},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1524214602361},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1524214602362},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1524214602362},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1524214602362},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1524214602371},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1524214602371},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1524214602372},{"_id":"themes/next/layout/_third-party/mob_share.swig","hash":"685f765c3f7e37e1c9408b557ff2fe4cd00533e1","modified":1524214602372},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1524214602372},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1524214602373},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1524214602373},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1524214602373},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1524214602364},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1524214602364},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1524214602365},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1524214602378},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1524214602378},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1524214602378},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1524214602379},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1524214602379},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1524214602379},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1524214602379},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1524214602379},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1524214602380},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1524214602412},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1524214602413},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1524214602414},{"_id":"themes/next/source/images/alipay.png","hash":"342d3623bd61aed77367a216584f008a5c2ea248","modified":1524214602414},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1524214602414},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1524214602416},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1524214602417},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1524214602417},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1524214602417},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1524214602418},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1524214602418},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1524214602418},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1524214602418},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1524214602419},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524214602419},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1524214602419},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1524214602420},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1524214602420},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1524214602420},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1524214602420},{"_id":"themes/next/source/images/weibo.png","hash":"57c8bdb7d822662acac3b4413dfb5128de389895","modified":1524214602422},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524214602365},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524214602365},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524214602403},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524214602403},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524214602404},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524214602411},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524214602412},{"_id":"themes/next/source/images/avatar2.png","hash":"726d26eb8cea358037f871cfcae969456c960e19","modified":1524214602416},{"_id":"themes/next/source/images/wechatpay.png","hash":"50ac4e7ae7de2b53848390e6ba3a04eabee255b8","modified":1524214602421},{"_id":"themes/next/.git/objects/pack/pack-ee236e1ce80a7ca1060ed9d91d4c2320d0a8b740.idx","hash":"076d106026c0e14a5987006cfa1d3b596508ad5e","modified":1524214601288},{"_id":"themes/next/.git/refs/heads/master","hash":"22f261b72adf82658b29b199bf58502e55cb0c30","modified":1524214602349},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1524214602361},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1524214602361},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1524214602362},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1524214602363},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1524214602363},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1524214602363},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1524214602363},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1524214602363},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1524214602364},{"_id":"themes/next/layout/_partials/share/mob_share.swig","hash":"e3d3ed55a1112a11a6c5f2bc10cba68f24abc6df","modified":1524214602364},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1524214602366},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1524214602366},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1524214602366},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1524214602366},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1524214602367},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1524214602367},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1524214602367},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1524214602367},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1524214602367},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"2bd5e20a54bfc57e6eaf34bc97ed5031714b2ba0","modified":1524214602368},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1524214602368},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1524214602368},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1524214602368},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1524214602369},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1524214602369},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1524214602369},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1524214602369},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1524214602370},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1524214602370},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1524214602370},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1524214602371},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1524214602371},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1524214602374},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1524214602374},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1524214602375},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1524214602375},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1524214602365},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1524214602365},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1524214602365},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"18bc6c29dbf43fa7b8edb2879d1e865666762073","modified":1524214602402},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1524214602403},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1524214602403},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1524214602404},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1524214602411},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1524214602411},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1524214602411},{"_id":"themes/next/source/css/_variables/base.styl","hash":"6aa83f2c88ab9dada58d38426adcc226df90855e","modified":1524214602412},{"_id":"themes/next/source/images/avatar.png","hash":"0a638d8c341bc81c216c4fc7acb203e42266ece9","modified":1524214602415},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1524214602422},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1524214602422},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1524214602423},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1524214602423},{"_id":"themes/next/source/js/src/fireworks.js","hash":"6bde28f4e7befae2cbcb7ba0fb8721097d583282","modified":1524214602423},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1524214602424},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1524214602424},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1524214602425},{"_id":"themes/next/source/js/src/particle.js","hash":"4ec4c6586584c7533e8e2f745b4cb6b9241f4179","modified":1524214602425},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1524214602425},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1524214602426},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1524214602426},{"_id":"themes/next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1524214602426},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1524214602431},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1524214602435},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1524214602435},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1524214602442},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1524214602442},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1524214602443},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1524214602443},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1524214602444},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1524214602444},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1524214602445},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1524214602445},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1524214602445},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1524214602458},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1524214602460},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1524214602460},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1524214602460},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1524214602460},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1524214602461},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1524214602461},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1524214602462},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1524214602461},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1524214602462},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1524214602462},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1524214602462},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1524214602463},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1524214602463},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1524214602463},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1524214602463},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1524214602464},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1524214602464},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1524214602464},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1524214602464},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1524214602465},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1524214602465},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1524214602465},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1524214602466},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1524214602466},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1524214602466},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1524214602467},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1524214602473},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1524214602473},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1524214602476},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1524214602476},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1524214602476},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1524214602459},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"5249ca43acd72148187711e2c15d43ef7f3d1882","modified":1524214602350},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1524214602348},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1524214602373},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1524214602374},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1524214602380},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1524214602380},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1524214602381},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1524214602381},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1524214602381},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1524214602384},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1524214602393},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1524214602399},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1524214602400},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1524214602400},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1524214602401},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1524214602401},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1524214602402},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1524214602402},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1524214602404},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1524214602405},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1524214602405},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1524214602405},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1524214602405},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1524214602406},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1524214602406},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1524214602406},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1524214602407},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1524214602408},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1524214602408},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1524214602408},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1524214602408},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1524214602409},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1524214602409},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1524214602410},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1524214602410},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1524214602410},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1524214602410},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1524214602426},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1524214602429},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1524214602430},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1524214602431},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1524214602436},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1524214602436},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1524214602437},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1524214602437},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1524214602437},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1524214602437},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1524214602440},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1524214602441},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1524214602442},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1524214602443},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1524214602444},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1524214602446},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1524214602446},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1524214602446},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1524214602472},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1524214602472},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1524214602430},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1524214602457},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1524214602458},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1524214602475},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"5249ca43acd72148187711e2c15d43ef7f3d1882","modified":1524214602348},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1524214602381},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"b03223e235d2f44f02ae48b70dc3a9d997619954","modified":1524214602381},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1524214602382},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"f4ab902c0fea9a1cfb2dace6c3a2f432b440a089","modified":1524214602382},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"e3b6fe5519832ebc3bdf4c3886768d28a9e1b79f","modified":1524214602382},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1524214602382},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1524214602382},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"a68c89230d91f879480fc4114d1463fb6688a72c","modified":1524214602382},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1524214602383},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1524214602383},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1524214602383},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1524214602383},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1524214602384},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1524214602384},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"3496dc2ca5647bbf6a827f991d61849205a5955a","modified":1524214602385},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1524214602385},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"89a5e4ebb423176967cb88c01c060a5dddd5a113","modified":1524214602385},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1524214602385},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1524214602385},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1524214602386},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1524214602386},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1524214602386},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1524214602386},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"9a005f8ddbc34ec0a3517d7a51a1ed2b26e29779","modified":1524214602387},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1524214602387},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1524214602387},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1524214602388},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1524214602388},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1524214602388},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e27032b54f6a727ae1fd473d48db00ddc9c55d79","modified":1524214602389},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1524214602389},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e2dd10a63a97f7fe2eb100b301b1dc809301ccd3","modified":1524214602389},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1524214602390},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1524214602390},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1524214602391},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1524214602391},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1524214602392},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1524214602392},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1524214602392},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1524214602393},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1524214602393},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1524214602393},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1524214602394},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1524214602394},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1524214602394},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1524214602395},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1524214602395},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1524214602395},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1524214602396},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1524214602396},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1524214602396},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1524214602397},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1524214602397},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1524214602397},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1524214602398},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1524214602398},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1524214602398},{"_id":"themes/next/source/css/_common/components/third-party/mob_share.styl","hash":"8a7c968490d5bb90631d36c2e31802b174e5ba4a","modified":1524214602398},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1524214602399},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"a60d6f7fc6ffe550fbccd9d3acdadfec0d7cf5cd","modified":1524214602399},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1524214602407},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1524214602407},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1524214602409},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1524214602427},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1524214602428},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1524214602428},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1524214602428},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1524214602429},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1524214602438},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1524214602438},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1524214602438},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1524214602439},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1524214602440},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1524214602440},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1524214602450},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1524214602448},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1524214602456},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1524214602435},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1524214602471},{"_id":"source/images/favicon2.png","hash":"660d81ac9d4f3e07dea382873704f47dcdbbe59f","modified":1524128514061},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1524214602454},{"_id":"themes/next/.git/objects/pack/pack-ee236e1ce80a7ca1060ed9d91d4c2320d0a8b740.pack","hash":"b3324e06703faaf11d14e89730f0dfe3baf1d885","modified":1524214601288}],"Category":[{"name":"随笔","_id":"cjg7rzbed00059l8iqfsn304r"},{"name":"示例代码","_id":"cjg7rzbm6000e9l8i7191vqn0"},{"name":"开发工具集","_id":"cjg7rzbma000j9l8ieivz3arh"},{"name":"Java面试题目汇总","_id":"cjg7rzbme000p9l8i08fnuojn"},{"name":"JVM","_id":"cjg7rzbmh000v9l8iytv7pv38"},{"name":"Java","_id":"cjg7rzbmu001i9l8i4n3aq0ig"},{"name":"Java多线程","_id":"cjg7rzbn500279l8i6cgzwe6l"},{"name":"Java Multi-thread Programming书籍","_id":"cjg7rzbnj002x9l8irw5rew0d"},{"name":"并发控制相关知识点","_id":"cjg7rzbnu003m9l8i9zhoh23h"},{"name":"Algorithms","_id":"cjg7rzbnx003x9l8ivy209wnx"}],"Data":[],"Page":[{"_content":"c7GpAJhSvl","source":"baidu_verify_c7GpAJhSvl.html","raw":"c7GpAJhSvl","date":"2018-03-19T06:02:09.783Z","updated":"2018-03-19T06:01:23.857Z","path":"baidu_verify_c7GpAJhSvl.html","title":"","comments":1,"layout":"page","_id":"cjg7rzbcf00009l8ijc0z1n0s","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">c7GpAJhSvl","site":{"data":{}},"excerpt":"","more":"c7GpAJhSvl"},{"_content":"google-site-verification: google95784a9a78d968a0.html","source":"google95784a9a78d968a0.html","raw":"google-site-verification: google95784a9a78d968a0.html","date":"2018-04-03T17:45:36.497Z","updated":"2018-04-03T17:45:16.432Z","path":"google95784a9a78d968a0.html","title":"","comments":1,"layout":"page","_id":"cjg7rzbcg00019l8it9xzpcky","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">google-site-verification: google95784a9a78d968a0.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: google95784a9a78d968a0.html"},{"title":"个人简介","date":"2018-03-19T04:39:30.000Z","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 个人简介\ndate: 2018-03-19 12:39:30\ncomments: false\n---\n","updated":"2018-03-19T04:39:55.723Z","path":"about/index.html","layout":"page","_id":"cjg7rzbeb00039l8i0rrsymwr","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"archives","date":"2018-03-06T13:44:36.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2018-03-06 21:44:36\n---\n","updated":"2018-03-06T13:44:36.675Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cjg7rzbec00049l8i8r3unizm","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-03-13T12:08:25.740Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 日期\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-03-13T11:24:37.959Z","path":"categories/index.html","layout":"page","_id":"cjg7rzbef00079l8iw7m0goyg","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-03-19T04:38:34.268Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 日期\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-03-19T04:38:34.262Z","path":"tags/index.html","layout":"page","_id":"cjg7rzbeg00089l8ighffrmfe","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"博客简介","copyright":true,"date":"2014-07-22T02:40:18.000Z","comments":0,"updated":"2014-07-22T04:29:00.000Z","_content":"\n#### 个人博客简介\n&emsp;&emsp;&emsp;&emsp;作为一枚计科专业的码农，2014年开始从事后端应用开发至今，将日常工作中遇到的问题、个人知识积累、个人见解和“打怪升级”晋级的经验分享于自己的博客，欢迎广大蜀黍来此博客分享自己的“故事”。\n   \n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;------&emsp;ZhangSunny \n<!-- more -->\n\n\n\n\n\n","source":"_posts/firstblog.md","raw":"---\ntitle: 博客简介\ntags: [小记]\ncopyright: true\ndate: 2014-07-22 10:40:18\ncategories: 随笔\ncomments: false\nupdated: 2014-07-22 12:29:00\n---\n\n#### 个人博客简介\n&emsp;&emsp;&emsp;&emsp;作为一枚计科专业的码农，2014年开始从事后端应用开发至今，将日常工作中遇到的问题、个人知识积累、个人见解和“打怪升级”晋级的经验分享于自己的博客，欢迎广大蜀黍来此博客分享自己的“故事”。\n   \n   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;------&emsp;ZhangSunny \n<!-- more -->\n\n\n\n\n\n","slug":"firstblog","published":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbe700029l8iqa2zkwzi","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h4 id=\"个人博客简介\"><a href=\"#个人博客简介\" class=\"headerlink\" title=\"个人博客简介\"></a>个人博客简介</h4><p>&emsp;&emsp;&emsp;&emsp;作为一枚计科专业的码农，2014年开始从事后端应用开发至今，将日常工作中遇到的问题、个人知识积累、个人见解和“打怪升级”晋级的经验分享于自己的博客，欢迎广大蜀黍来此博客分享自己的“故事”。</p>\n<p>   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;———&emsp;ZhangSunny<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"个人博客简介\"><a href=\"#个人博客简介\" class=\"headerlink\" title=\"个人博客简介\"></a>个人博客简介</h4><p>&emsp;&emsp;&emsp;&emsp;作为一枚计科专业的码农，2014年开始从事后端应用开发至今，将日常工作中遇到的问题、个人知识积累、个人见解和“打怪升级”晋级的经验分享于自己的博客，欢迎广大蜀黍来此博客分享自己的“故事”。</p>\n<p>   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;———&emsp;ZhangSunny<br></p>","more":"<p></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Jul 22 2014 12:29:00 GMT+0800 (CST)","title":"博客简介","path":"2014/07/22/firstblog/","eyeCatchImage":null,"excerpt":"<h4 id=\"个人博客简介\"><a href=\"#个人博客简介\" class=\"headerlink\" title=\"个人博客简介\"></a>个人博客简介</h4><p>&emsp;&emsp;&emsp;&emsp;作为一枚计科专业的码农，2014年开始从事后端应用开发至今，将日常工作中遇到的问题、个人知识积累、个人见解和“打怪升级”晋级的经验分享于自己的博客，欢迎广大蜀黍来此博客分享自己的“故事”。</p>\n<p>   &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;———&emsp;ZhangSunny<br></p>","date":"2014-07-22T02:40:18.000Z","pv":0,"totalPV":0,"categories":"随笔","tags":["小记"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"concurrent source code read","copyright":true,"date":"2018-04-18T09:15:57.000Z","updated":"2018-04-18T09:15:57.944Z","_content":"\n\n","source":"_posts/ConcurrentSourceCodeRead/concurrent-source-code-read.md","raw":"---\ntitle: concurrent source code read\ntags: []\ncopyright: true\ndate: 2018-04-18 17:15:57\ncategories:\nupdated:\n---\n\n\n","slug":"ConcurrentSourceCodeRead/concurrent-source-code-read","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbm2000b9l8ib4n5jmty","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Apr 18 2018 17:15:57 GMT+0800 (CST)","title":"concurrent source code read","path":"2018/04/18/ConcurrentSourceCodeRead/concurrent-source-code-read/","eyeCatchImage":null,"excerpt":null,"date":"2018-04-18T09:15:57.000Z","pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"单例模式","date":"2017-05-06T10:23:43.000Z","updated":"2017-05-06T13:40:21.000Z","copyright":true,"mathjax":true,"_content":"\n[单例模式](http://www.runoob.com/design-pattern/singleton-pattern.html)\n\n\n","source":"_posts/DesignPattern/SingletonPattern.md","raw":"---\ntitle: 单例模式\ndate: 2017-05-06 18:23:43\nupdated: 2017-05-06 21:40:21\ncategories: 示例代码\ntags: [Code]\ncopyright: true\nmathjax: true\n---\n\n[单例模式](http://www.runoob.com/design-pattern/singleton-pattern.html)\n\n\n","slug":"DesignPattern/SingletonPattern","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbm4000c9l8i4xziw9xo","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><a href=\"http://www.runoob.com/design-pattern/singleton-pattern.html\" target=\"_blank\" rel=\"noopener\">单例模式</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.runoob.com/design-pattern/singleton-pattern.html\" target=\"_blank\" rel=\"noopener\">单例模式</a></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat May 06 2017 21:40:21 GMT+0800 (CST)","title":"单例模式","path":"2017/05/06/DesignPattern/SingletonPattern/","eyeCatchImage":null,"excerpt":null,"date":"2017-05-06T10:23:43.000Z","pv":0,"totalPV":0,"categories":"示例代码","tags":["Code"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"日常开发工具集（1）","date":"2017-03-01T12:20:25.000Z","updated":"2017-03-01T13:33:14.000Z","copyright":true,"mathjax":true,"_content":"\n&emsp;&emsp;日常工作中只要时方便开发的部分工具的用途及资源会在此文介绍，欢迎广大技术蜀黍添加。\n\n#### Java源代码搜索\n&emsp;&emsp;Grepcode([资源地址](http://grepcode.com/))是面向Java开发人员的网站，这里可通过Java的<font color=#FF8C69>project</font> 、<font color=#FF8C69>classes</font>等关键字在线查看它对应的源码，知道对应的<font color=#FF8C69>project</font>、<font color=#FF8C69>classes</font>等信息。更方便的是，能提供不同版本的源代码在线查看：**jar包** 、**源码jar包**、**doc下载**。同样，也可以使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。\n![Grepcode](http://p5vswdxl9.bkt.clouddn.com/Grepcode.jpg)\n\n<!--more-->\n\n#### 开源代码以及文档搜索\n&emsp;&emsp;SearchCode([资源地址](https://searchcode.com/))是一个源码搜索引擎，目前支持从**Github** 、**Bitbucket**、**Google Code**、**CodePlex**、**SourceForge** 和 **Fedora Project** 平台搜索公开的源码。\n![Searchcode](http://p5vswdxl9.bkt.clouddn.com/searchcode.jpg)\n\n#### 电子书搜索\n&emsp;&emsp;鸠摩搜书([资源地址](https://www.jiumodiary.com/))是一个比较不错的电子书搜索网站。内容也比较全。\n![Jiumodiary](http://p5vswdxl9.bkt.clouddn.com/jiumodiary.jpg)\n\n#### 网盘资源搜索\n&emsp;&emsp;盘搜([资源地址](http://pansou.com))可以通过这个网站搜索百度网盘上面的各种资源。\n![Pansou](http://p5vswdxl9.bkt.clouddn.com/Pansou.jpg)\n\n#### 无版权图片搜索\n&emsp;&emsp;Unsplash([资源地址](https://unsplash.com))是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜\n![Unsplash](http://p5vswdxl9.bkt.clouddn.com/unsplash.jpg)\n\n#### 在线UML制图\n&emsp;&emsp;ProcessOn([资源地址](https://unsplash.com))是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作**流程图** 、**BPMN** 、**UML图** 、**UI界面原型设计**、**iOS界面原型设计**等。\n![ProcessOn](http://p5vswdxl9.bkt.clouddn.com/ProcessOn.jpg)\n\n#### Json在线验证及格式化\n&emsp;&emsp;json.cn([资源地址](https://www.json.cn/))是比较不错的，不仅支持Json格式的验证及格式化，还可以将Json格式压缩成普通文本等，以及查询Json组件和Json解析相关代码好用功能。\n![Json.cn](http://p5vswdxl9.bkt.clouddn.com/json.cn.jpg)\n\n#### json生成java类\n&emsp;&emsp;bejson([资源地址](http://www.bejson.com/json2javapojo/)Json是目前JavaWeb中数据传输的主要格式，很多时候会有把Json转成Java对象的需求。有时候合作方会提供一个Json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。\n![bejson](http://p5vswdxl9.bkt.clouddn.com/bejson.jpg)\n\n#### SQL自动生成Java代码\n&emsp;&emsp;Json([资源地址](http://www.autojcode.com/code/sql2class.jsp#))是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。\n![AutoJCode.jpg](http://p5vswdxl9.bkt.clouddn.com/AutoJcode.jpg)\n\n#### Maven依赖查询\n&emsp;&emsp;Mvnrepository([资源地址](http://mvnrepository.com/))查询开源的Java的jar包版本依赖标签\n![mvnrepository](http://p5vswdxl9.bkt.clouddn.com/maven.png)\n\n#### Cron表达式生成\n&emsp;&emsp;Pdtools([资源地址](http://www.pdtools.net/tools/becron.jsp\n))用于配置定时任务的cron表达式。\n![cron](http://p5vswdxl9.bkt.clouddn.com/cron.jpg)\n\n#### 正则验证\n&emsp;&emsp;([资源地址](http://tool.chinaz.com/regex))Java开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。\n![](http://p5vswdxl9.bkt.clouddn.com/regex%281%29.jpg)\n\n#### 正则代码生成\n&emsp;&emsp;([资源地址](http://tool.chinaz.com/tools/regexgenerate))站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。\n![](http://p5vswdxl9.bkt.clouddn.com/regex2.jpg)\n\n#### 时间戳转换\n&emsp;&emsp;([资源地址](http://tool.chinaz.com/Tools/unixtime.aspx))时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。\nJava中很多地方都会用到时间戳，也经常会使用这种转换工具。\n![](http://p5vswdxl9.bkt.clouddn.com/timestamp.jpg)\n\n#### 加密解密\n&emsp;&emsp;([资源地址](http://tool.chinaz.com/tools/textencrypt.aspx))加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。\n![](http://p5vswdxl9.bkt.clouddn.com/md5.jpg)\n\n#### 在线调色板\n&emsp;&emsp;([资源地址](http://link.fobshanghai.com/rgbcolor.htm))常用MarkDown字体配色使用获取RGB代码例如：\n```xml\n<font face=\"微软雅黑\" color=#9900ff size=2>-Xms1024m -Xmx1024m  -XX:PermSize=512M -XX:MaxPermSize=1024m  -Dfile.encoding=utf-8 </font>\n```\n![](http://p5vswdxl9.bkt.clouddn.com/tiaose.jpg)\n\n#### ASCII ART生成\n&emsp;&emsp;ASCII ART生成([资源地址](http://patorjk.com/software/taag/))\n![](http://p5vswdxl9.bkt.clouddn.com/ASCII%20ART.jpg)\n\n#### 常用对照表\n1. [ASCII对照表]( http://tool.oschina.net/commons?type=4)\n2. [HTTP状态码](http://tool.oschina.net/commons?type=5)\n3. [HTTP Content-type]( http://tool.oschina.net/commons)\n4. [TCP/UDP常见端口参考](http://tool.oschina.net/commons?type=7)\n5. [HTML转义字符]( http://tool.oschina.net/commons?type=2)\n6. [RGB颜色参考](http://tool.oschina.net/commons?type=3)\n7. [网页字体参考](http://tool.oschina.net/commons?type=8)\n\n\n\n\n\n\n\n\n","source":"_posts/DevTools/developing-tools.md","raw":"---\ntitle: 日常开发工具集（1）\ndate: 2017-03-01 20:20:25\nupdated: 2017-03-01 21:33:14\ncategories: 开发工具集\ntags: [tools]\ncopyright: true\nmathjax: true\n---\n\n&emsp;&emsp;日常工作中只要时方便开发的部分工具的用途及资源会在此文介绍，欢迎广大技术蜀黍添加。\n\n#### Java源代码搜索\n&emsp;&emsp;Grepcode([资源地址](http://grepcode.com/))是面向Java开发人员的网站，这里可通过Java的<font color=#FF8C69>project</font> 、<font color=#FF8C69>classes</font>等关键字在线查看它对应的源码，知道对应的<font color=#FF8C69>project</font>、<font color=#FF8C69>classes</font>等信息。更方便的是，能提供不同版本的源代码在线查看：**jar包** 、**源码jar包**、**doc下载**。同样，也可以使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。\n![Grepcode](http://p5vswdxl9.bkt.clouddn.com/Grepcode.jpg)\n\n<!--more-->\n\n#### 开源代码以及文档搜索\n&emsp;&emsp;SearchCode([资源地址](https://searchcode.com/))是一个源码搜索引擎，目前支持从**Github** 、**Bitbucket**、**Google Code**、**CodePlex**、**SourceForge** 和 **Fedora Project** 平台搜索公开的源码。\n![Searchcode](http://p5vswdxl9.bkt.clouddn.com/searchcode.jpg)\n\n#### 电子书搜索\n&emsp;&emsp;鸠摩搜书([资源地址](https://www.jiumodiary.com/))是一个比较不错的电子书搜索网站。内容也比较全。\n![Jiumodiary](http://p5vswdxl9.bkt.clouddn.com/jiumodiary.jpg)\n\n#### 网盘资源搜索\n&emsp;&emsp;盘搜([资源地址](http://pansou.com))可以通过这个网站搜索百度网盘上面的各种资源。\n![Pansou](http://p5vswdxl9.bkt.clouddn.com/Pansou.jpg)\n\n#### 无版权图片搜索\n&emsp;&emsp;Unsplash([资源地址](https://unsplash.com))是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜\n![Unsplash](http://p5vswdxl9.bkt.clouddn.com/unsplash.jpg)\n\n#### 在线UML制图\n&emsp;&emsp;ProcessOn([资源地址](https://unsplash.com))是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作**流程图** 、**BPMN** 、**UML图** 、**UI界面原型设计**、**iOS界面原型设计**等。\n![ProcessOn](http://p5vswdxl9.bkt.clouddn.com/ProcessOn.jpg)\n\n#### Json在线验证及格式化\n&emsp;&emsp;json.cn([资源地址](https://www.json.cn/))是比较不错的，不仅支持Json格式的验证及格式化，还可以将Json格式压缩成普通文本等，以及查询Json组件和Json解析相关代码好用功能。\n![Json.cn](http://p5vswdxl9.bkt.clouddn.com/json.cn.jpg)\n\n#### json生成java类\n&emsp;&emsp;bejson([资源地址](http://www.bejson.com/json2javapojo/)Json是目前JavaWeb中数据传输的主要格式，很多时候会有把Json转成Java对象的需求。有时候合作方会提供一个Json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。\n![bejson](http://p5vswdxl9.bkt.clouddn.com/bejson.jpg)\n\n#### SQL自动生成Java代码\n&emsp;&emsp;Json([资源地址](http://www.autojcode.com/code/sql2class.jsp#))是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。\n![AutoJCode.jpg](http://p5vswdxl9.bkt.clouddn.com/AutoJcode.jpg)\n\n#### Maven依赖查询\n&emsp;&emsp;Mvnrepository([资源地址](http://mvnrepository.com/))查询开源的Java的jar包版本依赖标签\n![mvnrepository](http://p5vswdxl9.bkt.clouddn.com/maven.png)\n\n#### Cron表达式生成\n&emsp;&emsp;Pdtools([资源地址](http://www.pdtools.net/tools/becron.jsp\n))用于配置定时任务的cron表达式。\n![cron](http://p5vswdxl9.bkt.clouddn.com/cron.jpg)\n\n#### 正则验证\n&emsp;&emsp;([资源地址](http://tool.chinaz.com/regex))Java开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。\n![](http://p5vswdxl9.bkt.clouddn.com/regex%281%29.jpg)\n\n#### 正则代码生成\n&emsp;&emsp;([资源地址](http://tool.chinaz.com/tools/regexgenerate))站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。\n![](http://p5vswdxl9.bkt.clouddn.com/regex2.jpg)\n\n#### 时间戳转换\n&emsp;&emsp;([资源地址](http://tool.chinaz.com/Tools/unixtime.aspx))时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。\nJava中很多地方都会用到时间戳，也经常会使用这种转换工具。\n![](http://p5vswdxl9.bkt.clouddn.com/timestamp.jpg)\n\n#### 加密解密\n&emsp;&emsp;([资源地址](http://tool.chinaz.com/tools/textencrypt.aspx))加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。\n![](http://p5vswdxl9.bkt.clouddn.com/md5.jpg)\n\n#### 在线调色板\n&emsp;&emsp;([资源地址](http://link.fobshanghai.com/rgbcolor.htm))常用MarkDown字体配色使用获取RGB代码例如：\n```xml\n<font face=\"微软雅黑\" color=#9900ff size=2>-Xms1024m -Xmx1024m  -XX:PermSize=512M -XX:MaxPermSize=1024m  -Dfile.encoding=utf-8 </font>\n```\n![](http://p5vswdxl9.bkt.clouddn.com/tiaose.jpg)\n\n#### ASCII ART生成\n&emsp;&emsp;ASCII ART生成([资源地址](http://patorjk.com/software/taag/))\n![](http://p5vswdxl9.bkt.clouddn.com/ASCII%20ART.jpg)\n\n#### 常用对照表\n1. [ASCII对照表]( http://tool.oschina.net/commons?type=4)\n2. [HTTP状态码](http://tool.oschina.net/commons?type=5)\n3. [HTTP Content-type]( http://tool.oschina.net/commons)\n4. [TCP/UDP常见端口参考](http://tool.oschina.net/commons?type=7)\n5. [HTML转义字符]( http://tool.oschina.net/commons?type=2)\n6. [RGB颜色参考](http://tool.oschina.net/commons?type=3)\n7. [网页字体参考](http://tool.oschina.net/commons?type=8)\n\n\n\n\n\n\n\n\n","slug":"DevTools/developing-tools","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbm5000d9l8i25i4ckhm","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>&emsp;&emsp;日常工作中只要时方便开发的部分工具的用途及资源会在此文介绍，欢迎广大技术蜀黍添加。</p>\n<h4 id=\"Java源代码搜索\"><a href=\"#Java源代码搜索\" class=\"headerlink\" title=\"Java源代码搜索\"></a>Java源代码搜索</h4><p>&emsp;&emsp;Grepcode(<a href=\"http://grepcode.com/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是面向Java开发人员的网站，这里可通过Java的<font color=\"#FF8C69\">project</font> 、<font color=\"#FF8C69\">classes</font>等关键字在线查看它对应的源码，知道对应的<font color=\"#FF8C69\">project</font>、<font color=\"#FF8C69\">classes</font>等信息。更方便的是，能提供不同版本的源代码在线查看：<strong>jar包</strong> 、<strong>源码jar包</strong>、<strong>doc下载</strong>。同样，也可以使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/Grepcode.jpg\" alt=\"Grepcode\"></p>\n<a id=\"more\"></a>\n<h4 id=\"开源代码以及文档搜索\"><a href=\"#开源代码以及文档搜索\" class=\"headerlink\" title=\"开源代码以及文档搜索\"></a>开源代码以及文档搜索</h4><p>&emsp;&emsp;SearchCode(<a href=\"https://searchcode.com/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是一个源码搜索引擎，目前支持从<strong>Github</strong> 、<strong>Bitbucket</strong>、<strong>Google Code</strong>、<strong>CodePlex</strong>、<strong>SourceForge</strong> 和 <strong>Fedora Project</strong> 平台搜索公开的源码。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/searchcode.jpg\" alt=\"Searchcode\"></p>\n<h4 id=\"电子书搜索\"><a href=\"#电子书搜索\" class=\"headerlink\" title=\"电子书搜索\"></a>电子书搜索</h4><p>&emsp;&emsp;鸠摩搜书(<a href=\"https://www.jiumodiary.com/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是一个比较不错的电子书搜索网站。内容也比较全。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/jiumodiary.jpg\" alt=\"Jiumodiary\"></p>\n<h4 id=\"网盘资源搜索\"><a href=\"#网盘资源搜索\" class=\"headerlink\" title=\"网盘资源搜索\"></a>网盘资源搜索</h4><p>&emsp;&emsp;盘搜(<a href=\"http://pansou.com\" target=\"_blank\" rel=\"noopener\">资源地址</a>)可以通过这个网站搜索百度网盘上面的各种资源。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/Pansou.jpg\" alt=\"Pansou\"></p>\n<h4 id=\"无版权图片搜索\"><a href=\"#无版权图片搜索\" class=\"headerlink\" title=\"无版权图片搜索\"></a>无版权图片搜索</h4><p>&emsp;&emsp;Unsplash(<a href=\"https://unsplash.com\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/unsplash.jpg\" alt=\"Unsplash\"></p>\n<h4 id=\"在线UML制图\"><a href=\"#在线UML制图\" class=\"headerlink\" title=\"在线UML制图\"></a>在线UML制图</h4><p>&emsp;&emsp;ProcessOn(<a href=\"https://unsplash.com\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作<strong>流程图</strong> 、<strong>BPMN</strong> 、<strong>UML图</strong> 、<strong>UI界面原型设计</strong>、<strong>iOS界面原型设计</strong>等。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/ProcessOn.jpg\" alt=\"ProcessOn\"></p>\n<h4 id=\"Json在线验证及格式化\"><a href=\"#Json在线验证及格式化\" class=\"headerlink\" title=\"Json在线验证及格式化\"></a>Json在线验证及格式化</h4><p>&emsp;&emsp;json.cn(<a href=\"https://www.json.cn/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是比较不错的，不仅支持Json格式的验证及格式化，还可以将Json格式压缩成普通文本等，以及查询Json组件和Json解析相关代码好用功能。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/json.cn.jpg\" alt=\"Json.cn\"></p>\n<h4 id=\"json生成java类\"><a href=\"#json生成java类\" class=\"headerlink\" title=\"json生成java类\"></a>json生成java类</h4><p>&emsp;&emsp;bejson(<a href=\"http://www.bejson.com/json2javapojo/\" target=\"_blank\" rel=\"noopener\">资源地址</a>Json是目前JavaWeb中数据传输的主要格式，很多时候会有把Json转成Java对象的需求。有时候合作方会提供一个Json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/bejson.jpg\" alt=\"bejson\"></p>\n<h4 id=\"SQL自动生成Java代码\"><a href=\"#SQL自动生成Java代码\" class=\"headerlink\" title=\"SQL自动生成Java代码\"></a>SQL自动生成Java代码</h4><p>&emsp;&emsp;Json(<a href=\"http://www.autojcode.com/code/sql2class.jsp#\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/AutoJcode.jpg\" alt=\"AutoJCode.jpg\"></p>\n<h4 id=\"Maven依赖查询\"><a href=\"#Maven依赖查询\" class=\"headerlink\" title=\"Maven依赖查询\"></a>Maven依赖查询</h4><p>&emsp;&emsp;Mvnrepository(<a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)查询开源的Java的jar包版本依赖标签<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/maven.png\" alt=\"mvnrepository\"></p>\n<h4 id=\"Cron表达式生成\"><a href=\"#Cron表达式生成\" class=\"headerlink\" title=\"Cron表达式生成\"></a>Cron表达式生成</h4><p>&emsp;&emsp;Pdtools(<a href=\"http://www.pdtools.net/tools/becron.jsp\" target=\"_blank\" rel=\"noopener\">资源地址</a>)用于配置定时任务的cron表达式。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/cron.jpg\" alt=\"cron\"></p>\n<h4 id=\"正则验证\"><a href=\"#正则验证\" class=\"headerlink\" title=\"正则验证\"></a>正则验证</h4><p>&emsp;&emsp;(<a href=\"http://tool.chinaz.com/regex\" target=\"_blank\" rel=\"noopener\">资源地址</a>)Java开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/regex%281%29.jpg\" alt=\"\"></p>\n<h4 id=\"正则代码生成\"><a href=\"#正则代码生成\" class=\"headerlink\" title=\"正则代码生成\"></a>正则代码生成</h4><p>&emsp;&emsp;(<a href=\"http://tool.chinaz.com/tools/regexgenerate\" target=\"_blank\" rel=\"noopener\">资源地址</a>)站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/regex2.jpg\" alt=\"\"></p>\n<h4 id=\"时间戳转换\"><a href=\"#时间戳转换\" class=\"headerlink\" title=\"时间戳转换\"></a>时间戳转换</h4><p>&emsp;&emsp;(<a href=\"http://tool.chinaz.com/Tools/unixtime.aspx\" target=\"_blank\" rel=\"noopener\">资源地址</a>)时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。<br>Java中很多地方都会用到时间戳，也经常会使用这种转换工具。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/timestamp.jpg\" alt=\"\"></p>\n<h4 id=\"加密解密\"><a href=\"#加密解密\" class=\"headerlink\" title=\"加密解密\"></a>加密解密</h4><p>&emsp;&emsp;(<a href=\"http://tool.chinaz.com/tools/textencrypt.aspx\" target=\"_blank\" rel=\"noopener\">资源地址</a>)加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/md5.jpg\" alt=\"\"></p>\n<h4 id=\"在线调色板\"><a href=\"#在线调色板\" class=\"headerlink\" title=\"在线调色板\"></a>在线调色板</h4><p>&emsp;&emsp;(<a href=\"http://link.fobshanghai.com/rgbcolor.htm\" target=\"_blank\" rel=\"noopener\">资源地址</a>)常用MarkDown字体配色使用获取RGB代码例如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">face</span>=<span class=\"string\">\"微软雅黑\"</span> <span class=\"attr\">color</span>=<span class=\"string\">#9900ff</span> <span class=\"attr\">size</span>=<span class=\"string\">2</span>&gt;</span>-Xms1024m -Xmx1024m  -XX:PermSize=512M -XX:MaxPermSize=1024m  -Dfile.encoding=utf-8 <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://p5vswdxl9.bkt.clouddn.com/tiaose.jpg\" alt=\"\"></p>\n<h4 id=\"ASCII-ART生成\"><a href=\"#ASCII-ART生成\" class=\"headerlink\" title=\"ASCII ART生成\"></a>ASCII ART生成</h4><p>&emsp;&emsp;ASCII ART生成(<a href=\"http://patorjk.com/software/taag/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/ASCII%20ART.jpg\" alt=\"\"></p>\n<h4 id=\"常用对照表\"><a href=\"#常用对照表\" class=\"headerlink\" title=\"常用对照表\"></a>常用对照表</h4><ol>\n<li><a href=\"http://tool.oschina.net/commons?type=4\" target=\"_blank\" rel=\"noopener\">ASCII对照表</a></li>\n<li><a href=\"http://tool.oschina.net/commons?type=5\" target=\"_blank\" rel=\"noopener\">HTTP状态码</a></li>\n<li><a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">HTTP Content-type</a></li>\n<li><a href=\"http://tool.oschina.net/commons?type=7\" target=\"_blank\" rel=\"noopener\">TCP/UDP常见端口参考</a></li>\n<li><a href=\"http://tool.oschina.net/commons?type=2\" target=\"_blank\" rel=\"noopener\">HTML转义字符</a></li>\n<li><a href=\"http://tool.oschina.net/commons?type=3\" target=\"_blank\" rel=\"noopener\">RGB颜色参考</a></li>\n<li><a href=\"http://tool.oschina.net/commons?type=8\" target=\"_blank\" rel=\"noopener\">网页字体参考</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>&emsp;&emsp;日常工作中只要时方便开发的部分工具的用途及资源会在此文介绍，欢迎广大技术蜀黍添加。</p>\n<h4 id=\"Java源代码搜索\"><a href=\"#Java源代码搜索\" class=\"headerlink\" title=\"Java源代码搜索\"></a>Java源代码搜索</h4><p>&emsp;&emsp;Grepcode(<a href=\"http://grepcode.com/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是面向Java开发人员的网站，这里可通过Java的<font color=\"#FF8C69\">project</font> 、<font color=\"#FF8C69\">classes</font>等关键字在线查看它对应的源码，知道对应的<font color=\"#FF8C69\">project</font>、<font color=\"#FF8C69\">classes</font>等信息。更方便的是，能提供不同版本的源代码在线查看：<strong>jar包</strong> 、<strong>源码jar包</strong>、<strong>doc下载</strong>。同样，也可以使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/Grepcode.jpg\" alt=\"Grepcode\"></p>","more":"<h4 id=\"开源代码以及文档搜索\"><a href=\"#开源代码以及文档搜索\" class=\"headerlink\" title=\"开源代码以及文档搜索\"></a>开源代码以及文档搜索</h4><p>&emsp;&emsp;SearchCode(<a href=\"https://searchcode.com/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是一个源码搜索引擎，目前支持从<strong>Github</strong> 、<strong>Bitbucket</strong>、<strong>Google Code</strong>、<strong>CodePlex</strong>、<strong>SourceForge</strong> 和 <strong>Fedora Project</strong> 平台搜索公开的源码。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/searchcode.jpg\" alt=\"Searchcode\"></p>\n<h4 id=\"电子书搜索\"><a href=\"#电子书搜索\" class=\"headerlink\" title=\"电子书搜索\"></a>电子书搜索</h4><p>&emsp;&emsp;鸠摩搜书(<a href=\"https://www.jiumodiary.com/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是一个比较不错的电子书搜索网站。内容也比较全。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/jiumodiary.jpg\" alt=\"Jiumodiary\"></p>\n<h4 id=\"网盘资源搜索\"><a href=\"#网盘资源搜索\" class=\"headerlink\" title=\"网盘资源搜索\"></a>网盘资源搜索</h4><p>&emsp;&emsp;盘搜(<a href=\"http://pansou.com\" target=\"_blank\" rel=\"noopener\">资源地址</a>)可以通过这个网站搜索百度网盘上面的各种资源。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/Pansou.jpg\" alt=\"Pansou\"></p>\n<h4 id=\"无版权图片搜索\"><a href=\"#无版权图片搜索\" class=\"headerlink\" title=\"无版权图片搜索\"></a>无版权图片搜索</h4><p>&emsp;&emsp;Unsplash(<a href=\"https://unsplash.com\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是我用过的最好的网站，不需要登录，图片很高请，也比较全。唯一的缺点就是需要英文搜搜<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/unsplash.jpg\" alt=\"Unsplash\"></p>\n<h4 id=\"在线UML制图\"><a href=\"#在线UML制图\" class=\"headerlink\" title=\"在线UML制图\"></a>在线UML制图</h4><p>&emsp;&emsp;ProcessOn(<a href=\"https://unsplash.com\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是一个在线协作绘图平台，为用户提供最强大、易用的作图工具!支持在线创作<strong>流程图</strong> 、<strong>BPMN</strong> 、<strong>UML图</strong> 、<strong>UI界面原型设计</strong>、<strong>iOS界面原型设计</strong>等。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/ProcessOn.jpg\" alt=\"ProcessOn\"></p>\n<h4 id=\"Json在线验证及格式化\"><a href=\"#Json在线验证及格式化\" class=\"headerlink\" title=\"Json在线验证及格式化\"></a>Json在线验证及格式化</h4><p>&emsp;&emsp;json.cn(<a href=\"https://www.json.cn/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是比较不错的，不仅支持Json格式的验证及格式化，还可以将Json格式压缩成普通文本等，以及查询Json组件和Json解析相关代码好用功能。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/json.cn.jpg\" alt=\"Json.cn\"></p>\n<h4 id=\"json生成java类\"><a href=\"#json生成java类\" class=\"headerlink\" title=\"json生成java类\"></a>json生成java类</h4><p>&emsp;&emsp;bejson(<a href=\"http://www.bejson.com/json2javapojo/\" target=\"_blank\" rel=\"noopener\">资源地址</a>Json是目前JavaWeb中数据传输的主要格式，很多时候会有把Json转成Java对象的需求。有时候合作方会提供一个Json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/bejson.jpg\" alt=\"bejson\"></p>\n<h4 id=\"SQL自动生成Java代码\"><a href=\"#SQL自动生成Java代码\" class=\"headerlink\" title=\"SQL自动生成Java代码\"></a>SQL自动生成Java代码</h4><p>&emsp;&emsp;Json(<a href=\"http://www.autojcode.com/code/sql2class.jsp#\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是目前JavaWeb中数据传输的主要格式，很多时候会有把json转成Java对象的需求。有时候合作方会提供一个json的样例，需要我们自己定义Java类，这时候这个工具就派上用场了。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/AutoJcode.jpg\" alt=\"AutoJCode.jpg\"></p>\n<h4 id=\"Maven依赖查询\"><a href=\"#Maven依赖查询\" class=\"headerlink\" title=\"Maven依赖查询\"></a>Maven依赖查询</h4><p>&emsp;&emsp;Mvnrepository(<a href=\"http://mvnrepository.com/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)查询开源的Java的jar包版本依赖标签<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/maven.png\" alt=\"mvnrepository\"></p>\n<h4 id=\"Cron表达式生成\"><a href=\"#Cron表达式生成\" class=\"headerlink\" title=\"Cron表达式生成\"></a>Cron表达式生成</h4><p>&emsp;&emsp;Pdtools(<a href=\"http://www.pdtools.net/tools/becron.jsp\" target=\"_blank\" rel=\"noopener\">资源地址</a>)用于配置定时任务的cron表达式。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/cron.jpg\" alt=\"cron\"></p>\n<h4 id=\"正则验证\"><a href=\"#正则验证\" class=\"headerlink\" title=\"正则验证\"></a>正则验证</h4><p>&emsp;&emsp;(<a href=\"http://tool.chinaz.com/regex\" target=\"_blank\" rel=\"noopener\">资源地址</a>)Java开发对正则表达式肯定不陌生。站长工具提供的正则验证还不错。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/regex%281%29.jpg\" alt=\"\"></p>\n<h4 id=\"正则代码生成\"><a href=\"#正则代码生成\" class=\"headerlink\" title=\"正则代码生成\"></a>正则代码生成</h4><p>&emsp;&emsp;(<a href=\"http://tool.chinaz.com/tools/regexgenerate\" target=\"_blank\" rel=\"noopener\">资源地址</a>)站长工具提供的正则代码生成。可以一键生成身份证号、邮箱、手机号等验证的正则表达式。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/regex2.jpg\" alt=\"\"></p>\n<h4 id=\"时间戳转换\"><a href=\"#时间戳转换\" class=\"headerlink\" title=\"时间戳转换\"></a>时间戳转换</h4><p>&emsp;&emsp;(<a href=\"http://tool.chinaz.com/Tools/unixtime.aspx\" target=\"_blank\" rel=\"noopener\">资源地址</a>)时间戳(英语：Timestamp）是指在一连串的资料中加入辨识文字，如时间或日期，用以保障本地端（local）资料更新顺序与远端（remote）一致。<br>Java中很多地方都会用到时间戳，也经常会使用这种转换工具。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/timestamp.jpg\" alt=\"\"></p>\n<h4 id=\"加密解密\"><a href=\"#加密解密\" class=\"headerlink\" title=\"加密解密\"></a>加密解密</h4><p>&emsp;&emsp;(<a href=\"http://tool.chinaz.com/tools/textencrypt.aspx\" target=\"_blank\" rel=\"noopener\">资源地址</a>)加密解密也是JavaWeb可能会经常遇到的，有的时候我们需要验证加密算法是否正确，或者要解密等场景，就需要一个在线工具。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/md5.jpg\" alt=\"\"></p>\n<h4 id=\"在线调色板\"><a href=\"#在线调色板\" class=\"headerlink\" title=\"在线调色板\"></a>在线调色板</h4><p>&emsp;&emsp;(<a href=\"http://link.fobshanghai.com/rgbcolor.htm\" target=\"_blank\" rel=\"noopener\">资源地址</a>)常用MarkDown字体配色使用获取RGB代码例如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">face</span>=<span class=\"string\">\"微软雅黑\"</span> <span class=\"attr\">color</span>=<span class=\"string\">#9900ff</span> <span class=\"attr\">size</span>=<span class=\"string\">2</span>&gt;</span>-Xms1024m -Xmx1024m  -XX:PermSize=512M -XX:MaxPermSize=1024m  -Dfile.encoding=utf-8 <span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://p5vswdxl9.bkt.clouddn.com/tiaose.jpg\" alt=\"\"></p>\n<h4 id=\"ASCII-ART生成\"><a href=\"#ASCII-ART生成\" class=\"headerlink\" title=\"ASCII ART生成\"></a>ASCII ART生成</h4><p>&emsp;&emsp;ASCII ART生成(<a href=\"http://patorjk.com/software/taag/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/ASCII%20ART.jpg\" alt=\"\"></p>\n<h4 id=\"常用对照表\"><a href=\"#常用对照表\" class=\"headerlink\" title=\"常用对照表\"></a>常用对照表</h4><ol>\n<li><a href=\"http://tool.oschina.net/commons?type=4\" target=\"_blank\" rel=\"noopener\">ASCII对照表</a></li>\n<li><a href=\"http://tool.oschina.net/commons?type=5\" target=\"_blank\" rel=\"noopener\">HTTP状态码</a></li>\n<li><a href=\"http://tool.oschina.net/commons\" target=\"_blank\" rel=\"noopener\">HTTP Content-type</a></li>\n<li><a href=\"http://tool.oschina.net/commons?type=7\" target=\"_blank\" rel=\"noopener\">TCP/UDP常见端口参考</a></li>\n<li><a href=\"http://tool.oschina.net/commons?type=2\" target=\"_blank\" rel=\"noopener\">HTML转义字符</a></li>\n<li><a href=\"http://tool.oschina.net/commons?type=3\" target=\"_blank\" rel=\"noopener\">RGB颜色参考</a></li>\n<li><a href=\"http://tool.oschina.net/commons?type=8\" target=\"_blank\" rel=\"noopener\">网页字体参考</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 01 2017 21:33:14 GMT+0800 (CST)","title":"日常开发工具集（1）","path":"2017/03/01/DevTools/developing-tools/","eyeCatchImage":null,"excerpt":"<p>&emsp;&emsp;日常工作中只要时方便开发的部分工具的用途及资源会在此文介绍，欢迎广大技术蜀黍添加。</p>\n<h4 id=\"Java源代码搜索\"><a href=\"#Java源代码搜索\" class=\"headerlink\" title=\"Java源代码搜索\"></a>Java源代码搜索</h4><p>&emsp;&emsp;Grepcode(<a href=\"http://grepcode.com/\" target=\"_blank\" rel=\"noopener\">资源地址</a>)是面向Java开发人员的网站，这里可通过Java的<font color=\"#FF8C69\">project</font> 、<font color=\"#FF8C69\">classes</font>等关键字在线查看它对应的源码，知道对应的<font color=\"#FF8C69\">project</font>、<font color=\"#FF8C69\">classes</font>等信息。更方便的是，能提供不同版本的源代码在线查看：<strong>jar包</strong> 、<strong>源码jar包</strong>、<strong>doc下载</strong>。同样，也可以使用xxx-1.1.1.jar类似这样的名字直接找到对应的jar包，从而下载。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/Grepcode.jpg\" alt=\"Grepcode\"></p>","date":"2017-03-01T12:20:25.000Z","pv":0,"totalPV":0,"categories":"开发工具集","tags":["tools"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java面试题目集锦 (1)","date":"2016-06-01T12:21:37.000Z","copyright":true,"_content":"","source":"_posts/InterviewCase/Java面试题目集锦.md","raw":"---\ntitle: Java面试题目集锦 (1)\ndate: 2016-06-01 20:21:37\ncategories: Java面试题目汇总\ntags: [Java, 面试题]\ncopyright: true\n---\n","slug":"InterviewCase/Java面试题目集锦","published":1,"updated":"2018-03-14T02:35:47.142Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbm6000g9l8iythg81gu","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 14 2018 10:35:47 GMT+0800 (CST)","title":"Java面试题目集锦 (1)","path":"2016/06/01/InterviewCase/Java面试题目集锦/","eyeCatchImage":null,"excerpt":null,"date":"2016-06-01T12:21:37.000Z","pv":0,"totalPV":0,"categories":"Java面试题目汇总","tags":["Java","面试题"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JDK source code read","copyright":true,"date":"2018-04-18T09:13:46.000Z","updated":"2018-04-18T09:13:46.227Z","_content":"\n\n","source":"_posts/JDKSourceCodeRead/JDK-source-code-read.md","raw":"---\ntitle: JDK source code read\ntags: []\ncopyright: true\ndate: 2018-04-18 17:13:46\ncategories:\nupdated:\n---\n\n\n","slug":"JDKSourceCodeRead/JDK-source-code-read","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbm8000h9l8i5jju9luq","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Apr 18 2018 17:13:46 GMT+0800 (CST)","title":"JDK source code read","path":"2018/04/18/JDKSourceCodeRead/JDK-source-code-read/","eyeCatchImage":null,"excerpt":null,"date":"2018-04-18T09:13:46.000Z","pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JVM内存结构(3)","copyright":true,"date":"2016-04-26T10:00:00.000Z","updated":"2016-04-27T04:29:00.000Z","_content":"\n#### JVM具体参数和内存区域映射图例\n &emsp;&emsp;此文主要用图例方式描绘了JVM的结构，介绍了JVM内存结构对应的参数名。\n* 在具体实现上，JVM将需要进行垃圾回收的区域分为3类：新生代（Young Generation）、老年代(Old Generation)、永久代(Permanent Generation)。其中新生代又分为eden和survival（S0、S1），具体结构如下图所示：\n* ![图示1.0](http://p5vswdxl9.bkt.clouddn.com/jvm_and_params_map.png)\n<!-- more -->\n* 简单讲，新生代的eden、新生代的survival、老生代里的对象存活时间依次变长。\n\n| **参数名称** | **含义**|\n| :--------|---------|\n| -Xmx| 初始堆大小 |\n| -Xms| 最大堆大小 |\n| -Xss| 每个线程的堆栈大小 |\n| -XX:NewSize | 设置年轻代大小(for 1.3/1.4) |\n| -XX:MaxNewSize| 年轻代最大值(for 1.3/1.4) |\n| -XX:PermSize | 设置持久代(perm gen)初始值 |\n| -XX:MaxPermSize | 设置持久代最大值 |\n| -XX:NewRatio |  年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代) |\n| -XX:SurvivorRatio| Eden区与Survivor区的大小比值 |\n\n\n--------------\n\n####  JVM内存结构图例\n![](http://p5vswdxl9.bkt.clouddn.com/JVM_Flow.jpg)\n   &emsp;&emsp;方法区和堆是所有**线程共享的内存区域**；而java栈、本地方法栈和程序计数器是运行是**线程私有的内存区域**。\n\n* Java堆（Heap）,是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。\n\n* 方法区（Method Area）,方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n\n* 程序计数器（Program Counter Register）,程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。\n\n* JVM栈（JVM Stacks）,与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n\n* 本地方法栈（Native Method Stacks）,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。\n\n* ClassLoader是负责加载class文件，class文件在文件开头有特定的文件标示，并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。\n\n* Native Interface是负责调用本地接口的。他的作用是调用不同语言的接口给JAVA用，他会在Native Method Stack中记录对应的本地方法，然后调用该方法时就通过Execution Engine加载对应的本地lib。原本多于用一些专业领域，如JAVA驱动，地图制作引擎等，现在关于这种本地方法接口的调用已经被类似于Socket通信，WebService等方式取代。\n\n* Execution Engine是执行引擎，也叫Interpreter。Class文件被加载后，会把指令和数据信息放入内存中，Execution Engine则负责把这些命令解释给操作系统。\n\n* Runtime Data Area则是存放数据的，分为五部分：Stack，Heap，Method Area，PC Register，Native Method Stack。几乎所有的关于java内存方面的问题，都是集中在这块。下图是javapapers.com上关于Run-time Data Areas的描述：![](http://p5vswdxl9.bkt.clouddn.com/JVM_2.jpg)\n\n--------------\n\n#### 相关技术参考\n1. [JVM原理分析](https://www.jianshu.com/p/be6f529160b6)\n2. [JVM知识点总览](https://mp.weixin.qq.com/s/ebg0bT_xBahGV7OAKorBAw)\n3. [JVM系列之GC](https://juejin.im/post/5a1cc3596fb9a04506715aad)\n4. [重读 JVM](https://juejin.im/post/59ad4cd56fb9a02477075780#heading-5)\n5. [JVM 的内存模型](https://mijack.github.io/2018/03/18/Garbage-Collection/)\n\n\n\n\n","source":"_posts/JVM/JVM3.md","raw":"---\ntitle: JVM内存结构(3)\ntags: [JVM]\ncategories: JVM\ncopyright: true\ndate:  2016-04-26 18:00:00\nupdated: 2016-04-27 12:29:00\n---\n\n#### JVM具体参数和内存区域映射图例\n &emsp;&emsp;此文主要用图例方式描绘了JVM的结构，介绍了JVM内存结构对应的参数名。\n* 在具体实现上，JVM将需要进行垃圾回收的区域分为3类：新生代（Young Generation）、老年代(Old Generation)、永久代(Permanent Generation)。其中新生代又分为eden和survival（S0、S1），具体结构如下图所示：\n* ![图示1.0](http://p5vswdxl9.bkt.clouddn.com/jvm_and_params_map.png)\n<!-- more -->\n* 简单讲，新生代的eden、新生代的survival、老生代里的对象存活时间依次变长。\n\n| **参数名称** | **含义**|\n| :--------|---------|\n| -Xmx| 初始堆大小 |\n| -Xms| 最大堆大小 |\n| -Xss| 每个线程的堆栈大小 |\n| -XX:NewSize | 设置年轻代大小(for 1.3/1.4) |\n| -XX:MaxNewSize| 年轻代最大值(for 1.3/1.4) |\n| -XX:PermSize | 设置持久代(perm gen)初始值 |\n| -XX:MaxPermSize | 设置持久代最大值 |\n| -XX:NewRatio |  年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代) |\n| -XX:SurvivorRatio| Eden区与Survivor区的大小比值 |\n\n\n--------------\n\n####  JVM内存结构图例\n![](http://p5vswdxl9.bkt.clouddn.com/JVM_Flow.jpg)\n   &emsp;&emsp;方法区和堆是所有**线程共享的内存区域**；而java栈、本地方法栈和程序计数器是运行是**线程私有的内存区域**。\n\n* Java堆（Heap）,是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。\n\n* 方法区（Method Area）,方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n\n* 程序计数器（Program Counter Register）,程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。\n\n* JVM栈（JVM Stacks）,与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n\n* 本地方法栈（Native Method Stacks）,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。\n\n* ClassLoader是负责加载class文件，class文件在文件开头有特定的文件标示，并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。\n\n* Native Interface是负责调用本地接口的。他的作用是调用不同语言的接口给JAVA用，他会在Native Method Stack中记录对应的本地方法，然后调用该方法时就通过Execution Engine加载对应的本地lib。原本多于用一些专业领域，如JAVA驱动，地图制作引擎等，现在关于这种本地方法接口的调用已经被类似于Socket通信，WebService等方式取代。\n\n* Execution Engine是执行引擎，也叫Interpreter。Class文件被加载后，会把指令和数据信息放入内存中，Execution Engine则负责把这些命令解释给操作系统。\n\n* Runtime Data Area则是存放数据的，分为五部分：Stack，Heap，Method Area，PC Register，Native Method Stack。几乎所有的关于java内存方面的问题，都是集中在这块。下图是javapapers.com上关于Run-time Data Areas的描述：![](http://p5vswdxl9.bkt.clouddn.com/JVM_2.jpg)\n\n--------------\n\n#### 相关技术参考\n1. [JVM原理分析](https://www.jianshu.com/p/be6f529160b6)\n2. [JVM知识点总览](https://mp.weixin.qq.com/s/ebg0bT_xBahGV7OAKorBAw)\n3. [JVM系列之GC](https://juejin.im/post/5a1cc3596fb9a04506715aad)\n4. [重读 JVM](https://juejin.im/post/59ad4cd56fb9a02477075780#heading-5)\n5. [JVM 的内存模型](https://mijack.github.io/2018/03/18/Garbage-Collection/)\n\n\n\n\n","slug":"JVM/JVM3","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbm9000i9l8i8ecqrdk1","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h4 id=\"JVM具体参数和内存区域映射图例\"><a href=\"#JVM具体参数和内存区域映射图例\" class=\"headerlink\" title=\"JVM具体参数和内存区域映射图例\"></a>JVM具体参数和内存区域映射图例</h4><p> &emsp;&emsp;此文主要用图例方式描绘了JVM的结构，介绍了JVM内存结构对应的参数名。</p>\n<ul>\n<li>在具体实现上，JVM将需要进行垃圾回收的区域分为3类：新生代（Young Generation）、老年代(Old Generation)、永久代(Permanent Generation)。其中新生代又分为eden和survival（S0、S1），具体结构如下图所示：</li>\n<li><img src=\"http://p5vswdxl9.bkt.clouddn.com/jvm_and_params_map.png\" alt=\"图示1.0\"><a id=\"more\"></a></li>\n<li>简单讲，新生代的eden、新生代的survival、老生代里的对象存活时间依次变长。</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>参数名称</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-Xmx</td>\n<td>初始堆大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xms</td>\n<td>最大堆大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xss</td>\n<td>每个线程的堆栈大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:NewSize</td>\n<td>设置年轻代大小(for 1.3/1.4)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:MaxNewSize</td>\n<td>年轻代最大值(for 1.3/1.4)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:PermSize</td>\n<td>设置持久代(perm gen)初始值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:MaxPermSize</td>\n<td>设置持久代最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:NewRatio</td>\n<td>年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:SurvivorRatio</td>\n<td>Eden区与Survivor区的大小比值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h4 id=\"JVM内存结构图例\"><a href=\"#JVM内存结构图例\" class=\"headerlink\" title=\"JVM内存结构图例\"></a>JVM内存结构图例</h4><p><img src=\"http://p5vswdxl9.bkt.clouddn.com/JVM_Flow.jpg\" alt=\"\"><br>   &emsp;&emsp;方法区和堆是所有<strong>线程共享的内存区域</strong>；而java栈、本地方法栈和程序计数器是运行是<strong>线程私有的内存区域</strong>。</p>\n<ul>\n<li><p>Java堆（Heap）,是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p>\n</li>\n<li><p>方法区（Method Area）,方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>\n</li>\n<li><p>程序计数器（Program Counter Register）,程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。</p>\n</li>\n<li><p>JVM栈（JVM Stacks）,与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>\n</li>\n<li><p>本地方法栈（Native Method Stacks）,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。</p>\n</li>\n<li><p>ClassLoader是负责加载class文件，class文件在文件开头有特定的文件标示，并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p>\n</li>\n<li><p>Native Interface是负责调用本地接口的。他的作用是调用不同语言的接口给JAVA用，他会在Native Method Stack中记录对应的本地方法，然后调用该方法时就通过Execution Engine加载对应的本地lib。原本多于用一些专业领域，如JAVA驱动，地图制作引擎等，现在关于这种本地方法接口的调用已经被类似于Socket通信，WebService等方式取代。</p>\n</li>\n<li><p>Execution Engine是执行引擎，也叫Interpreter。Class文件被加载后，会把指令和数据信息放入内存中，Execution Engine则负责把这些命令解释给操作系统。</p>\n</li>\n<li><p>Runtime Data Area则是存放数据的，分为五部分：Stack，Heap，Method Area，PC Register，Native Method Stack。几乎所有的关于java内存方面的问题，都是集中在这块。下图是javapapers.com上关于Run-time Data Areas的描述：<img src=\"http://p5vswdxl9.bkt.clouddn.com/JVM_2.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<hr>\n<h4 id=\"相关技术参考\"><a href=\"#相关技术参考\" class=\"headerlink\" title=\"相关技术参考\"></a>相关技术参考</h4><ol>\n<li><a href=\"https://www.jianshu.com/p/be6f529160b6\" target=\"_blank\" rel=\"noopener\">JVM原理分析</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ebg0bT_xBahGV7OAKorBAw\" target=\"_blank\" rel=\"noopener\">JVM知识点总览</a></li>\n<li><a href=\"https://juejin.im/post/5a1cc3596fb9a04506715aad\" target=\"_blank\" rel=\"noopener\">JVM系列之GC</a></li>\n<li><a href=\"https://juejin.im/post/59ad4cd56fb9a02477075780#heading-5\" target=\"_blank\" rel=\"noopener\">重读 JVM</a></li>\n<li><a href=\"https://mijack.github.io/2018/03/18/Garbage-Collection/\" target=\"_blank\" rel=\"noopener\">JVM 的内存模型</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h4 id=\"JVM具体参数和内存区域映射图例\"><a href=\"#JVM具体参数和内存区域映射图例\" class=\"headerlink\" title=\"JVM具体参数和内存区域映射图例\"></a>JVM具体参数和内存区域映射图例</h4><p> &emsp;&emsp;此文主要用图例方式描绘了JVM的结构，介绍了JVM内存结构对应的参数名。</p>\n<ul>\n<li>在具体实现上，JVM将需要进行垃圾回收的区域分为3类：新生代（Young Generation）、老年代(Old Generation)、永久代(Permanent Generation)。其中新生代又分为eden和survival（S0、S1），具体结构如下图所示：</li>\n<li><img src=\"http://p5vswdxl9.bkt.clouddn.com/jvm_and_params_map.png\" alt=\"图示1.0\"></li></ul>","more":"\n<li>简单讲，新生代的eden、新生代的survival、老生代里的对象存活时间依次变长。</li>\n\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><strong>参数名称</strong></th>\n<th><strong>含义</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">-Xmx</td>\n<td>初始堆大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xms</td>\n<td>最大堆大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-Xss</td>\n<td>每个线程的堆栈大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:NewSize</td>\n<td>设置年轻代大小(for 1.3/1.4)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:MaxNewSize</td>\n<td>年轻代最大值(for 1.3/1.4)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:PermSize</td>\n<td>设置持久代(perm gen)初始值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:MaxPermSize</td>\n<td>设置持久代最大值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:NewRatio</td>\n<td>年轻代(包括Eden和两个Survivor区)与年老代的比值(除去持久代)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">-XX:SurvivorRatio</td>\n<td>Eden区与Survivor区的大小比值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h4 id=\"JVM内存结构图例\"><a href=\"#JVM内存结构图例\" class=\"headerlink\" title=\"JVM内存结构图例\"></a>JVM内存结构图例</h4><p><img src=\"http://p5vswdxl9.bkt.clouddn.com/JVM_Flow.jpg\" alt=\"\"><br>   &emsp;&emsp;方法区和堆是所有<strong>线程共享的内存区域</strong>；而java栈、本地方法栈和程序计数器是运行是<strong>线程私有的内存区域</strong>。</p>\n<ul>\n<li><p>Java堆（Heap）,是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p>\n</li>\n<li><p>方法区（Method Area）,方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>\n</li>\n<li><p>程序计数器（Program Counter Register）,程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。</p>\n</li>\n<li><p>JVM栈（JVM Stacks）,与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p>\n</li>\n<li><p>本地方法栈（Native Method Stacks）,本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。</p>\n</li>\n<li><p>ClassLoader是负责加载class文件，class文件在文件开头有特定的文件标示，并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p>\n</li>\n<li><p>Native Interface是负责调用本地接口的。他的作用是调用不同语言的接口给JAVA用，他会在Native Method Stack中记录对应的本地方法，然后调用该方法时就通过Execution Engine加载对应的本地lib。原本多于用一些专业领域，如JAVA驱动，地图制作引擎等，现在关于这种本地方法接口的调用已经被类似于Socket通信，WebService等方式取代。</p>\n</li>\n<li><p>Execution Engine是执行引擎，也叫Interpreter。Class文件被加载后，会把指令和数据信息放入内存中，Execution Engine则负责把这些命令解释给操作系统。</p>\n</li>\n<li><p>Runtime Data Area则是存放数据的，分为五部分：Stack，Heap，Method Area，PC Register，Native Method Stack。几乎所有的关于java内存方面的问题，都是集中在这块。下图是javapapers.com上关于Run-time Data Areas的描述：<img src=\"http://p5vswdxl9.bkt.clouddn.com/JVM_2.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<hr>\n<h4 id=\"相关技术参考\"><a href=\"#相关技术参考\" class=\"headerlink\" title=\"相关技术参考\"></a>相关技术参考</h4><ol>\n<li><a href=\"https://www.jianshu.com/p/be6f529160b6\" target=\"_blank\" rel=\"noopener\">JVM原理分析</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/ebg0bT_xBahGV7OAKorBAw\" target=\"_blank\" rel=\"noopener\">JVM知识点总览</a></li>\n<li><a href=\"https://juejin.im/post/5a1cc3596fb9a04506715aad\" target=\"_blank\" rel=\"noopener\">JVM系列之GC</a></li>\n<li><a href=\"https://juejin.im/post/59ad4cd56fb9a02477075780#heading-5\" target=\"_blank\" rel=\"noopener\">重读 JVM</a></li>\n<li><a href=\"https://mijack.github.io/2018/03/18/Garbage-Collection/\" target=\"_blank\" rel=\"noopener\">JVM 的内存模型</a></li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Apr 27 2016 12:29:00 GMT+0800 (CST)","title":"JVM内存结构(3)","path":"2016/04/26/JVM/JVM3/","eyeCatchImage":null,"excerpt":"<h4 id=\"JVM具体参数和内存区域映射图例\"><a href=\"#JVM具体参数和内存区域映射图例\" class=\"headerlink\" title=\"JVM具体参数和内存区域映射图例\"></a>JVM具体参数和内存区域映射图例</h4><p> &emsp;&emsp;此文主要用图例方式描绘了JVM的结构，介绍了JVM内存结构对应的参数名。</p>\n<ul>\n<li>在具体实现上，JVM将需要进行垃圾回收的区域分为3类：新生代（Young Generation）、老年代(Old Generation)、永久代(Permanent Generation)。其中新生代又分为eden和survival（S0、S1），具体结构如下图所示：</li>\n<li><img src=\"http://p5vswdxl9.bkt.clouddn.com/jvm_and_params_map.png\" alt=\"图示1.0\"></li></ul>","date":"2016-04-26T10:00:00.000Z","pv":0,"totalPV":0,"categories":"JVM","tags":["JVM"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JVM内存结构(4)","copyright":true,"date":"2016-04-27T09:00:00.000Z","updated":"2016-04-27T11:29:00.000Z","mathjax":true,"_content":"\n### JVM内存结构\n&emsp;&emsp;JVM内存结构主要有三大块：***堆内存*** 、***方法法区*** 和 ***栈***。\n&emsp;&emsp;***堆内存*** 是JVM中最大的一块由 **年轻代**和 **老年代** 组成，而年轻代内存又被分为三部分， **Eden空间** 、**From Survivo空间** 、**To Survivor空间** ，默认情况下年轻代按照$8:1:1$的比例来分配；<font color=#FF3030>方法区存储类信息、常量、静态变量等数据，是线程共享的区域</font> ，为与**Java堆**区分，方法区还有一个别名NonHeap(非堆)；栈又分为 **Java虚拟机栈** 和 **本地方法栈** 主要用于方法的执行。     \n&emsp;&emsp;<font color=#FF0000>JAVA的JVM的内存可分为3个区</font>： **堆(Heap)**、 **栈(Stack)**  、 **方法区(Method Area)** 。实际IDEA开发Tomcat启动项配置示例：  \n> <font face=\"微软雅黑\" color=#9900ff size=2>-Xms1024m -Xmx1024m  -XX:PermSize=512M -XX:MaxPermSize=1024m  -Dfile.encoding=utf-8 </font>   \n\n\n\n<!--more-->\n\n-------\n\n### Java堆(Java Heap)\n#### 参数设置\nJava堆可通过参数 <font color=#EE7942>-Xms</font> 和  <font color=#EE7942>-Xmx</font>设置；\n\n#### 存储内容\nJava堆是存放对象的实例，几乎所有的<font color=#EE6A50>对象实例</font>和<font color=#EE6A50>数组</font>都存储于此区域，是被所有线程共享，是JVM虚拟机管理的内存中最大的一块，在虚拟机启动时创建；\n\n#### 内存分配\n为了便于更好的回收和分配内存，堆可细分为：**新生代**和**老年代**，**新生代** 在细致一些就是<font color=#EE3B3B>Eden空间、From Survivor空间、To Survivor区</font>。\n\n 1. 新生代：包括Eden区、From Survivor区、To Survivor区，系统默认大小 $Eden:Survivor= 8:1$\n 2. 老年代：在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到老年代中。因此可认为老年代中存放的都是一些生命周期较长的对象\n\nSurvivor空间等Java堆可以处理在物理内存不连续的空间，只要逻辑上是连续即可。\n\n-------\n\n### Java虚拟机栈(Stack)\n#### 参数设置\n可通过参数 栈帧是方法运行期的基础数据结构栈容量可由-Xss设置；\n#### 存储内容\nJava虚拟机栈是线程私有的，它的生命周期与线程相同\n\n1. 每个方法被调用直至执行完成的过程，就对应一个栈帧在虚拟机栈中从入栈到出栈的过程\n2. 虚拟机栈是执行Java方法的内存模型(也就是字节码)服务：**每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。\n    1. <font color=#FF0000>局部变量表</font>：32位变量槽，存放了编译期可知的 **各种基本数据类型**、**对象引用**、**returnAddress类型**\n    2. <font color=#FF0000>操作数栈</font>：基于栈的执行引擎，虚拟机把操作数栈作为它的工作区，大多数指令都要从这里弹出数据、执行运算，然后把结果压回操作数栈。\n    3. <font color=#FF0000>动态链接</font>：**每个栈帧都包含一个指向运行时常量池(方法区的一部分)中该栈帧所属方法的引用**。持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用一部分会在类加载阶段或第一次使用的时候转化为直接引用，这种转化称为**静态解析**。另一部分将在每次的运行期间转化为直接应用，这部分称为**动态链接**\n    4. <font color=#FF0000>方法出口</font>：返回方法被调用的位置，恢复上层方法的局部变量和操作数栈，如果无返回值，则把它压入调用者的操作数栈。\n    \n3. **局部变量表所需的内存空间在编译期间完成分配**，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的。\n4. **在方法运行期间不会改变局部变量表的大小。主要存放了编译之后可知的各种基本数据类型、对象引用。**<font color=#33ccff>（[reference类型、returnAddress类型](http://www.runoob.com/java/java-basic-datatypes.html)）</font>\n\n-------\n\n###  本地方法栈(Local Method Stack)\n#### 参数设置\n可通过参数 栈容量可由-Xss设置。\n#### 存储内容\n1. 虚拟机栈为虚拟机执行Java方法（也就是字节码）服务。\n2. 本地方法栈则是为虚拟机使用到的Native方法服务。有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。\n\n-------\n\n### 方法区(Method Area)\n#### 参数设置\n可通过参数-XX:MaxPermSize设置\n#### 存储内容\n1. **线程共享内存区域，用于储存已被虚拟机加载的类信息、常量、静态变量，即编译器编译后的代码，方法区也称持久代（Permanent Generation）**。\n2. 虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做<font color=#DC143C>Non-Heap（非堆）</font>，目的应该是与Java堆区分开来。\n3. 如何实现方法区，属于虚拟机的实现细节，不受虚拟机规范的约束。\n4. 方法区主要存放java类定义信息，与垃圾回收关系不大，方法区可以选择不实现垃圾回收，<font color=#EE2C2C\t>但不是没有垃圾回收</font>。\n5. **方法区域的内存回收目标主要针对常量池的回收和对类型的卸载。**\n6. **<font color=#EE2C2C>运行时常量池</font>，也是方法区的一部分，虚拟机加载Class后把常量池中的数据放入运行时常量池**。\n\n-------\n\n### 运行时常量池(Runtime Constant Pool)\n#### 参数设置\n可通过参数-XX:PermSize和-XX:MaxPermSize设置\n#### 存储内容\n1. <font color=#EE4000>常量池(Constant Pool)</font>：**常量池数据编辑之后被确定，是Class文件中的一部分。存储了类、方法、接口等中的常量，也包括字符串常量。**\n2. <font color=#EE4000>字符串池/字符串常量池(String  Pool/ String Constant Pool)</font>：是常量池中的一部分，存储编译期类中产生的<font color=#EE0000>字符串类型数据。</font>\n3. <font color=#EE4000>运行时常量池(Runtime Constant Pool)</font>：**方法区的一部分，所有线程共享。虚拟机加载Class后把常量池中的数据放入到运行时常量池**。<font color=#EE3B3B>常量池</font>：可以理解为Class文件中的资源仓库，它是Class文件结构中与其他项目资源关联最多的数据类型。\n    1. 常量池中主要存放两大类常量：<font color=#EE4000>字面量</font>(Literal)和<font color=#EE4000>符号引用</font>(Symbolic Reference)。\n    2. **字面量**：文本字符串、声明为final的常量值等。\n    3. **符号引用**：<font color=#EE4000>类和接口的完全限定名</font>(Fully Qualified Name)、<font color=#EE4000>字段的名称</font>和<font color=#EE4000>描述符</font>(Descriptor)、<font color=#EE4000>方法的名称</font>和<font color=#EE4000>描述符号</font>\n    \n    \n-------\n\n### 直接内存(Direct Memory)\n#### 参数设置\n可通过-XX:MaxDirectMemorySize指定，如果不指定，则默认与Java堆的最大值（-Xmx指定）一样。\n#### 存储内容\n**直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。**\n\n\n### 参考资料\n* [50个多线程面试题](https://juejin.im/post/5aae4e8f6fb9a028e52d9e8c)\n\n\n","source":"_posts/JVM/jvm-introduce.md","raw":"---\ntitle: JVM内存结构(4)\ntags: [JVM]\ncopyright: true\ndate: 2016-04-27 17:00:00\nupdated: 2016-04-27 19:29:00\ncategories: JVM\nmathjax: true \n---\n\n### JVM内存结构\n&emsp;&emsp;JVM内存结构主要有三大块：***堆内存*** 、***方法法区*** 和 ***栈***。\n&emsp;&emsp;***堆内存*** 是JVM中最大的一块由 **年轻代**和 **老年代** 组成，而年轻代内存又被分为三部分， **Eden空间** 、**From Survivo空间** 、**To Survivor空间** ，默认情况下年轻代按照$8:1:1$的比例来分配；<font color=#FF3030>方法区存储类信息、常量、静态变量等数据，是线程共享的区域</font> ，为与**Java堆**区分，方法区还有一个别名NonHeap(非堆)；栈又分为 **Java虚拟机栈** 和 **本地方法栈** 主要用于方法的执行。     \n&emsp;&emsp;<font color=#FF0000>JAVA的JVM的内存可分为3个区</font>： **堆(Heap)**、 **栈(Stack)**  、 **方法区(Method Area)** 。实际IDEA开发Tomcat启动项配置示例：  \n> <font face=\"微软雅黑\" color=#9900ff size=2>-Xms1024m -Xmx1024m  -XX:PermSize=512M -XX:MaxPermSize=1024m  -Dfile.encoding=utf-8 </font>   \n\n\n\n<!--more-->\n\n-------\n\n### Java堆(Java Heap)\n#### 参数设置\nJava堆可通过参数 <font color=#EE7942>-Xms</font> 和  <font color=#EE7942>-Xmx</font>设置；\n\n#### 存储内容\nJava堆是存放对象的实例，几乎所有的<font color=#EE6A50>对象实例</font>和<font color=#EE6A50>数组</font>都存储于此区域，是被所有线程共享，是JVM虚拟机管理的内存中最大的一块，在虚拟机启动时创建；\n\n#### 内存分配\n为了便于更好的回收和分配内存，堆可细分为：**新生代**和**老年代**，**新生代** 在细致一些就是<font color=#EE3B3B>Eden空间、From Survivor空间、To Survivor区</font>。\n\n 1. 新生代：包括Eden区、From Survivor区、To Survivor区，系统默认大小 $Eden:Survivor= 8:1$\n 2. 老年代：在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到老年代中。因此可认为老年代中存放的都是一些生命周期较长的对象\n\nSurvivor空间等Java堆可以处理在物理内存不连续的空间，只要逻辑上是连续即可。\n\n-------\n\n### Java虚拟机栈(Stack)\n#### 参数设置\n可通过参数 栈帧是方法运行期的基础数据结构栈容量可由-Xss设置；\n#### 存储内容\nJava虚拟机栈是线程私有的，它的生命周期与线程相同\n\n1. 每个方法被调用直至执行完成的过程，就对应一个栈帧在虚拟机栈中从入栈到出栈的过程\n2. 虚拟机栈是执行Java方法的内存模型(也就是字节码)服务：**每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。\n    1. <font color=#FF0000>局部变量表</font>：32位变量槽，存放了编译期可知的 **各种基本数据类型**、**对象引用**、**returnAddress类型**\n    2. <font color=#FF0000>操作数栈</font>：基于栈的执行引擎，虚拟机把操作数栈作为它的工作区，大多数指令都要从这里弹出数据、执行运算，然后把结果压回操作数栈。\n    3. <font color=#FF0000>动态链接</font>：**每个栈帧都包含一个指向运行时常量池(方法区的一部分)中该栈帧所属方法的引用**。持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用一部分会在类加载阶段或第一次使用的时候转化为直接引用，这种转化称为**静态解析**。另一部分将在每次的运行期间转化为直接应用，这部分称为**动态链接**\n    4. <font color=#FF0000>方法出口</font>：返回方法被调用的位置，恢复上层方法的局部变量和操作数栈，如果无返回值，则把它压入调用者的操作数栈。\n    \n3. **局部变量表所需的内存空间在编译期间完成分配**，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的。\n4. **在方法运行期间不会改变局部变量表的大小。主要存放了编译之后可知的各种基本数据类型、对象引用。**<font color=#33ccff>（[reference类型、returnAddress类型](http://www.runoob.com/java/java-basic-datatypes.html)）</font>\n\n-------\n\n###  本地方法栈(Local Method Stack)\n#### 参数设置\n可通过参数 栈容量可由-Xss设置。\n#### 存储内容\n1. 虚拟机栈为虚拟机执行Java方法（也就是字节码）服务。\n2. 本地方法栈则是为虚拟机使用到的Native方法服务。有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。\n\n-------\n\n### 方法区(Method Area)\n#### 参数设置\n可通过参数-XX:MaxPermSize设置\n#### 存储内容\n1. **线程共享内存区域，用于储存已被虚拟机加载的类信息、常量、静态变量，即编译器编译后的代码，方法区也称持久代（Permanent Generation）**。\n2. 虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做<font color=#DC143C>Non-Heap（非堆）</font>，目的应该是与Java堆区分开来。\n3. 如何实现方法区，属于虚拟机的实现细节，不受虚拟机规范的约束。\n4. 方法区主要存放java类定义信息，与垃圾回收关系不大，方法区可以选择不实现垃圾回收，<font color=#EE2C2C\t>但不是没有垃圾回收</font>。\n5. **方法区域的内存回收目标主要针对常量池的回收和对类型的卸载。**\n6. **<font color=#EE2C2C>运行时常量池</font>，也是方法区的一部分，虚拟机加载Class后把常量池中的数据放入运行时常量池**。\n\n-------\n\n### 运行时常量池(Runtime Constant Pool)\n#### 参数设置\n可通过参数-XX:PermSize和-XX:MaxPermSize设置\n#### 存储内容\n1. <font color=#EE4000>常量池(Constant Pool)</font>：**常量池数据编辑之后被确定，是Class文件中的一部分。存储了类、方法、接口等中的常量，也包括字符串常量。**\n2. <font color=#EE4000>字符串池/字符串常量池(String  Pool/ String Constant Pool)</font>：是常量池中的一部分，存储编译期类中产生的<font color=#EE0000>字符串类型数据。</font>\n3. <font color=#EE4000>运行时常量池(Runtime Constant Pool)</font>：**方法区的一部分，所有线程共享。虚拟机加载Class后把常量池中的数据放入到运行时常量池**。<font color=#EE3B3B>常量池</font>：可以理解为Class文件中的资源仓库，它是Class文件结构中与其他项目资源关联最多的数据类型。\n    1. 常量池中主要存放两大类常量：<font color=#EE4000>字面量</font>(Literal)和<font color=#EE4000>符号引用</font>(Symbolic Reference)。\n    2. **字面量**：文本字符串、声明为final的常量值等。\n    3. **符号引用**：<font color=#EE4000>类和接口的完全限定名</font>(Fully Qualified Name)、<font color=#EE4000>字段的名称</font>和<font color=#EE4000>描述符</font>(Descriptor)、<font color=#EE4000>方法的名称</font>和<font color=#EE4000>描述符号</font>\n    \n    \n-------\n\n### 直接内存(Direct Memory)\n#### 参数设置\n可通过-XX:MaxDirectMemorySize指定，如果不指定，则默认与Java堆的最大值（-Xmx指定）一样。\n#### 存储内容\n**直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。**\n\n\n### 参考资料\n* [50个多线程面试题](https://juejin.im/post/5aae4e8f6fb9a028e52d9e8c)\n\n\n","slug":"JVM/jvm-introduce","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmb000m9l8icui1juvj","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"JVM内存结构\"><a href=\"#JVM内存结构\" class=\"headerlink\" title=\"JVM内存结构\"></a>JVM内存结构</h3><p>&emsp;&emsp;JVM内存结构主要有三大块：<strong><em>堆内存</em></strong> 、<strong><em>方法法区</em></strong> 和 <strong><em>栈</em></strong>。<br>&emsp;&emsp;<strong><em>堆内存</em></strong> 是JVM中最大的一块由 <strong>年轻代</strong>和 <strong>老年代</strong> 组成，而年轻代内存又被分为三部分， <strong>Eden空间</strong> 、<strong>From Survivo空间</strong> 、<strong>To Survivor空间</strong> ，默认情况下年轻代按照$8:1:1$的比例来分配；<font color=\"#FF3030\">方法区存储类信息、常量、静态变量等数据，是线程共享的区域</font> ，为与<strong>Java堆</strong>区分，方法区还有一个别名NonHeap(非堆)；栈又分为 <strong>Java虚拟机栈</strong> 和 <strong>本地方法栈</strong> 主要用于方法的执行。<br>&emsp;&emsp;<font color=\"#FF0000\">JAVA的JVM的内存可分为3个区</font>： <strong>堆(Heap)</strong>、 <strong>栈(Stack)</strong>  、 <strong>方法区(Method Area)</strong> 。实际IDEA开发Tomcat启动项配置示例：  </p>\n<blockquote>\n<font face=\"微软雅黑\" color=\"#9900ff\" size=\"2\">-Xms1024m -Xmx1024m  -XX:PermSize=512M -XX:MaxPermSize=1024m  -Dfile.encoding=utf-8 </font>   \n\n\n\n</blockquote>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"Java堆-Java-Heap\"><a href=\"#Java堆-Java-Heap\" class=\"headerlink\" title=\"Java堆(Java Heap)\"></a>Java堆(Java Heap)</h3><h4 id=\"参数设置\"><a href=\"#参数设置\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>Java堆可通过参数 <font color=\"#EE7942\">-Xms</font> 和  <font color=\"#EE7942\">-Xmx</font>设置；</p>\n<h4 id=\"存储内容\"><a href=\"#存储内容\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><p>Java堆是存放对象的实例，几乎所有的<font color=\"#EE6A50\">对象实例</font>和<font color=\"#EE6A50\">数组</font>都存储于此区域，是被所有线程共享，是JVM虚拟机管理的内存中最大的一块，在虚拟机启动时创建；</p>\n<h4 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h4><p>为了便于更好的回收和分配内存，堆可细分为：<strong>新生代</strong>和<strong>老年代</strong>，<strong>新生代</strong> 在细致一些就是<font color=\"#EE3B3B\">Eden空间、From Survivor空间、To Survivor区</font>。</p>\n<ol>\n<li>新生代：包括Eden区、From Survivor区、To Survivor区，系统默认大小 $Eden:Survivor= 8:1$</li>\n<li>老年代：在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到老年代中。因此可认为老年代中存放的都是一些生命周期较长的对象</li>\n</ol>\n<p>Survivor空间等Java堆可以处理在物理内存不连续的空间，只要逻辑上是连续即可。</p>\n<hr>\n<h3 id=\"Java虚拟机栈-Stack\"><a href=\"#Java虚拟机栈-Stack\" class=\"headerlink\" title=\"Java虚拟机栈(Stack)\"></a>Java虚拟机栈(Stack)</h3><h4 id=\"参数设置-1\"><a href=\"#参数设置-1\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>可通过参数 栈帧是方法运行期的基础数据结构栈容量可由-Xss设置；</p>\n<h4 id=\"存储内容-1\"><a href=\"#存储内容-1\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><p>Java虚拟机栈是线程私有的，它的生命周期与线程相同</p>\n<ol>\n<li>每个方法被调用直至执行完成的过程，就对应一个栈帧在虚拟机栈中从入栈到出栈的过程</li>\n<li><p>虚拟机栈是执行Java方法的内存模型(也就是字节码)服务：**每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p>\n<ol>\n<li><font color=\"#FF0000\">局部变量表</font>：32位变量槽，存放了编译期可知的 <strong>各种基本数据类型</strong>、<strong>对象引用</strong>、<strong>returnAddress类型</strong></li>\n<li><font color=\"#FF0000\">操作数栈</font>：基于栈的执行引擎，虚拟机把操作数栈作为它的工作区，大多数指令都要从这里弹出数据、执行运算，然后把结果压回操作数栈。</li>\n<li><font color=\"#FF0000\">动态链接</font>：<strong>每个栈帧都包含一个指向运行时常量池(方法区的一部分)中该栈帧所属方法的引用</strong>。持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用一部分会在类加载阶段或第一次使用的时候转化为直接引用，这种转化称为<strong>静态解析</strong>。另一部分将在每次的运行期间转化为直接应用，这部分称为<strong>动态链接</strong></li>\n<li><font color=\"#FF0000\">方法出口</font>：返回方法被调用的位置，恢复上层方法的局部变量和操作数栈，如果无返回值，则把它压入调用者的操作数栈。</li>\n</ol>\n</li>\n<li><p><strong>局部变量表所需的内存空间在编译期间完成分配</strong>，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的。</p>\n</li>\n<li><strong>在方法运行期间不会改变局部变量表的大小。主要存放了编译之后可知的各种基本数据类型、对象引用。</strong><font color=\"#33ccff\">（<a href=\"http://www.runoob.com/java/java-basic-datatypes.html\" target=\"_blank\" rel=\"noopener\">reference类型、returnAddress类型</a>）</font></li>\n</ol>\n<hr>\n<h3 id=\"本地方法栈-Local-Method-Stack\"><a href=\"#本地方法栈-Local-Method-Stack\" class=\"headerlink\" title=\"本地方法栈(Local Method Stack)\"></a>本地方法栈(Local Method Stack)</h3><h4 id=\"参数设置-2\"><a href=\"#参数设置-2\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>可通过参数 栈容量可由-Xss设置。</p>\n<h4 id=\"存储内容-2\"><a href=\"#存储内容-2\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><ol>\n<li>虚拟机栈为虚拟机执行Java方法（也就是字节码）服务。</li>\n<li>本地方法栈则是为虚拟机使用到的Native方法服务。有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。</li>\n</ol>\n<hr>\n<h3 id=\"方法区-Method-Area\"><a href=\"#方法区-Method-Area\" class=\"headerlink\" title=\"方法区(Method Area)\"></a>方法区(Method Area)</h3><h4 id=\"参数设置-3\"><a href=\"#参数设置-3\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>可通过参数-XX:MaxPermSize设置</p>\n<h4 id=\"存储内容-3\"><a href=\"#存储内容-3\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><ol>\n<li><strong>线程共享内存区域，用于储存已被虚拟机加载的类信息、常量、静态变量，即编译器编译后的代码，方法区也称持久代（Permanent Generation）</strong>。</li>\n<li>虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做<font color=\"#DC143C\">Non-Heap（非堆）</font>，目的应该是与Java堆区分开来。</li>\n<li>如何实现方法区，属于虚拟机的实现细节，不受虚拟机规范的约束。</li>\n<li>方法区主要存放java类定义信息，与垃圾回收关系不大，方法区可以选择不实现垃圾回收，<font color=\"#EE2C2C\">但不是没有垃圾回收</font>。</li>\n<li><strong>方法区域的内存回收目标主要针对常量池的回收和对类型的卸载。</strong></li>\n<li><strong><font color=\"#EE2C2C\">运行时常量池</font>，也是方法区的一部分，虚拟机加载Class后把常量池中的数据放入运行时常量池</strong>。</li>\n</ol>\n<hr>\n<h3 id=\"运行时常量池-Runtime-Constant-Pool\"><a href=\"#运行时常量池-Runtime-Constant-Pool\" class=\"headerlink\" title=\"运行时常量池(Runtime Constant Pool)\"></a>运行时常量池(Runtime Constant Pool)</h3><h4 id=\"参数设置-4\"><a href=\"#参数设置-4\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>可通过参数-XX:PermSize和-XX:MaxPermSize设置</p>\n<h4 id=\"存储内容-4\"><a href=\"#存储内容-4\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><ol>\n<li><font color=\"#EE4000\">常量池(Constant Pool)</font>：<strong>常量池数据编辑之后被确定，是Class文件中的一部分。存储了类、方法、接口等中的常量，也包括字符串常量。</strong></li>\n<li><font color=\"#EE4000\">字符串池/字符串常量池(String  Pool/ String Constant Pool)</font>：是常量池中的一部分，存储编译期类中产生的<font color=\"#EE0000\">字符串类型数据。</font></li>\n<li><font color=\"#EE4000\">运行时常量池(Runtime Constant Pool)</font>：**方法区的一部分，所有线程共享。虚拟机加载Class后把常量池中的数据放入到运行时常量池**。<font color=\"#EE3B3B\">常量池</font>：可以理解为Class文件中的资源仓库，它是Class文件结构中与其他项目资源关联最多的数据类型。\n 1. 常量池中主要存放两大类常量：<font color=\"#EE4000\">字面量</font>(Literal)和<font color=\"#EE4000\">符号引用</font>(Symbolic Reference)。\n 2. **字面量**：文本字符串、声明为final的常量值等。\n 3. **符号引用**：<font color=\"#EE4000\">类和接口的完全限定名</font>(Fully Qualified Name)、<font color=\"#EE4000\">字段的名称</font>和<font color=\"#EE4000\">描述符</font>(Descriptor)、<font color=\"#EE4000\">方法的名称</font>和<font color=\"#EE4000\">描述符号</font>\n\n\n</li>\n</ol>\n<hr>\n<h3 id=\"直接内存-Direct-Memory\"><a href=\"#直接内存-Direct-Memory\" class=\"headerlink\" title=\"直接内存(Direct Memory)\"></a>直接内存(Direct Memory)</h3><h4 id=\"参数设置-5\"><a href=\"#参数设置-5\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>可通过-XX:MaxDirectMemorySize指定，如果不指定，则默认与Java堆的最大值（-Xmx指定）一样。</p>\n<h4 id=\"存储内容-5\"><a href=\"#存储内容-5\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><p><strong>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。</strong></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://juejin.im/post/5aae4e8f6fb9a028e52d9e8c\" target=\"_blank\" rel=\"noopener\">50个多线程面试题</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"JVM内存结构\"><a href=\"#JVM内存结构\" class=\"headerlink\" title=\"JVM内存结构\"></a>JVM内存结构</h3><p>&emsp;&emsp;JVM内存结构主要有三大块：<strong><em>堆内存</em></strong> 、<strong><em>方法法区</em></strong> 和 <strong><em>栈</em></strong>。<br>&emsp;&emsp;<strong><em>堆内存</em></strong> 是JVM中最大的一块由 <strong>年轻代</strong>和 <strong>老年代</strong> 组成，而年轻代内存又被分为三部分， <strong>Eden空间</strong> 、<strong>From Survivo空间</strong> 、<strong>To Survivor空间</strong> ，默认情况下年轻代按照$8:1:1$的比例来分配；<font color=\"#FF3030\">方法区存储类信息、常量、静态变量等数据，是线程共享的区域</font> ，为与<strong>Java堆</strong>区分，方法区还有一个别名NonHeap(非堆)；栈又分为 <strong>Java虚拟机栈</strong> 和 <strong>本地方法栈</strong> 主要用于方法的执行。<br>&emsp;&emsp;<font color=\"#FF0000\">JAVA的JVM的内存可分为3个区</font>： <strong>堆(Heap)</strong>、 <strong>栈(Stack)</strong>  、 <strong>方法区(Method Area)</strong> 。实际IDEA开发Tomcat启动项配置示例：  </p>\n<blockquote>\n<font face=\"微软雅黑\" color=\"#9900ff\" size=\"2\">-Xms1024m -Xmx1024m  -XX:PermSize=512M -XX:MaxPermSize=1024m  -Dfile.encoding=utf-8 </font>   \n\n\n\n</blockquote>","more":"<hr>\n<h3 id=\"Java堆-Java-Heap\"><a href=\"#Java堆-Java-Heap\" class=\"headerlink\" title=\"Java堆(Java Heap)\"></a>Java堆(Java Heap)</h3><h4 id=\"参数设置\"><a href=\"#参数设置\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>Java堆可通过参数 <font color=\"#EE7942\">-Xms</font> 和  <font color=\"#EE7942\">-Xmx</font>设置；</p>\n<h4 id=\"存储内容\"><a href=\"#存储内容\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><p>Java堆是存放对象的实例，几乎所有的<font color=\"#EE6A50\">对象实例</font>和<font color=\"#EE6A50\">数组</font>都存储于此区域，是被所有线程共享，是JVM虚拟机管理的内存中最大的一块，在虚拟机启动时创建；</p>\n<h4 id=\"内存分配\"><a href=\"#内存分配\" class=\"headerlink\" title=\"内存分配\"></a>内存分配</h4><p>为了便于更好的回收和分配内存，堆可细分为：<strong>新生代</strong>和<strong>老年代</strong>，<strong>新生代</strong> 在细致一些就是<font color=\"#EE3B3B\">Eden空间、From Survivor空间、To Survivor区</font>。</p>\n<ol>\n<li>新生代：包括Eden区、From Survivor区、To Survivor区，系统默认大小 $Eden:Survivor= 8:1$</li>\n<li>老年代：在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到老年代中。因此可认为老年代中存放的都是一些生命周期较长的对象</li>\n</ol>\n<p>Survivor空间等Java堆可以处理在物理内存不连续的空间，只要逻辑上是连续即可。</p>\n<hr>\n<h3 id=\"Java虚拟机栈-Stack\"><a href=\"#Java虚拟机栈-Stack\" class=\"headerlink\" title=\"Java虚拟机栈(Stack)\"></a>Java虚拟机栈(Stack)</h3><h4 id=\"参数设置-1\"><a href=\"#参数设置-1\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>可通过参数 栈帧是方法运行期的基础数据结构栈容量可由-Xss设置；</p>\n<h4 id=\"存储内容-1\"><a href=\"#存储内容-1\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><p>Java虚拟机栈是线程私有的，它的生命周期与线程相同</p>\n<ol>\n<li>每个方法被调用直至执行完成的过程，就对应一个栈帧在虚拟机栈中从入栈到出栈的过程</li>\n<li><p>虚拟机栈是执行Java方法的内存模型(也就是字节码)服务：**每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p>\n<ol>\n<li><font color=\"#FF0000\">局部变量表</font>：32位变量槽，存放了编译期可知的 <strong>各种基本数据类型</strong>、<strong>对象引用</strong>、<strong>returnAddress类型</strong></li>\n<li><font color=\"#FF0000\">操作数栈</font>：基于栈的执行引擎，虚拟机把操作数栈作为它的工作区，大多数指令都要从这里弹出数据、执行运算，然后把结果压回操作数栈。</li>\n<li><font color=\"#FF0000\">动态链接</font>：<strong>每个栈帧都包含一个指向运行时常量池(方法区的一部分)中该栈帧所属方法的引用</strong>。持有这个引用是为了支持方法调用过程中的动态连接。Class文件的常量池中有大量的符号引用，字节码中的方法调用指令就以常量池中指向方法的符号引用为参数。这些符号引用一部分会在类加载阶段或第一次使用的时候转化为直接引用，这种转化称为<strong>静态解析</strong>。另一部分将在每次的运行期间转化为直接应用，这部分称为<strong>动态链接</strong></li>\n<li><font color=\"#FF0000\">方法出口</font>：返回方法被调用的位置，恢复上层方法的局部变量和操作数栈，如果无返回值，则把它压入调用者的操作数栈。</li>\n</ol>\n</li>\n<li><p><strong>局部变量表所需的内存空间在编译期间完成分配</strong>，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的。</p>\n</li>\n<li><strong>在方法运行期间不会改变局部变量表的大小。主要存放了编译之后可知的各种基本数据类型、对象引用。</strong><font color=\"#33ccff\">（<a href=\"http://www.runoob.com/java/java-basic-datatypes.html\" target=\"_blank\" rel=\"noopener\">reference类型、returnAddress类型</a>）</font></li>\n</ol>\n<hr>\n<h3 id=\"本地方法栈-Local-Method-Stack\"><a href=\"#本地方法栈-Local-Method-Stack\" class=\"headerlink\" title=\"本地方法栈(Local Method Stack)\"></a>本地方法栈(Local Method Stack)</h3><h4 id=\"参数设置-2\"><a href=\"#参数设置-2\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>可通过参数 栈容量可由-Xss设置。</p>\n<h4 id=\"存储内容-2\"><a href=\"#存储内容-2\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><ol>\n<li>虚拟机栈为虚拟机执行Java方法（也就是字节码）服务。</li>\n<li>本地方法栈则是为虚拟机使用到的Native方法服务。有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。</li>\n</ol>\n<hr>\n<h3 id=\"方法区-Method-Area\"><a href=\"#方法区-Method-Area\" class=\"headerlink\" title=\"方法区(Method Area)\"></a>方法区(Method Area)</h3><h4 id=\"参数设置-3\"><a href=\"#参数设置-3\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>可通过参数-XX:MaxPermSize设置</p>\n<h4 id=\"存储内容-3\"><a href=\"#存储内容-3\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><ol>\n<li><strong>线程共享内存区域，用于储存已被虚拟机加载的类信息、常量、静态变量，即编译器编译后的代码，方法区也称持久代（Permanent Generation）</strong>。</li>\n<li>虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做<font color=\"#DC143C\">Non-Heap（非堆）</font>，目的应该是与Java堆区分开来。</li>\n<li>如何实现方法区，属于虚拟机的实现细节，不受虚拟机规范的约束。</li>\n<li>方法区主要存放java类定义信息，与垃圾回收关系不大，方法区可以选择不实现垃圾回收，<font color=\"#EE2C2C\">但不是没有垃圾回收</font>。</li>\n<li><strong>方法区域的内存回收目标主要针对常量池的回收和对类型的卸载。</strong></li>\n<li><strong><font color=\"#EE2C2C\">运行时常量池</font>，也是方法区的一部分，虚拟机加载Class后把常量池中的数据放入运行时常量池</strong>。</li>\n</ol>\n<hr>\n<h3 id=\"运行时常量池-Runtime-Constant-Pool\"><a href=\"#运行时常量池-Runtime-Constant-Pool\" class=\"headerlink\" title=\"运行时常量池(Runtime Constant Pool)\"></a>运行时常量池(Runtime Constant Pool)</h3><h4 id=\"参数设置-4\"><a href=\"#参数设置-4\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>可通过参数-XX:PermSize和-XX:MaxPermSize设置</p>\n<h4 id=\"存储内容-4\"><a href=\"#存储内容-4\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><ol>\n<li><font color=\"#EE4000\">常量池(Constant Pool)</font>：<strong>常量池数据编辑之后被确定，是Class文件中的一部分。存储了类、方法、接口等中的常量，也包括字符串常量。</strong></li>\n<li><font color=\"#EE4000\">字符串池/字符串常量池(String  Pool/ String Constant Pool)</font>：是常量池中的一部分，存储编译期类中产生的<font color=\"#EE0000\">字符串类型数据。</font></li>\n<li><font color=\"#EE4000\">运行时常量池(Runtime Constant Pool)</font>：**方法区的一部分，所有线程共享。虚拟机加载Class后把常量池中的数据放入到运行时常量池**。<font color=\"#EE3B3B\">常量池</font>：可以理解为Class文件中的资源仓库，它是Class文件结构中与其他项目资源关联最多的数据类型。\n 1. 常量池中主要存放两大类常量：<font color=\"#EE4000\">字面量</font>(Literal)和<font color=\"#EE4000\">符号引用</font>(Symbolic Reference)。\n 2. **字面量**：文本字符串、声明为final的常量值等。\n 3. **符号引用**：<font color=\"#EE4000\">类和接口的完全限定名</font>(Fully Qualified Name)、<font color=\"#EE4000\">字段的名称</font>和<font color=\"#EE4000\">描述符</font>(Descriptor)、<font color=\"#EE4000\">方法的名称</font>和<font color=\"#EE4000\">描述符号</font>\n\n\n</li>\n</ol>\n<hr>\n<h3 id=\"直接内存-Direct-Memory\"><a href=\"#直接内存-Direct-Memory\" class=\"headerlink\" title=\"直接内存(Direct Memory)\"></a>直接内存(Direct Memory)</h3><h4 id=\"参数设置-5\"><a href=\"#参数设置-5\" class=\"headerlink\" title=\"参数设置\"></a>参数设置</h4><p>可通过-XX:MaxDirectMemorySize指定，如果不指定，则默认与Java堆的最大值（-Xmx指定）一样。</p>\n<h4 id=\"存储内容-5\"><a href=\"#存储内容-5\" class=\"headerlink\" title=\"存储内容\"></a>存储内容</h4><p><strong>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError异常出现。</strong></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://juejin.im/post/5aae4e8f6fb9a028e52d9e8c\" target=\"_blank\" rel=\"noopener\">50个多线程面试题</a></li>\n</ul>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Apr 27 2016 19:29:00 GMT+0800 (CST)","title":"JVM内存结构(4)","path":"2016/04/27/JVM/jvm-introduce/","eyeCatchImage":null,"excerpt":"<h3 id=\"JVM内存结构\"><a href=\"#JVM内存结构\" class=\"headerlink\" title=\"JVM内存结构\"></a>JVM内存结构</h3><p>&emsp;&emsp;JVM内存结构主要有三大块：<strong><em>堆内存</em></strong> 、<strong><em>方法法区</em></strong> 和 <strong><em>栈</em></strong>。<br>&emsp;&emsp;<strong><em>堆内存</em></strong> 是JVM中最大的一块由 <strong>年轻代</strong>和 <strong>老年代</strong> 组成，而年轻代内存又被分为三部分， <strong>Eden空间</strong> 、<strong>From Survivo空间</strong> 、<strong>To Survivor空间</strong> ，默认情况下年轻代按照$8:1:1$的比例来分配；<font color=\"#FF3030\">方法区存储类信息、常量、静态变量等数据，是线程共享的区域</font> ，为与<strong>Java堆</strong>区分，方法区还有一个别名NonHeap(非堆)；栈又分为 <strong>Java虚拟机栈</strong> 和 <strong>本地方法栈</strong> 主要用于方法的执行。<br>&emsp;&emsp;<font color=\"#FF0000\">JAVA的JVM的内存可分为3个区</font>： <strong>堆(Heap)</strong>、 <strong>栈(Stack)</strong>  、 <strong>方法区(Method Area)</strong> 。实际IDEA开发Tomcat启动项配置示例：  </p>\n<blockquote>\n<font face=\"微软雅黑\" color=\"#9900ff\" size=\"2\">-Xms1024m -Xmx1024m  -XX:PermSize=512M -XX:MaxPermSize=1024m  -Dfile.encoding=utf-8 </font>   \n\n\n\n</blockquote>","date":"2016-04-27T09:00:00.000Z","pv":0,"totalPV":0,"categories":"JVM","tags":["JVM"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JVM内存结构(1)","copyright":true,"date":"2016-04-23T13:20:43.000Z","updated":"2016-04-23T14:29:00.000Z","_content":"\n### JVM内存结构（运行时数据区）\nJVM内存结构指得是：运行时数据区（Runtime Data Area），由 ***方法区(Method Area) ***、***堆(Heap) ***、***Java栈(Java Stack) ***、***本地方法栈(Native Method Stack)***、***程序计数器(Program Counter Register)***。\n![](http://p5vswdxl9.bkt.clouddn.com/JVMRuntime)\n\n<!-- more -->\n\n--------------------\n\n#### 一、方法区(Method Area)  \n1. **作用**： 用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。此区域内存回收目标主要针对常量池回收和对类型的卸载回收。 \n2. **特点**：线程共享 。\n3. **永久代的疑问(PerGen)**：该内存区域一般被称为\"**永久代(Permanent Generation)** \"，二者并不等价，设计之初就把GC分代收集扩展至方法区，或者说使用永久代实现方法区而已。\n4. **运行时常量池**：方法区的一部分，存放***编译期***生成的**各种字面量**(\"zdy\",\"123\"等)和 **符号引用** 。编译器和运行期的intern()都可以将常量放入池中。受方法区限制，常量池无法申请到内存时会抛出OutOfMemoryError异常。运行时常量池具有动态性，并非只有Class文件中的内容才能进入运行时常量池，***运行期间***也能将新的常量放入池中。如String.intern（）方法。\n5. **方法区储存类的信息**： \n    1. `Classloader引用`；\n    2. `运行时常量池`：数值型常量、字段引用、方法引用、属   性；  \n    3. `字段数据`：针对每个字段的信息、字段名、类型、修饰符、属性；\n    4. `方法数据`：每个方法、方法名、返回值类型、参数类型、修饰符、属性；\n    5. `方法代码`：每个方法、字节码、操作数栈大小、局部变量大小、局部变量表、异常表、每个异常处理器、开始点、结束点、异常处理代码的程序计数器偏移量、被捕获异常类对应的常量池下标；\n         \n* *** 字面量(literal) ***：由字母，数字等构成的字符串或者数值，用于表达源代码中一个固定值的表示法(notation)。几乎所有计算机编程语言都具有对基本值的字面量表示，诸如：整数、浮点数以及字符串；而有很多也对布尔类型和字符类型的值也支持字面量表示；还有一些甚至对枚举类型的元素以及像数组、记录和对象等复合类型的值也支持字面量表示法。\n* *** 符号引用 ***：简单地说就是，符号引用存在class文件中的常量池，包括类和接口的全限定名、字段的名称和描述符以及方法的名称和描述符。jvm加载class的时候就可以凭着这三者进行动态连接，得到具体的内存地址。占用的数据结构在常量池项目类型有，例如类或接口的符号引用结构为u1的tag和u2的name_index。\n--------------------\n#### 二、堆(Heap)\n1. ** 作用 **：被所有线程运行时共享的内存区域，JVM启动之后，存放对象实例和数组，内部会划出多个线程私有的分配缓冲区(Thread Location Allocation Buffer ,__TLAB__)。该存储区域物理上可以是不连续空间，但是逻辑上一定要连续。\n2. ** 特点 **：是GC管理的主要区域，由于GC（垃圾收集器）是采用分代收集算法,根据对象存活率，堆还可以分为**新生代**、**老年代**、**永久代**。\n3. ** 分类 **：\n    > _**新生代(Young Generation)**_ ：方法中去new一个对象，那这方法调用完毕后，对象就会被回收，这就是一个典型的新生代对象。 每次使用Eden和其中一块Survivor，当回收时，将Eden和Survivor中还存活的对象一次性地复制到另外一块Survivor空间上，最后清理Eden和刚才用过的Survivor空间。*** HotSpot虚拟机默认Eden和Survivor的大小比例是8:1 ***，也就是说，每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的空间会被浪费。 98%的对象可回收只是一般场景下的数据，没办法保证每次回收都只有不多于10%的对象存活，当Survivor不够用时，需要依赖于老年代进行分配担保，所以*** 大对象 ***直接进入老年代。同时长期存活的对象进入老年代（虚拟机给每个对象定义一个年龄计数器）。    \n`年轻代内存又被分成三部分`：  \n    1. `Eden空间`：对象优先分配在Eden区，若Eden区无足够的空间，虚拟机执行一次Minor GC。对象被创建时首先放到这个区域，进行垃圾回收后，不能被回收的对象被放到空的Survivor区域。\n    2. `Survivor Space幸存者区`：用于保存在Eden Space内存区域中经过垃圾回收后没有被回收的对象。Survivor有两类，分别为***To Suvivor *** 和 ***From Suvivor***两个区域，这两个区域空间大小是一样的执行：\n          &emsp;&emsp;a.`From Survivor空间`：\n          &emsp;&emsp;b.`To Survivor空间` ：      \n    3. `执行回收的内存运行`： 执行垃圾回收时Eden区域不能被回收的对象被放入到空的Suvivor(也就是**To Survivor**，同时Eden区域的内存会在垃圾回收的过程中全部释放)，另一个Survivor(即From Survivor)里不能被回收的对象也会被放入到Survivor(即To Survivor)，然后To Survivor和 From Survivor的标记会互换，始终保证一个Survivor是空的。 \n      \n > _**老年代(Old Generation)**_ ：** 老年代空间大小&emsp;=&emsp;堆空间大小&emsp;--&emsp;年轻代大空间大小 **   \n4. ** 年轻代的垃圾回收 **：***Eden Space(伊甸园) ***和***Suvivor Space ***都属于新生代，新生代中执行垃圾回收被称为Minor GC(由于是对新生代进行垃圾回收，所以被称为Young GC)，每次Young GC 后留下来的对象age +1。\n    > _** Eden:From:TO =8:1:1**_    \n    由于新生代中90%的对象都是\"朝生夕死\"，采用复制算法是比较合理的，首先只移动了存活下来的对象(比较少数),其次内存在移动到To区域后是有顺序的，不存在内存碎片。值得一提的是，假如在一次Minor GC时,`Eden中存活的对象`+`From中存活的对象`>`To的剩余空间`，则会通过担保机制将对象直接转移到Old Gen ,如果Old Gen的内存空间也不够，则进行一次Full GC .当*** 对象的年龄到达15岁时会转移到Old Gen(可通过参数配置，一般不建议更改) ***\n    \n5. ** 使用方式 **：Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。*** 如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。 ***\n6. `对象分配规则`：  \n    `1.对象优先分配在Eden区`：若Eden区没有足够的空间时，虚拟机执行一次Minor GC；\n    `2.大对象(大对象是指需要大量连续内存空间的对象)直接进入老年代`：这样做目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝(新生代采用 ***复制算法 *** 收集内存)； \n    `3.长期存活的对象进入老年代`：虚拟机为每个对象定义一个年龄计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象年龄加 1，直到达到阀值，对象进入老年区；\n    `4.动态判断对象的年龄`：如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代；\n    `5.空间分配担保`：每次每次进行Minor GC时，JVM会计算Survivor区移至**老年区的对象**的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，如果true则只进行Monitor GC，如果false则进行Full GC；    \n                   \n-------\n\n\n\n","source":"_posts/JVM/jvm.md","raw":"---\ntitle: JVM内存结构(1)\ntags: [JVM]\ncopyright: true\ndate: 2016-04-23 21:20:43\nupdated: 2016-04-23 22:29:00\ncategories: JVM\n---\n\n### JVM内存结构（运行时数据区）\nJVM内存结构指得是：运行时数据区（Runtime Data Area），由 ***方法区(Method Area) ***、***堆(Heap) ***、***Java栈(Java Stack) ***、***本地方法栈(Native Method Stack)***、***程序计数器(Program Counter Register)***。\n![](http://p5vswdxl9.bkt.clouddn.com/JVMRuntime)\n\n<!-- more -->\n\n--------------------\n\n#### 一、方法区(Method Area)  \n1. **作用**： 用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。此区域内存回收目标主要针对常量池回收和对类型的卸载回收。 \n2. **特点**：线程共享 。\n3. **永久代的疑问(PerGen)**：该内存区域一般被称为\"**永久代(Permanent Generation)** \"，二者并不等价，设计之初就把GC分代收集扩展至方法区，或者说使用永久代实现方法区而已。\n4. **运行时常量池**：方法区的一部分，存放***编译期***生成的**各种字面量**(\"zdy\",\"123\"等)和 **符号引用** 。编译器和运行期的intern()都可以将常量放入池中。受方法区限制，常量池无法申请到内存时会抛出OutOfMemoryError异常。运行时常量池具有动态性，并非只有Class文件中的内容才能进入运行时常量池，***运行期间***也能将新的常量放入池中。如String.intern（）方法。\n5. **方法区储存类的信息**： \n    1. `Classloader引用`；\n    2. `运行时常量池`：数值型常量、字段引用、方法引用、属   性；  \n    3. `字段数据`：针对每个字段的信息、字段名、类型、修饰符、属性；\n    4. `方法数据`：每个方法、方法名、返回值类型、参数类型、修饰符、属性；\n    5. `方法代码`：每个方法、字节码、操作数栈大小、局部变量大小、局部变量表、异常表、每个异常处理器、开始点、结束点、异常处理代码的程序计数器偏移量、被捕获异常类对应的常量池下标；\n         \n* *** 字面量(literal) ***：由字母，数字等构成的字符串或者数值，用于表达源代码中一个固定值的表示法(notation)。几乎所有计算机编程语言都具有对基本值的字面量表示，诸如：整数、浮点数以及字符串；而有很多也对布尔类型和字符类型的值也支持字面量表示；还有一些甚至对枚举类型的元素以及像数组、记录和对象等复合类型的值也支持字面量表示法。\n* *** 符号引用 ***：简单地说就是，符号引用存在class文件中的常量池，包括类和接口的全限定名、字段的名称和描述符以及方法的名称和描述符。jvm加载class的时候就可以凭着这三者进行动态连接，得到具体的内存地址。占用的数据结构在常量池项目类型有，例如类或接口的符号引用结构为u1的tag和u2的name_index。\n--------------------\n#### 二、堆(Heap)\n1. ** 作用 **：被所有线程运行时共享的内存区域，JVM启动之后，存放对象实例和数组，内部会划出多个线程私有的分配缓冲区(Thread Location Allocation Buffer ,__TLAB__)。该存储区域物理上可以是不连续空间，但是逻辑上一定要连续。\n2. ** 特点 **：是GC管理的主要区域，由于GC（垃圾收集器）是采用分代收集算法,根据对象存活率，堆还可以分为**新生代**、**老年代**、**永久代**。\n3. ** 分类 **：\n    > _**新生代(Young Generation)**_ ：方法中去new一个对象，那这方法调用完毕后，对象就会被回收，这就是一个典型的新生代对象。 每次使用Eden和其中一块Survivor，当回收时，将Eden和Survivor中还存活的对象一次性地复制到另外一块Survivor空间上，最后清理Eden和刚才用过的Survivor空间。*** HotSpot虚拟机默认Eden和Survivor的大小比例是8:1 ***，也就是说，每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的空间会被浪费。 98%的对象可回收只是一般场景下的数据，没办法保证每次回收都只有不多于10%的对象存活，当Survivor不够用时，需要依赖于老年代进行分配担保，所以*** 大对象 ***直接进入老年代。同时长期存活的对象进入老年代（虚拟机给每个对象定义一个年龄计数器）。    \n`年轻代内存又被分成三部分`：  \n    1. `Eden空间`：对象优先分配在Eden区，若Eden区无足够的空间，虚拟机执行一次Minor GC。对象被创建时首先放到这个区域，进行垃圾回收后，不能被回收的对象被放到空的Survivor区域。\n    2. `Survivor Space幸存者区`：用于保存在Eden Space内存区域中经过垃圾回收后没有被回收的对象。Survivor有两类，分别为***To Suvivor *** 和 ***From Suvivor***两个区域，这两个区域空间大小是一样的执行：\n          &emsp;&emsp;a.`From Survivor空间`：\n          &emsp;&emsp;b.`To Survivor空间` ：      \n    3. `执行回收的内存运行`： 执行垃圾回收时Eden区域不能被回收的对象被放入到空的Suvivor(也就是**To Survivor**，同时Eden区域的内存会在垃圾回收的过程中全部释放)，另一个Survivor(即From Survivor)里不能被回收的对象也会被放入到Survivor(即To Survivor)，然后To Survivor和 From Survivor的标记会互换，始终保证一个Survivor是空的。 \n      \n > _**老年代(Old Generation)**_ ：** 老年代空间大小&emsp;=&emsp;堆空间大小&emsp;--&emsp;年轻代大空间大小 **   \n4. ** 年轻代的垃圾回收 **：***Eden Space(伊甸园) ***和***Suvivor Space ***都属于新生代，新生代中执行垃圾回收被称为Minor GC(由于是对新生代进行垃圾回收，所以被称为Young GC)，每次Young GC 后留下来的对象age +1。\n    > _** Eden:From:TO =8:1:1**_    \n    由于新生代中90%的对象都是\"朝生夕死\"，采用复制算法是比较合理的，首先只移动了存活下来的对象(比较少数),其次内存在移动到To区域后是有顺序的，不存在内存碎片。值得一提的是，假如在一次Minor GC时,`Eden中存活的对象`+`From中存活的对象`>`To的剩余空间`，则会通过担保机制将对象直接转移到Old Gen ,如果Old Gen的内存空间也不够，则进行一次Full GC .当*** 对象的年龄到达15岁时会转移到Old Gen(可通过参数配置，一般不建议更改) ***\n    \n5. ** 使用方式 **：Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。*** 如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。 ***\n6. `对象分配规则`：  \n    `1.对象优先分配在Eden区`：若Eden区没有足够的空间时，虚拟机执行一次Minor GC；\n    `2.大对象(大对象是指需要大量连续内存空间的对象)直接进入老年代`：这样做目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝(新生代采用 ***复制算法 *** 收集内存)； \n    `3.长期存活的对象进入老年代`：虚拟机为每个对象定义一个年龄计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象年龄加 1，直到达到阀值，对象进入老年区；\n    `4.动态判断对象的年龄`：如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代；\n    `5.空间分配担保`：每次每次进行Minor GC时，JVM会计算Survivor区移至**老年区的对象**的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，如果true则只进行Monitor GC，如果false则进行Full GC；    \n                   \n-------\n\n\n\n","slug":"JVM/jvm","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmc000n9l8i3pa9sdts","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"JVM内存结构（运行时数据区）\"><a href=\"#JVM内存结构（运行时数据区）\" class=\"headerlink\" title=\"JVM内存结构（运行时数据区）\"></a>JVM内存结构（运行时数据区）</h3><p>JVM内存结构指得是：运行时数据区（Runtime Data Area），由 <strong><em>方法区(Method Area) </em></strong>、<strong><em>堆(Heap) </em></strong>、<strong><em>Java栈(Java Stack) </em></strong>、<strong><em>本地方法栈(Native Method Stack)</em></strong>、<strong><em>程序计数器(Program Counter Register)</em></strong>。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/JVMRuntime\" alt=\"\"></p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"一、方法区-Method-Area\"><a href=\"#一、方法区-Method-Area\" class=\"headerlink\" title=\"一、方法区(Method Area)\"></a>一、方法区(Method Area)</h4><ol>\n<li><strong>作用</strong>： 用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。此区域内存回收目标主要针对常量池回收和对类型的卸载回收。 </li>\n<li><strong>特点</strong>：线程共享 。</li>\n<li><strong>永久代的疑问(PerGen)</strong>：该内存区域一般被称为”<strong>永久代(Permanent Generation)</strong> “，二者并不等价，设计之初就把GC分代收集扩展至方法区，或者说使用永久代实现方法区而已。</li>\n<li><strong>运行时常量池</strong>：方法区的一部分，存放<strong><em>编译期</em></strong>生成的<strong>各种字面量</strong>(“zdy”,”123”等)和 <strong>符号引用</strong> 。编译器和运行期的intern()都可以将常量放入池中。受方法区限制，常量池无法申请到内存时会抛出OutOfMemoryError异常。运行时常量池具有动态性，并非只有Class文件中的内容才能进入运行时常量池，<strong><em>运行期间</em></strong>也能将新的常量放入池中。如String.intern（）方法。</li>\n<li><strong>方法区储存类的信息</strong>： <ol>\n<li><code>Classloader引用</code>；</li>\n<li><code>运行时常量池</code>：数值型常量、字段引用、方法引用、属   性；  </li>\n<li><code>字段数据</code>：针对每个字段的信息、字段名、类型、修饰符、属性；</li>\n<li><code>方法数据</code>：每个方法、方法名、返回值类型、参数类型、修饰符、属性；</li>\n<li><code>方法代码</code>：每个方法、字节码、操作数栈大小、局部变量大小、局部变量表、异常表、每个异常处理器、开始点、结束点、异常处理代码的程序计数器偏移量、被捕获异常类对应的常量池下标；</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li><strong><em> 字面量(literal) </em></strong>：由字母，数字等构成的字符串或者数值，用于表达源代码中一个固定值的表示法(notation)。几乎所有计算机编程语言都具有对基本值的字面量表示，诸如：整数、浮点数以及字符串；而有很多也对布尔类型和字符类型的值也支持字面量表示；还有一些甚至对枚举类型的元素以及像数组、记录和对象等复合类型的值也支持字面量表示法。</li>\n<li><strong><em> 符号引用 </em></strong>：简单地说就是，符号引用存在class文件中的常量池，包括类和接口的全限定名、字段的名称和描述符以及方法的名称和描述符。jvm加载class的时候就可以凭着这三者进行动态连接，得到具体的内存地址。占用的数据结构在常量池项目类型有，例如类或接口的符号引用结构为u1的tag和u2的name_index。</li>\n</ul>\n<hr>\n<h4 id=\"二、堆-Heap\"><a href=\"#二、堆-Heap\" class=\"headerlink\" title=\"二、堆(Heap)\"></a>二、堆(Heap)</h4><ol>\n<li><strong> 作用 </strong>：被所有线程运行时共享的内存区域，JVM启动之后，存放对象实例和数组，内部会划出多个线程私有的分配缓冲区(Thread Location Allocation Buffer ,<strong>TLAB</strong>)。该存储区域物理上可以是不连续空间，但是逻辑上一定要连续。</li>\n<li><strong> 特点 </strong>：是GC管理的主要区域，由于GC（垃圾收集器）是采用分代收集算法,根据对象存活率，堆还可以分为<strong>新生代</strong>、<strong>老年代</strong>、<strong>永久代</strong>。</li>\n<li><p><strong> 分类 </strong>：</p>\n<blockquote>\n<p>_<strong>新生代(Young Generation)</strong>_ ：方法中去new一个对象，那这方法调用完毕后，对象就会被回收，这就是一个典型的新生代对象。 每次使用Eden和其中一块Survivor，当回收时，将Eden和Survivor中还存活的对象一次性地复制到另外一块Survivor空间上，最后清理Eden和刚才用过的Survivor空间。<strong><em> HotSpot虚拟机默认Eden和Survivor的大小比例是8:1 </em></strong>，也就是说，每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的空间会被浪费。 98%的对象可回收只是一般场景下的数据，没办法保证每次回收都只有不多于10%的对象存活，当Survivor不够用时，需要依赖于老年代进行分配担保，所以<strong><em> 大对象 </em></strong>直接进入老年代。同时长期存活的对象进入老年代（虚拟机给每个对象定义一个年龄计数器）。<br><code>年轻代内存又被分成三部分</code>：  </p>\n<ol>\n<li><code>Eden空间</code>：对象优先分配在Eden区，若Eden区无足够的空间，虚拟机执行一次Minor GC。对象被创建时首先放到这个区域，进行垃圾回收后，不能被回收的对象被放到空的Survivor区域。</li>\n<li><code>Survivor Space幸存者区</code>：用于保存在Eden Space内存区域中经过垃圾回收后没有被回收的对象。Survivor有两类，分别为<strong><em>To Suvivor </em></strong> 和 <strong><em>From Suvivor</em></strong>两个区域，这两个区域空间大小是一样的执行：<br>   &emsp;&emsp;a.<code>From Survivor空间</code>：<br>   &emsp;&emsp;b.<code>To Survivor空间</code> ：      </li>\n<li><code>执行回收的内存运行</code>： 执行垃圾回收时Eden区域不能被回收的对象被放入到空的Suvivor(也就是<strong>To Survivor</strong>，同时Eden区域的内存会在垃圾回收的过程中全部释放)，另一个Survivor(即From Survivor)里不能被回收的对象也会被放入到Survivor(即To Survivor)，然后To Survivor和 From Survivor的标记会互换，始终保证一个Survivor是空的。 </li>\n</ol>\n<p>_<strong>老年代(Old Generation)</strong>_ ：<strong> 老年代空间大小&emsp;=&emsp;堆空间大小&emsp;—&emsp;年轻代大空间大小 </strong>   </p>\n</blockquote>\n</li>\n<li><p><strong> 年轻代的垃圾回收 </strong>：<strong><em>Eden Space(伊甸园) </em></strong>和<strong><em>Suvivor Space </em></strong>都属于新生代，新生代中执行垃圾回收被称为Minor GC(由于是对新生代进行垃圾回收，所以被称为Young GC)，每次Young GC 后留下来的对象age +1。</p>\n<blockquote>\n<p>_<strong> Eden:From:TO =8:1:1</strong>_<br> 由于新生代中90%的对象都是”朝生夕死”，采用复制算法是比较合理的，首先只移动了存活下来的对象(比较少数),其次内存在移动到To区域后是有顺序的，不存在内存碎片。值得一提的是，假如在一次Minor GC时,<code>Eden中存活的对象</code>+<code>From中存活的对象</code>&gt;<code>To的剩余空间</code>，则会通过担保机制将对象直接转移到Old Gen ,如果Old Gen的内存空间也不够，则进行一次Full GC .当<strong><em> 对象的年龄到达15岁时会转移到Old Gen(可通过参数配置，一般不建议更改) </em></strong></p>\n</blockquote>\n</li>\n<li><p><strong> 使用方式 </strong>：Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。<strong><em> 如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。 </em></strong></p>\n</li>\n<li><code>对象分配规则</code>：<br> <code>1.对象优先分配在Eden区</code>：若Eden区没有足够的空间时，虚拟机执行一次Minor GC；<br> <code>2.大对象(大对象是指需要大量连续内存空间的对象)直接进入老年代</code>：这样做目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝(新生代采用 <strong><em>复制算法 </em></strong> 收集内存)；<br> <code>3.长期存活的对象进入老年代</code>：虚拟机为每个对象定义一个年龄计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象年龄加 1，直到达到阀值，对象进入老年区；<br> <code>4.动态判断对象的年龄</code>：如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代；<br> <code>5.空间分配担保</code>：每次每次进行Minor GC时，JVM会计算Survivor区移至<strong>老年区的对象</strong>的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，如果true则只进行Monitor GC，如果false则进行Full GC；    </li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"JVM内存结构（运行时数据区）\"><a href=\"#JVM内存结构（运行时数据区）\" class=\"headerlink\" title=\"JVM内存结构（运行时数据区）\"></a>JVM内存结构（运行时数据区）</h3><p>JVM内存结构指得是：运行时数据区（Runtime Data Area），由 <strong><em>方法区(Method Area) </em></strong>、<strong><em>堆(Heap) </em></strong>、<strong><em>Java栈(Java Stack) </em></strong>、<strong><em>本地方法栈(Native Method Stack)</em></strong>、<strong><em>程序计数器(Program Counter Register)</em></strong>。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/JVMRuntime\" alt=\"\"></p>","more":"<hr>\n<h4 id=\"一、方法区-Method-Area\"><a href=\"#一、方法区-Method-Area\" class=\"headerlink\" title=\"一、方法区(Method Area)\"></a>一、方法区(Method Area)</h4><ol>\n<li><strong>作用</strong>： 用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。此区域内存回收目标主要针对常量池回收和对类型的卸载回收。 </li>\n<li><strong>特点</strong>：线程共享 。</li>\n<li><strong>永久代的疑问(PerGen)</strong>：该内存区域一般被称为”<strong>永久代(Permanent Generation)</strong> “，二者并不等价，设计之初就把GC分代收集扩展至方法区，或者说使用永久代实现方法区而已。</li>\n<li><strong>运行时常量池</strong>：方法区的一部分，存放<strong><em>编译期</em></strong>生成的<strong>各种字面量</strong>(“zdy”,”123”等)和 <strong>符号引用</strong> 。编译器和运行期的intern()都可以将常量放入池中。受方法区限制，常量池无法申请到内存时会抛出OutOfMemoryError异常。运行时常量池具有动态性，并非只有Class文件中的内容才能进入运行时常量池，<strong><em>运行期间</em></strong>也能将新的常量放入池中。如String.intern（）方法。</li>\n<li><strong>方法区储存类的信息</strong>： <ol>\n<li><code>Classloader引用</code>；</li>\n<li><code>运行时常量池</code>：数值型常量、字段引用、方法引用、属   性；  </li>\n<li><code>字段数据</code>：针对每个字段的信息、字段名、类型、修饰符、属性；</li>\n<li><code>方法数据</code>：每个方法、方法名、返回值类型、参数类型、修饰符、属性；</li>\n<li><code>方法代码</code>：每个方法、字节码、操作数栈大小、局部变量大小、局部变量表、异常表、每个异常处理器、开始点、结束点、异常处理代码的程序计数器偏移量、被捕获异常类对应的常量池下标；</li>\n</ol>\n</li>\n</ol>\n<ul>\n<li><strong><em> 字面量(literal) </em></strong>：由字母，数字等构成的字符串或者数值，用于表达源代码中一个固定值的表示法(notation)。几乎所有计算机编程语言都具有对基本值的字面量表示，诸如：整数、浮点数以及字符串；而有很多也对布尔类型和字符类型的值也支持字面量表示；还有一些甚至对枚举类型的元素以及像数组、记录和对象等复合类型的值也支持字面量表示法。</li>\n<li><strong><em> 符号引用 </em></strong>：简单地说就是，符号引用存在class文件中的常量池，包括类和接口的全限定名、字段的名称和描述符以及方法的名称和描述符。jvm加载class的时候就可以凭着这三者进行动态连接，得到具体的内存地址。占用的数据结构在常量池项目类型有，例如类或接口的符号引用结构为u1的tag和u2的name_index。</li>\n</ul>\n<hr>\n<h4 id=\"二、堆-Heap\"><a href=\"#二、堆-Heap\" class=\"headerlink\" title=\"二、堆(Heap)\"></a>二、堆(Heap)</h4><ol>\n<li><strong> 作用 </strong>：被所有线程运行时共享的内存区域，JVM启动之后，存放对象实例和数组，内部会划出多个线程私有的分配缓冲区(Thread Location Allocation Buffer ,<strong>TLAB</strong>)。该存储区域物理上可以是不连续空间，但是逻辑上一定要连续。</li>\n<li><strong> 特点 </strong>：是GC管理的主要区域，由于GC（垃圾收集器）是采用分代收集算法,根据对象存活率，堆还可以分为<strong>新生代</strong>、<strong>老年代</strong>、<strong>永久代</strong>。</li>\n<li><p><strong> 分类 </strong>：</p>\n<blockquote>\n<p>_<strong>新生代(Young Generation)</strong>_ ：方法中去new一个对象，那这方法调用完毕后，对象就会被回收，这就是一个典型的新生代对象。 每次使用Eden和其中一块Survivor，当回收时，将Eden和Survivor中还存活的对象一次性地复制到另外一块Survivor空间上，最后清理Eden和刚才用过的Survivor空间。<strong><em> HotSpot虚拟机默认Eden和Survivor的大小比例是8:1 </em></strong>，也就是说，每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的空间会被浪费。 98%的对象可回收只是一般场景下的数据，没办法保证每次回收都只有不多于10%的对象存活，当Survivor不够用时，需要依赖于老年代进行分配担保，所以<strong><em> 大对象 </em></strong>直接进入老年代。同时长期存活的对象进入老年代（虚拟机给每个对象定义一个年龄计数器）。<br><code>年轻代内存又被分成三部分</code>：  </p>\n<ol>\n<li><code>Eden空间</code>：对象优先分配在Eden区，若Eden区无足够的空间，虚拟机执行一次Minor GC。对象被创建时首先放到这个区域，进行垃圾回收后，不能被回收的对象被放到空的Survivor区域。</li>\n<li><code>Survivor Space幸存者区</code>：用于保存在Eden Space内存区域中经过垃圾回收后没有被回收的对象。Survivor有两类，分别为<strong><em>To Suvivor </em></strong> 和 <strong><em>From Suvivor</em></strong>两个区域，这两个区域空间大小是一样的执行：<br>   &emsp;&emsp;a.<code>From Survivor空间</code>：<br>   &emsp;&emsp;b.<code>To Survivor空间</code> ：      </li>\n<li><code>执行回收的内存运行</code>： 执行垃圾回收时Eden区域不能被回收的对象被放入到空的Suvivor(也就是<strong>To Survivor</strong>，同时Eden区域的内存会在垃圾回收的过程中全部释放)，另一个Survivor(即From Survivor)里不能被回收的对象也会被放入到Survivor(即To Survivor)，然后To Survivor和 From Survivor的标记会互换，始终保证一个Survivor是空的。 </li>\n</ol>\n<p>_<strong>老年代(Old Generation)</strong>_ ：<strong> 老年代空间大小&emsp;=&emsp;堆空间大小&emsp;—&emsp;年轻代大空间大小 </strong>   </p>\n</blockquote>\n</li>\n<li><p><strong> 年轻代的垃圾回收 </strong>：<strong><em>Eden Space(伊甸园) </em></strong>和<strong><em>Suvivor Space </em></strong>都属于新生代，新生代中执行垃圾回收被称为Minor GC(由于是对新生代进行垃圾回收，所以被称为Young GC)，每次Young GC 后留下来的对象age +1。</p>\n<blockquote>\n<p>_<strong> Eden:From:TO =8:1:1</strong>_<br> 由于新生代中90%的对象都是”朝生夕死”，采用复制算法是比较合理的，首先只移动了存活下来的对象(比较少数),其次内存在移动到To区域后是有顺序的，不存在内存碎片。值得一提的是，假如在一次Minor GC时,<code>Eden中存活的对象</code>+<code>From中存活的对象</code>&gt;<code>To的剩余空间</code>，则会通过担保机制将对象直接转移到Old Gen ,如果Old Gen的内存空间也不够，则进行一次Full GC .当<strong><em> 对象的年龄到达15岁时会转移到Old Gen(可通过参数配置，一般不建议更改) </em></strong></p>\n</blockquote>\n</li>\n<li><p><strong> 使用方式 </strong>：Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。<strong><em> 如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。 </em></strong></p>\n</li>\n<li><code>对象分配规则</code>：<br> <code>1.对象优先分配在Eden区</code>：若Eden区没有足够的空间时，虚拟机执行一次Minor GC；<br> <code>2.大对象(大对象是指需要大量连续内存空间的对象)直接进入老年代</code>：这样做目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝(新生代采用 <strong><em>复制算法 </em></strong> 收集内存)；<br> <code>3.长期存活的对象进入老年代</code>：虚拟机为每个对象定义一个年龄计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象年龄加 1，直到达到阀值，对象进入老年区；<br> <code>4.动态判断对象的年龄</code>：如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代；<br> <code>5.空间分配担保</code>：每次每次进行Minor GC时，JVM会计算Survivor区移至<strong>老年区的对象</strong>的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，如果true则只进行Monitor GC，如果false则进行Full GC；    </li>\n</ol>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Apr 23 2016 22:29:00 GMT+0800 (CST)","title":"JVM内存结构(1)","path":"2016/04/23/JVM/jvm/","eyeCatchImage":null,"excerpt":"<h3 id=\"JVM内存结构（运行时数据区）\"><a href=\"#JVM内存结构（运行时数据区）\" class=\"headerlink\" title=\"JVM内存结构（运行时数据区）\"></a>JVM内存结构（运行时数据区）</h3><p>JVM内存结构指得是：运行时数据区（Runtime Data Area），由 <strong><em>方法区(Method Area) </em></strong>、<strong><em>堆(Heap) </em></strong>、<strong><em>Java栈(Java Stack) </em></strong>、<strong><em>本地方法栈(Native Method Stack)</em></strong>、<strong><em>程序计数器(Program Counter Register)</em></strong>。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/JVMRuntime\" alt=\"\"></p>","date":"2016-04-23T13:20:43.000Z","pv":0,"totalPV":0,"categories":"JVM","tags":["JVM"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JVM内存结构(2)","copyright":true,"date":"2016-04-24T12:00:00.000Z","updated":"2016-04-24T12:29:00.000Z","_content":"### JVM内存结构（运行时数据区）\n该文承接**[JVM内存结构简介(1)](http://edgeowner.com/2016/04/19/jvm/)**博文主要介绍所有`线程共享的区域`(***方法区 ***和***堆***))，本文简单介绍剩余JVM的是三个区域：`Java栈(Java Stack)`、`本地方法栈(Native Method Stack)`、`程序计数器(Program Counter Register)`。\n\n<!-- more -->\n--------------------\n#### 三、Java虚拟机栈(Java Virtual Machine Stacks) \n1. **作用**：描述的就是Java方法执行的内存模型。每个方法被执行的时候都会同时创建一个栈帧(Stack Frame)用于存储`局部变量表`、`操作栈`、`动态链接`、`方法出口`等信息。每个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈道出栈的过程。一个方法的执行过程就等同于栈帧进栈出栈的过程。\n2. **特点**：线程私有的，生命周期和线程相同。栈是一个后进先出(**LIFO**)的数据结构，每次方法调用时，一个新的栈帧创建并被压栈到栈顶， 当方法正常返回或者抛出未捕获的异常时，栈帧就会出栈。除了栈帧的压栈和出栈，栈不能被直接操作。 在JVM中，若线程请求栈的深度 超过了虚拟机允许的最大深度 ，则会抛出StackOverflowError异常；当栈进行动态扩展，但 无法申请到相应内存空间（此时，线程请求的栈深度未超过虚拟机允许的最大深度）时，则会抛出OutOfMemoryError异常。\n3. `局部变量表`：存放了编译期间可以知道大小的各种类型变量，它所需要的内存空间大小在编译期间就已经分配，当一个方法被调用时，栈帧进入虚拟机栈，在运行期间，局部变量表大小是不会变化的。\n4. `栈帧(Frame)`：***栈帧只存储指向堆中对象或数组的引用 ***，包含`局部变量数组`、`返回值`、`操作数栈`、`类当前方法运行时常量池引用`：  \n    > `局部变量数组`：包含了方法执行过程中所有变量，包括this引用、所有方法参数、其他局部变量。对于类方法（也就是静态方法），方法参数从下标 0 开始，对于对象方法，位置0保留为 this。（boolean、byte、char、long、short、int、float、double、reference、returnAddress均为局部变量，除了 long 和 double 类型以外，所有的变量类型都占用局部变量数组的一个位置。long 和 double 需要占用局部变量数组两个连续的位置，因为它们是 64 位双精度，其它类型都是 32 位单精度。）\n    > `操作数栈`：在执行字节码指令过程中被用到，这种方式类似于原生**CPU寄存器**。大部分JVM字节码把时间花费在操作数栈的操作上：***入栈 ***、***出栈 *** 、***复制 *** 、***交换 ***、***产生消费变量 ***的操作。因此，局部变量数组和操作数栈之间的交换变量指令操作通过字节码频繁执行。比如，一个简单的变量初始化语句将产生两条跟操作数栈交互的字节码。\n    > 关于局部变量数组、操作数栈和运行时常量池之间交互的详细信息，可以在类文件结构部分找到。\n    \n    \n----------------------\n\n#### 四、本地方法栈(Native Method Stack) \n1. **作用**：Java虚拟机在实现时，可以根据自身需求，确定是否实现本地方法栈。在实现上，JVM可能会使用到传统的栈（通常称之为“C Stacks”）来支持 native 方法（指使用 Java 以外的其他语言编写的方法）的执行，这个栈就是本地方法栈。当JVM支持本地方法栈时，这个栈会在线程创建时按照线程分配。 在JVM中，本地方法栈可能发生的异常情况也分为Stack OverflowError和OutOfMemoryError异常，出错原因和虚拟机栈相似，此处不再赘述。\n2. **特点**：Java 虚拟机规范允许本地方法栈被实现成固定大小的或者是根据计算动态扩展和收缩的。本地方法栈则是为虚拟机使用到的Native方法服务.\n\n\n-------------------\n#### 五、程序计数器(Program Counter Register)\n* 程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n* ***在任意时刻，一个Java虚拟机线程只会执行一个方法，而 PC Java 虚拟机允许多条线程同时执行。因此，每一条 Java虚拟机线程都有自己的 PC 寄存器 ，他们是相互独立的。每一条 Java虚拟机线程都有自己的PC 寄存器，他们是相互独立的。 ***\n* 我们称正在被线程执行的方法称为该线程的当前方法（Current Method）。如果这个方法不是 native 的，那 PC 寄存器就保存 Java 虚拟机正在执行的字节码指令的地址，如果该方法是 native 的，那 PC 寄存器的值是 undefined。\n* 由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。\n* 如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）。\n\n\n\n","source":"_posts/JVM/jvm2.md","raw":"---\ntitle: JVM内存结构(2)\ntags: [JVM]\ncopyright: true\ndate: 2016-04-24 20:00:00\nupdated: 2016-04-24 20:29:00\ncategories: JVM\n---\n### JVM内存结构（运行时数据区）\n该文承接**[JVM内存结构简介(1)](http://edgeowner.com/2016/04/19/jvm/)**博文主要介绍所有`线程共享的区域`(***方法区 ***和***堆***))，本文简单介绍剩余JVM的是三个区域：`Java栈(Java Stack)`、`本地方法栈(Native Method Stack)`、`程序计数器(Program Counter Register)`。\n\n<!-- more -->\n--------------------\n#### 三、Java虚拟机栈(Java Virtual Machine Stacks) \n1. **作用**：描述的就是Java方法执行的内存模型。每个方法被执行的时候都会同时创建一个栈帧(Stack Frame)用于存储`局部变量表`、`操作栈`、`动态链接`、`方法出口`等信息。每个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈道出栈的过程。一个方法的执行过程就等同于栈帧进栈出栈的过程。\n2. **特点**：线程私有的，生命周期和线程相同。栈是一个后进先出(**LIFO**)的数据结构，每次方法调用时，一个新的栈帧创建并被压栈到栈顶， 当方法正常返回或者抛出未捕获的异常时，栈帧就会出栈。除了栈帧的压栈和出栈，栈不能被直接操作。 在JVM中，若线程请求栈的深度 超过了虚拟机允许的最大深度 ，则会抛出StackOverflowError异常；当栈进行动态扩展，但 无法申请到相应内存空间（此时，线程请求的栈深度未超过虚拟机允许的最大深度）时，则会抛出OutOfMemoryError异常。\n3. `局部变量表`：存放了编译期间可以知道大小的各种类型变量，它所需要的内存空间大小在编译期间就已经分配，当一个方法被调用时，栈帧进入虚拟机栈，在运行期间，局部变量表大小是不会变化的。\n4. `栈帧(Frame)`：***栈帧只存储指向堆中对象或数组的引用 ***，包含`局部变量数组`、`返回值`、`操作数栈`、`类当前方法运行时常量池引用`：  \n    > `局部变量数组`：包含了方法执行过程中所有变量，包括this引用、所有方法参数、其他局部变量。对于类方法（也就是静态方法），方法参数从下标 0 开始，对于对象方法，位置0保留为 this。（boolean、byte、char、long、short、int、float、double、reference、returnAddress均为局部变量，除了 long 和 double 类型以外，所有的变量类型都占用局部变量数组的一个位置。long 和 double 需要占用局部变量数组两个连续的位置，因为它们是 64 位双精度，其它类型都是 32 位单精度。）\n    > `操作数栈`：在执行字节码指令过程中被用到，这种方式类似于原生**CPU寄存器**。大部分JVM字节码把时间花费在操作数栈的操作上：***入栈 ***、***出栈 *** 、***复制 *** 、***交换 ***、***产生消费变量 ***的操作。因此，局部变量数组和操作数栈之间的交换变量指令操作通过字节码频繁执行。比如，一个简单的变量初始化语句将产生两条跟操作数栈交互的字节码。\n    > 关于局部变量数组、操作数栈和运行时常量池之间交互的详细信息，可以在类文件结构部分找到。\n    \n    \n----------------------\n\n#### 四、本地方法栈(Native Method Stack) \n1. **作用**：Java虚拟机在实现时，可以根据自身需求，确定是否实现本地方法栈。在实现上，JVM可能会使用到传统的栈（通常称之为“C Stacks”）来支持 native 方法（指使用 Java 以外的其他语言编写的方法）的执行，这个栈就是本地方法栈。当JVM支持本地方法栈时，这个栈会在线程创建时按照线程分配。 在JVM中，本地方法栈可能发生的异常情况也分为Stack OverflowError和OutOfMemoryError异常，出错原因和虚拟机栈相似，此处不再赘述。\n2. **特点**：Java 虚拟机规范允许本地方法栈被实现成固定大小的或者是根据计算动态扩展和收缩的。本地方法栈则是为虚拟机使用到的Native方法服务.\n\n\n-------------------\n#### 五、程序计数器(Program Counter Register)\n* 程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n* ***在任意时刻，一个Java虚拟机线程只会执行一个方法，而 PC Java 虚拟机允许多条线程同时执行。因此，每一条 Java虚拟机线程都有自己的 PC 寄存器 ，他们是相互独立的。每一条 Java虚拟机线程都有自己的PC 寄存器，他们是相互独立的。 ***\n* 我们称正在被线程执行的方法称为该线程的当前方法（Current Method）。如果这个方法不是 native 的，那 PC 寄存器就保存 Java 虚拟机正在执行的字节码指令的地址，如果该方法是 native 的，那 PC 寄存器的值是 undefined。\n* 由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。\n* 如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）。\n\n\n\n","slug":"JVM/jvm2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmf000r9l8ivpe24yjr","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"JVM内存结构（运行时数据区）\"><a href=\"#JVM内存结构（运行时数据区）\" class=\"headerlink\" title=\"JVM内存结构（运行时数据区）\"></a>JVM内存结构（运行时数据区）</h3><p>该文承接<strong><a href=\"http://edgeowner.com/2016/04/19/jvm/\">JVM内存结构简介(1)</a></strong>博文主要介绍所有<code>线程共享的区域</code>(<strong><em>方法区 </em></strong>和<strong><em>堆</em></strong>))，本文简单介绍剩余JVM的是三个区域：<code>Java栈(Java Stack)</code>、<code>本地方法栈(Native Method Stack)</code>、<code>程序计数器(Program Counter Register)</code>。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h4 id=\"三、Java虚拟机栈-Java-Virtual-Machine-Stacks\"><a href=\"#三、Java虚拟机栈-Java-Virtual-Machine-Stacks\" class=\"headerlink\" title=\"三、Java虚拟机栈(Java Virtual Machine Stacks)\"></a>三、Java虚拟机栈(Java Virtual Machine Stacks)</h4><ol>\n<li><strong>作用</strong>：描述的就是Java方法执行的内存模型。每个方法被执行的时候都会同时创建一个栈帧(Stack Frame)用于存储<code>局部变量表</code>、<code>操作栈</code>、<code>动态链接</code>、<code>方法出口</code>等信息。每个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈道出栈的过程。一个方法的执行过程就等同于栈帧进栈出栈的过程。</li>\n<li><strong>特点</strong>：线程私有的，生命周期和线程相同。栈是一个后进先出(<strong>LIFO</strong>)的数据结构，每次方法调用时，一个新的栈帧创建并被压栈到栈顶， 当方法正常返回或者抛出未捕获的异常时，栈帧就会出栈。除了栈帧的压栈和出栈，栈不能被直接操作。 在JVM中，若线程请求栈的深度 超过了虚拟机允许的最大深度 ，则会抛出StackOverflowError异常；当栈进行动态扩展，但 无法申请到相应内存空间（此时，线程请求的栈深度未超过虚拟机允许的最大深度）时，则会抛出OutOfMemoryError异常。</li>\n<li><code>局部变量表</code>：存放了编译期间可以知道大小的各种类型变量，它所需要的内存空间大小在编译期间就已经分配，当一个方法被调用时，栈帧进入虚拟机栈，在运行期间，局部变量表大小是不会变化的。</li>\n<li><code>栈帧(Frame)</code>：<strong><em>栈帧只存储指向堆中对象或数组的引用 </em></strong>，包含<code>局部变量数组</code>、<code>返回值</code>、<code>操作数栈</code>、<code>类当前方法运行时常量池引用</code>：  <blockquote>\n<p><code>局部变量数组</code>：包含了方法执行过程中所有变量，包括this引用、所有方法参数、其他局部变量。对于类方法（也就是静态方法），方法参数从下标 0 开始，对于对象方法，位置0保留为 this。（boolean、byte、char、long、short、int、float、double、reference、returnAddress均为局部变量，除了 long 和 double 类型以外，所有的变量类型都占用局部变量数组的一个位置。long 和 double 需要占用局部变量数组两个连续的位置，因为它们是 64 位双精度，其它类型都是 32 位单精度。）<br><code>操作数栈</code>：在执行字节码指令过程中被用到，这种方式类似于原生<strong>CPU寄存器</strong>。大部分JVM字节码把时间花费在操作数栈的操作上：<strong><em>入栈 </em></strong>、<strong><em>出栈 </em></strong> 、<strong><em>复制 </em></strong> 、<strong><em>交换 </em></strong>、<strong><em>产生消费变量 </em></strong>的操作。因此，局部变量数组和操作数栈之间的交换变量指令操作通过字节码频繁执行。比如，一个简单的变量初始化语句将产生两条跟操作数栈交互的字节码。<br>关于局部变量数组、操作数栈和运行时常量池之间交互的详细信息，可以在类文件结构部分找到。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h4 id=\"四、本地方法栈-Native-Method-Stack\"><a href=\"#四、本地方法栈-Native-Method-Stack\" class=\"headerlink\" title=\"四、本地方法栈(Native Method Stack)\"></a>四、本地方法栈(Native Method Stack)</h4><ol>\n<li><strong>作用</strong>：Java虚拟机在实现时，可以根据自身需求，确定是否实现本地方法栈。在实现上，JVM可能会使用到传统的栈（通常称之为“C Stacks”）来支持 native 方法（指使用 Java 以外的其他语言编写的方法）的执行，这个栈就是本地方法栈。当JVM支持本地方法栈时，这个栈会在线程创建时按照线程分配。 在JVM中，本地方法栈可能发生的异常情况也分为Stack OverflowError和OutOfMemoryError异常，出错原因和虚拟机栈相似，此处不再赘述。</li>\n<li><strong>特点</strong>：Java 虚拟机规范允许本地方法栈被实现成固定大小的或者是根据计算动态扩展和收缩的。本地方法栈则是为虚拟机使用到的Native方法服务.</li>\n</ol>\n<hr>\n<h4 id=\"五、程序计数器-Program-Counter-Register\"><a href=\"#五、程序计数器-Program-Counter-Register\" class=\"headerlink\" title=\"五、程序计数器(Program Counter Register)\"></a>五、程序计数器(Program Counter Register)</h4><ul>\n<li>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</li>\n<li><strong><em>在任意时刻，一个Java虚拟机线程只会执行一个方法，而 PC Java 虚拟机允许多条线程同时执行。因此，每一条 Java虚拟机线程都有自己的 PC 寄存器 ，他们是相互独立的。每一条 Java虚拟机线程都有自己的PC 寄存器，他们是相互独立的。 </em></strong></li>\n<li>我们称正在被线程执行的方法称为该线程的当前方法（Current Method）。如果这个方法不是 native 的，那 PC 寄存器就保存 Java 虚拟机正在执行的字节码指令的地址，如果该方法是 native 的，那 PC 寄存器的值是 undefined。</li>\n<li>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</li>\n<li>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"JVM内存结构（运行时数据区）\"><a href=\"#JVM内存结构（运行时数据区）\" class=\"headerlink\" title=\"JVM内存结构（运行时数据区）\"></a>JVM内存结构（运行时数据区）</h3><p>该文承接<strong><a href=\"http://edgeowner.com/2016/04/19/jvm/\">JVM内存结构简介(1)</a></strong>博文主要介绍所有<code>线程共享的区域</code>(<strong><em>方法区 </em></strong>和<strong><em>堆</em></strong>))，本文简单介绍剩余JVM的是三个区域：<code>Java栈(Java Stack)</code>、<code>本地方法栈(Native Method Stack)</code>、<code>程序计数器(Program Counter Register)</code>。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","more":"<h4 id=\"三、Java虚拟机栈-Java-Virtual-Machine-Stacks\"><a href=\"#三、Java虚拟机栈-Java-Virtual-Machine-Stacks\" class=\"headerlink\" title=\"三、Java虚拟机栈(Java Virtual Machine Stacks)\"></a>三、Java虚拟机栈(Java Virtual Machine Stacks)</h4><ol>\n<li><strong>作用</strong>：描述的就是Java方法执行的内存模型。每个方法被执行的时候都会同时创建一个栈帧(Stack Frame)用于存储<code>局部变量表</code>、<code>操作栈</code>、<code>动态链接</code>、<code>方法出口</code>等信息。每个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈道出栈的过程。一个方法的执行过程就等同于栈帧进栈出栈的过程。</li>\n<li><strong>特点</strong>：线程私有的，生命周期和线程相同。栈是一个后进先出(<strong>LIFO</strong>)的数据结构，每次方法调用时，一个新的栈帧创建并被压栈到栈顶， 当方法正常返回或者抛出未捕获的异常时，栈帧就会出栈。除了栈帧的压栈和出栈，栈不能被直接操作。 在JVM中，若线程请求栈的深度 超过了虚拟机允许的最大深度 ，则会抛出StackOverflowError异常；当栈进行动态扩展，但 无法申请到相应内存空间（此时，线程请求的栈深度未超过虚拟机允许的最大深度）时，则会抛出OutOfMemoryError异常。</li>\n<li><code>局部变量表</code>：存放了编译期间可以知道大小的各种类型变量，它所需要的内存空间大小在编译期间就已经分配，当一个方法被调用时，栈帧进入虚拟机栈，在运行期间，局部变量表大小是不会变化的。</li>\n<li><code>栈帧(Frame)</code>：<strong><em>栈帧只存储指向堆中对象或数组的引用 </em></strong>，包含<code>局部变量数组</code>、<code>返回值</code>、<code>操作数栈</code>、<code>类当前方法运行时常量池引用</code>：  <blockquote>\n<p><code>局部变量数组</code>：包含了方法执行过程中所有变量，包括this引用、所有方法参数、其他局部变量。对于类方法（也就是静态方法），方法参数从下标 0 开始，对于对象方法，位置0保留为 this。（boolean、byte、char、long、short、int、float、double、reference、returnAddress均为局部变量，除了 long 和 double 类型以外，所有的变量类型都占用局部变量数组的一个位置。long 和 double 需要占用局部变量数组两个连续的位置，因为它们是 64 位双精度，其它类型都是 32 位单精度。）<br><code>操作数栈</code>：在执行字节码指令过程中被用到，这种方式类似于原生<strong>CPU寄存器</strong>。大部分JVM字节码把时间花费在操作数栈的操作上：<strong><em>入栈 </em></strong>、<strong><em>出栈 </em></strong> 、<strong><em>复制 </em></strong> 、<strong><em>交换 </em></strong>、<strong><em>产生消费变量 </em></strong>的操作。因此，局部变量数组和操作数栈之间的交换变量指令操作通过字节码频繁执行。比如，一个简单的变量初始化语句将产生两条跟操作数栈交互的字节码。<br>关于局部变量数组、操作数栈和运行时常量池之间交互的详细信息，可以在类文件结构部分找到。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<h4 id=\"四、本地方法栈-Native-Method-Stack\"><a href=\"#四、本地方法栈-Native-Method-Stack\" class=\"headerlink\" title=\"四、本地方法栈(Native Method Stack)\"></a>四、本地方法栈(Native Method Stack)</h4><ol>\n<li><strong>作用</strong>：Java虚拟机在实现时，可以根据自身需求，确定是否实现本地方法栈。在实现上，JVM可能会使用到传统的栈（通常称之为“C Stacks”）来支持 native 方法（指使用 Java 以外的其他语言编写的方法）的执行，这个栈就是本地方法栈。当JVM支持本地方法栈时，这个栈会在线程创建时按照线程分配。 在JVM中，本地方法栈可能发生的异常情况也分为Stack OverflowError和OutOfMemoryError异常，出错原因和虚拟机栈相似，此处不再赘述。</li>\n<li><strong>特点</strong>：Java 虚拟机规范允许本地方法栈被实现成固定大小的或者是根据计算动态扩展和收缩的。本地方法栈则是为虚拟机使用到的Native方法服务.</li>\n</ol>\n<hr>\n<h4 id=\"五、程序计数器-Program-Counter-Register\"><a href=\"#五、程序计数器-Program-Counter-Register\" class=\"headerlink\" title=\"五、程序计数器(Program Counter Register)\"></a>五、程序计数器(Program Counter Register)</h4><ul>\n<li>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</li>\n<li><strong><em>在任意时刻，一个Java虚拟机线程只会执行一个方法，而 PC Java 虚拟机允许多条线程同时执行。因此，每一条 Java虚拟机线程都有自己的 PC 寄存器 ，他们是相互独立的。每一条 Java虚拟机线程都有自己的PC 寄存器，他们是相互独立的。 </em></strong></li>\n<li>我们称正在被线程执行的方法称为该线程的当前方法（Current Method）。如果这个方法不是 native 的，那 PC 寄存器就保存 Java 虚拟机正在执行的字节码指令的地址，如果该方法是 native 的，那 PC 寄存器的值是 undefined。</li>\n<li>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</li>\n<li>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）。</li>\n</ul>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sun Apr 24 2016 20:29:00 GMT+0800 (CST)","title":"JVM内存结构(2)","path":"2016/04/24/JVM/jvm2/","eyeCatchImage":null,"excerpt":"<h3 id=\"JVM内存结构（运行时数据区）\"><a href=\"#JVM内存结构（运行时数据区）\" class=\"headerlink\" title=\"JVM内存结构（运行时数据区）\"></a>JVM内存结构（运行时数据区）</h3><p>该文承接<strong><a href=\"http://edgeowner.com/2016/04/19/jvm/\">JVM内存结构简介(1)</a></strong>博文主要介绍所有<code>线程共享的区域</code>(<strong><em>方法区 </em></strong>和<strong><em>堆</em></strong>))，本文简单介绍剩余JVM的是三个区域：<code>Java栈(Java Stack)</code>、<code>本地方法栈(Native Method Stack)</code>、<code>程序计数器(Program Counter Register)</code>。</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","date":"2016-04-24T12:00:00.000Z","pv":0,"totalPV":0,"categories":"JVM","tags":["JVM"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JavaCore（1）","date":"2015-04-13T11:06:43.000Z","updated":"2015-04-14T12:29:00.000Z","copyright":true,"_content":"## Java核心 \n\n#### Java基本语法： \n  \n#### Java类和对象： \n  \n#### Java集合：  \n\n#### Java泛型：  \n\n#### Java注解： \n \n#### Java反射： \n<!-- more -->\n\n\n\n\n","source":"_posts/JavaCore/Java-Core-1.md","raw":"---\ntitle: JavaCore（1） \ndate: 2015-04-13 19:06:43\nupdated: 2015-04-14 20:29:00\ncategories: Java\ntags: [java, ]\ncopyright: true\n---\n## Java核心 \n\n#### Java基本语法： \n  \n#### Java类和对象： \n  \n#### Java集合：  \n\n#### Java泛型：  \n\n#### Java注解： \n \n#### Java反射： \n<!-- more -->\n\n\n\n\n","slug":"JavaCore/Java-Core-1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmg000t9l8ipqzh3w7k","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4><a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4>","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Apr 14 2015 20:29:00 GMT+0800 (CST)","title":"JavaCore（1）","path":"2015/04/13/JavaCore/Java-Core-1/","eyeCatchImage":null,"excerpt":"<h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4>","date":"2015-04-13T11:06:43.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JavaCore（1）","date":"2015-04-13T11:06:43.000Z","updated":"2015-04-14T12:29:00.000Z","copyright":true,"_content":"## Java核心 \n\n#### Java基本语法： \n  \n#### Java类和对象： \n  \n#### Java集合：  \n\n#### Java泛型：  \n\n#### Java注解： \n \n#### Java反射： \n<!-- more -->\n\n\n\n\n","source":"_posts/JavaCore/Java-Core-2.md","raw":"---\ntitle: JavaCore（1） \ndate: 2015-04-13 19:06:43\nupdated: 2015-04-14 20:29:00\ncategories: Java\ntags: [java, ]\ncopyright: true\n---\n## Java核心 \n\n#### Java基本语法： \n  \n#### Java类和对象： \n  \n#### Java集合：  \n\n#### Java泛型：  \n\n#### Java注解： \n \n#### Java反射： \n<!-- more -->\n\n\n\n\n","slug":"JavaCore/Java-Core-2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmh000x9l8ig381pzk4","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4><a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4>","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Apr 14 2015 20:29:00 GMT+0800 (CST)","title":"JavaCore（1）","path":"2015/04/13/JavaCore/Java-Core-2/","eyeCatchImage":null,"excerpt":"<h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4>","date":"2015-04-13T11:06:43.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JavaCore（1）","date":"2015-04-13T11:06:43.000Z","updated":"2015-04-14T12:29:00.000Z","copyright":true,"_content":"## Java核心 \n\n#### Java基本语法： \n  \n#### Java类和对象： \n  \n#### Java集合：  \n\n#### Java泛型：  \n\n#### Java注解： \n \n#### Java反射： \n<!-- more -->\n\n\n\n\n","source":"_posts/JavaCore/Java-Core-3.md","raw":"---\ntitle: JavaCore（1） \ndate: 2015-04-13 19:06:43\nupdated: 2015-04-14 20:29:00\ncategories: Java\ntags: [java, ]\ncopyright: true\n---\n## Java核心 \n\n#### Java基本语法： \n  \n#### Java类和对象： \n  \n#### Java集合：  \n\n#### Java泛型：  \n\n#### Java注解： \n \n#### Java反射： \n<!-- more -->\n\n\n\n\n","slug":"JavaCore/Java-Core-3","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmi000y9l8iacmp9w1w","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4><a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4>","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Apr 14 2015 20:29:00 GMT+0800 (CST)","title":"JavaCore（1）","path":"2015/04/13/JavaCore/Java-Core-3/","eyeCatchImage":null,"excerpt":"<h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4>","date":"2015-04-13T11:06:43.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"JavaCore（1）","date":"2015-04-13T11:06:43.000Z","updated":"2015-04-14T12:29:00.000Z","copyright":true,"_content":"## Java核心 \n\n#### Java基本语法： \n  \n#### Java类和对象： \n  \n#### Java集合：  \n\n#### Java泛型：  \n\n#### Java注解： \n \n#### Java反射： \n<!-- more -->\n\n\n\n\n","source":"_posts/JavaCore/Java-Core-4.md","raw":"---\ntitle: JavaCore（1） \ndate: 2015-04-13 19:06:43\nupdated: 2015-04-14 20:29:00\ncategories: Java\ntags: [java, ]\ncopyright: true\n---\n## Java核心 \n\n#### Java基本语法： \n  \n#### Java类和对象： \n  \n#### Java集合：  \n\n#### Java泛型：  \n\n#### Java注解： \n \n#### Java反射： \n<!-- more -->\n\n\n\n\n","slug":"JavaCore/Java-Core-4","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmj00129l8iz52k1032","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4><a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4>","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Apr 14 2015 20:29:00 GMT+0800 (CST)","title":"JavaCore（1）","path":"2015/04/13/JavaCore/Java-Core-4/","eyeCatchImage":null,"excerpt":"<h2 id=\"Java核心\"><a href=\"#Java核心\" class=\"headerlink\" title=\"Java核心\"></a>Java核心</h2><h4 id=\"Java基本语法：\"><a href=\"#Java基本语法：\" class=\"headerlink\" title=\"Java基本语法：\"></a>Java基本语法：</h4><h4 id=\"Java类和对象：\"><a href=\"#Java类和对象：\" class=\"headerlink\" title=\"Java类和对象：\"></a>Java类和对象：</h4><h4 id=\"Java集合：\"><a href=\"#Java集合：\" class=\"headerlink\" title=\"Java集合：\"></a>Java集合：</h4><h4 id=\"Java泛型：\"><a href=\"#Java泛型：\" class=\"headerlink\" title=\"Java泛型：\"></a>Java泛型：</h4><h4 id=\"Java注解：\"><a href=\"#Java注解：\" class=\"headerlink\" title=\"Java注解：\"></a>Java注解：</h4><h4 id=\"Java反射：\"><a href=\"#Java反射：\" class=\"headerlink\" title=\"Java反射：\"></a>Java反射：</h4>","date":"2015-04-13T11:06:43.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["java"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ThreadPoolExecutor 参数详解","copyright":true,"date":"2016-04-21T01:15:31.000Z","updated":"2016-04-21T12:17:23.000Z","mathjax":true,"_content":"\n\n### ThreadPoolExecutor类介绍\n&emsp;&emsp; \n\n\n","source":"_posts/JavaMultiThread/ThreadPoolExecutor.md","raw":"---\ntitle: ThreadPoolExecutor 参数详解\ntags: [多线程, 线程池]\ncopyright: true\ndate: 2016-04-21 9:15:31\nupdated: 2016-04-21 20:17:23\ncategories: Java多线程\nmathjax: true \n---\n\n\n### ThreadPoolExecutor类介绍\n&emsp;&emsp; \n\n\n","slug":"JavaMultiThread/ThreadPoolExecutor","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmm00149l8icjewmjbn","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"ThreadPoolExecutor类介绍\"><a href=\"#ThreadPoolExecutor类介绍\" class=\"headerlink\" title=\"ThreadPoolExecutor类介绍\"></a>ThreadPoolExecutor类介绍</h3><p>&emsp;&emsp; </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ThreadPoolExecutor类介绍\"><a href=\"#ThreadPoolExecutor类介绍\" class=\"headerlink\" title=\"ThreadPoolExecutor类介绍\"></a>ThreadPoolExecutor类介绍</h3><p>&emsp;&emsp; </p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Apr 21 2016 20:17:23 GMT+0800 (CST)","title":"ThreadPoolExecutor 参数详解","path":"2016/04/21/JavaMultiThread/ThreadPoolExecutor/","eyeCatchImage":null,"excerpt":null,"date":"2016-04-21T01:15:31.000Z","pv":0,"totalPV":0,"categories":"Java多线程","tags":["多线程","线程池"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"线程池介绍","copyright":true,"date":"2016-04-21T12:15:31.000Z","updated":"2016-04-21T13:17:23.000Z","mathjax":true,"_content":"\n-------\n#### 前言\n&emsp;&emsp;很多人可能已经很熟悉操作系统中的多任务：就是同一时刻运行多个程序的能力。\n&emsp;&emsp;多线程程序在较低层次上扩展了多任务的概念：一个程序同时执行多个任务。通常每一个任务称为一个线程，它是线程控制的简称。可以同时运行一个以上线程的程序成为多线程程序。\n&emsp;&emsp;<font color=#EE4000>线程和进程的区别</font>：\n1. 多个进程的内部数据和状态都是完全独立的，而多线程是共享一块内存空间和一组系统资源，有可能互相影响。　　\n2. 线程本身的数据通常只有寄存器数据，以及一个程序执行时使用的堆栈，所以线程的切换负担比进程切换的负担要小。多线程程序比多进程程序需要更少的管理费用。　　\n3. 进程是重量级的任务，需要分配给它们独立的地址空间，进程间通信是昂贵和受限的，进程间的转换也是很需要花费的。而线程是轻量级的选手，它们共享相同的地址空间并且共同分享同一个进程，线程间的通信是便宜的，线程间的转换也是低成本的。\n    \n-------\n\n<!--more-->\n\n#### 多线程技术背景\n&emsp;&emsp;面向对象编程，创建和销毁对象是很浪费时间，因为创建一个对象要获取内存资源或者其它更多资源。在Java中亦是如此，虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。\n&emsp;&emsp;为了提高服务程序的效率，尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁。如何利用已有对象来服务就是一个需要解决的关键问题，其实这就是一些”池化资源”技术产生的原因。\n&emsp;&emsp;线程池为我们做的，就是线程创建之后为我们保留，当我们需要的时候直接拿来用，省去了重复创建销毁的过程。\n![线程](http://p5vswdxl9.bkt.clouddn.com/threadPool)\n\n-------\n\n#### 线程池的优点\n* 重用线程中的线程，减少因对象创建、销毁所带来的性能开销；\n* 能有效的控制线程的最大并发数，提高系统资源利用率，同时避免过多的资源竞争，避免堵塞；\n* 能够多线程进行简单的管理，使线程的使用简单、高效；\n\n-------\n\n#### 线程池的处理逻辑\n##### 线程池ThreadPoolExecutor构造函数\n```java\n//五个参数的构造函数\n public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue) {\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n             Executors.defaultThreadFactory(), defaultHandler);\n    }\n\n//六个参数的构造函数（1）\n  public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory) {\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n             threadFactory, defaultHandler);\n    }\n    \n    \n//六个参数的构造函数（2） \n public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              RejectedExecutionHandler handler) {\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n             Executors.defaultThreadFactory(), handler);\n    }\n    \n//七个参数的构造函数 \npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        if (corePoolSize < 0 ||\n            maximumPoolSize <= 0 ||\n            maximumPoolSize < corePoolSize ||\n            keepAliveTime < 0)\n            throw new IllegalArgumentException();\n        if (workQueue == null || threadFactory == null || handler == null)\n            throw new NullPointerException();\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }\n```\n\n##### 构造函数参数介绍\n1. **corePoolSize（核心线程， 该线程池中核心线程数最大值**：在创建完线程池之后，核心线程先不创建，在接到任务之后创建核心线程。并且会意一直存在于线程池中(即使这个线程什么多不做)，有任务要执行时，如果核心线程没有被占用，会优先用核心线程执行任务。数量一般情况下设置为CPU核数的二倍即可。\n2. **maximumPoolSize （该线程池中线程总数最大值）**：线程总数 $=$ 核心线程数 $+$ 非核心线程数。（非核心线程：简单理解，即核心线程都被占用，但还有任务要做，就创建非核心线程）\n3. **keepAliveTime（非核心线程闲置超时时长）**：这个参数可以理解为，任务少，但池中线程多，非核心线程不能白养着，超过这个时间不工作的就会被干掉，但是核心线程会保留。\n4. **TimeUnit（keepAliveTime的单位）**：  \n    TimeUnit是一个枚举类型，其包括:\n    NANOSECONDS ： 1微毫秒 = 1微秒 / 1000\n    MICROSECONDS ： 1微秒 = 1毫秒 / 1000\n    MILLISECONDS ： 1毫秒 = 1秒 /1000\n    SECONDS ： 秒\n    MINUTES ： 分\n    HOURS ： 小时\n    DAYS ： 天\n5. **BlockingQueue workQueue（线程池中的任务队列）**：默认情况下，任务进来之后先分配给核心线程执行，核心线程如果都被占用，并不会立刻开启非核心线程执行任务，而是将任务插入任务队列等待执行，核心线程会从任务队列取任务来执行，任务队列可以设置最大值，一旦插入的任务足够多，达到最大值，才会创建非核心线程执行任务。常见的workQueue有四种：\n    *  **SynchronousQueue**：这个队列接收到任务的时候，会直接提交给线程处理，而不保留它，如果所有线程都在工作怎么办？那就新建一个线程来处理这个任务！所以为了保证不出现<线程数达到了maximumPoolSize而不能新建线程>的错误，使用这个类型队列的时候，maximumPoolSize一般指定成Integer.MAX_VALUE，即无限大；\n    *  **LinkedBlockingQueue**：这个队列接收到任务的时候，如果当前已经创建的核心线程数小于线程池的核心线程数上限，则新建线程(核心线程)处理任务；如果当前已经创建的核心线程数等于核心线程数上限，则进入队列等待。由于这个队列没有最大值限制，即所有超过核心线程数的任务都将被添加到队列中，这也就导致了maximumPoolSize的设定失效，因为总线程数永远不会超过corePoolSize；\n    *  **ArrayBlockingQueue**：可以限定队列的长度，接收到任务的时候，如果没有达到corePoolSize的值，则新建线程(核心线程)执行任务，如果达到了，则入队等候，如果队列已满，则新建线程(非核心线程)执行任务，又如果总线程数到了maximumPoolSize，并且队列也满了，则发生错误，或是执行实现定义好的饱和策略\n    *  **DelayQueue**：队列内元素必须实现Delayed接口，这就意味着你传进去的任务必须先实现Delayed接口。这个队列接收到任务时，首先先入队，只有达到了指定的延时时间，才会执行任务；\n    \n6. **ThreadFactory threadFactory （创建线程的工厂）**：可以用线程工厂给每个创建出来的线程设置名字。一般情况下无须设置该参数。\n7. **RejectedExecutionHandler handler（饱和策略）**：这是当任务队列和线程池都满了时所采取的应对策略，默认是***AbordPolicy ***， 表示无法处理新任务，并抛出 RejectedExecutionException 异常。此外还有3种策略，它们分别如下：\n      *  **CallerRunsPolicy**：用调用者所在的线程来处理任务。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。     \n      *  **DiscardPolicy**：不能执行的任务，并将该任务删除。\n      *  **DiscardOldestPolicy**：丢弃队列最近的任务，并执行当前的任务。\n      *  接下来上图，相信结合图你能大彻大悟~![](http://p5vswdxl9.bkt.clouddn.com/thpool)\n    \n-------\n\n#### 线程池使用\njava为我们提供了4种线程池FixedThreadPool、CachedThreadPool、SingleThreadExecutor、ScheduledThreadPool，几乎可以满足我们大部分的需要。\n\n* ***FixedThreadPool ***可重用固定线程数的线程池，超出的线程会在队列中等待，在Executors类中我们可以找到创建方式：\n\n   ```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue<Runnable>());\n}\n    ```\n\n*  ***CachedThreadPool ***是一个根据需要创建线程的线程池。\n\n   ```java\npublic static ExecutorService newCachedThreadPool() {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>());\n }\n   ```\n   \n*   ***SingleThreadExecutor ***是使用单个线程工作的线程池。其创建源码如下：\n\n   ```java\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n   ```\n\n* *** ScheduledThreadPool ***是一个能实现定时和周期性任务的线程池，它的创建源码如下：\n  \n   ```java\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n        return new ScheduledThreadPoolExecutor(corePoolSize);\n}\n\n\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize, Integer.MAX_VALUE,\n              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,\n              new DelayedWorkQueue());\n}\n    ```\n\n-------\n\n#### 合理配置线程池的大小\n&emsp;&emsp;一般需要根据任务的类型来配置线程池大小：\n* 如果是CPU密集型任务（***线程CPU时间所占比例越高，需要越少线程，即CPU密集型任务。 *** ），就需要尽量压榨CPU，参考值可以设为 NCPU+1；\n* 如果是IO密集型任务（***线程等待时间所占比例越高，需要越多线程，即IO密集型任务 *** ），参考值可以设置为2*NCPU；\n* 具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整；\n* 最佳线程数目 = ((线程等待时间+线程CPU时间)/线程CPU时间)$*$CPU数目；\n* 比如平均每个线程CPU运行时间为0.5s，而线程等待时间（非CPU运行时间，比如IO）为1.5s，CPU核心数为8，那么根据上面这个公式估算得到：((0.5+1.5)/0.5)$*$8=32；\n* TODO\n\n\n[参考链接]()\n\n\n","source":"_posts/JavaMultiThread/thread-pool.md","raw":"---\ntitle: 线程池介绍\ntags: [多线程, 线程池]\ncopyright: true\ndate: 2016-04-21 20:15:31\nupdated: 2016-04-21 21:17:23\ncategories: Java多线程\nmathjax: true \n---\n\n-------\n#### 前言\n&emsp;&emsp;很多人可能已经很熟悉操作系统中的多任务：就是同一时刻运行多个程序的能力。\n&emsp;&emsp;多线程程序在较低层次上扩展了多任务的概念：一个程序同时执行多个任务。通常每一个任务称为一个线程，它是线程控制的简称。可以同时运行一个以上线程的程序成为多线程程序。\n&emsp;&emsp;<font color=#EE4000>线程和进程的区别</font>：\n1. 多个进程的内部数据和状态都是完全独立的，而多线程是共享一块内存空间和一组系统资源，有可能互相影响。　　\n2. 线程本身的数据通常只有寄存器数据，以及一个程序执行时使用的堆栈，所以线程的切换负担比进程切换的负担要小。多线程程序比多进程程序需要更少的管理费用。　　\n3. 进程是重量级的任务，需要分配给它们独立的地址空间，进程间通信是昂贵和受限的，进程间的转换也是很需要花费的。而线程是轻量级的选手，它们共享相同的地址空间并且共同分享同一个进程，线程间的通信是便宜的，线程间的转换也是低成本的。\n    \n-------\n\n<!--more-->\n\n#### 多线程技术背景\n&emsp;&emsp;面向对象编程，创建和销毁对象是很浪费时间，因为创建一个对象要获取内存资源或者其它更多资源。在Java中亦是如此，虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。\n&emsp;&emsp;为了提高服务程序的效率，尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁。如何利用已有对象来服务就是一个需要解决的关键问题，其实这就是一些”池化资源”技术产生的原因。\n&emsp;&emsp;线程池为我们做的，就是线程创建之后为我们保留，当我们需要的时候直接拿来用，省去了重复创建销毁的过程。\n![线程](http://p5vswdxl9.bkt.clouddn.com/threadPool)\n\n-------\n\n#### 线程池的优点\n* 重用线程中的线程，减少因对象创建、销毁所带来的性能开销；\n* 能有效的控制线程的最大并发数，提高系统资源利用率，同时避免过多的资源竞争，避免堵塞；\n* 能够多线程进行简单的管理，使线程的使用简单、高效；\n\n-------\n\n#### 线程池的处理逻辑\n##### 线程池ThreadPoolExecutor构造函数\n```java\n//五个参数的构造函数\n public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue) {\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n             Executors.defaultThreadFactory(), defaultHandler);\n    }\n\n//六个参数的构造函数（1）\n  public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory) {\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n             threadFactory, defaultHandler);\n    }\n    \n    \n//六个参数的构造函数（2） \n public ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              RejectedExecutionHandler handler) {\n        this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,\n             Executors.defaultThreadFactory(), handler);\n    }\n    \n//七个参数的构造函数 \npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler) {\n        if (corePoolSize < 0 ||\n            maximumPoolSize <= 0 ||\n            maximumPoolSize < corePoolSize ||\n            keepAliveTime < 0)\n            throw new IllegalArgumentException();\n        if (workQueue == null || threadFactory == null || handler == null)\n            throw new NullPointerException();\n        this.corePoolSize = corePoolSize;\n        this.maximumPoolSize = maximumPoolSize;\n        this.workQueue = workQueue;\n        this.keepAliveTime = unit.toNanos(keepAliveTime);\n        this.threadFactory = threadFactory;\n        this.handler = handler;\n    }\n```\n\n##### 构造函数参数介绍\n1. **corePoolSize（核心线程， 该线程池中核心线程数最大值**：在创建完线程池之后，核心线程先不创建，在接到任务之后创建核心线程。并且会意一直存在于线程池中(即使这个线程什么多不做)，有任务要执行时，如果核心线程没有被占用，会优先用核心线程执行任务。数量一般情况下设置为CPU核数的二倍即可。\n2. **maximumPoolSize （该线程池中线程总数最大值）**：线程总数 $=$ 核心线程数 $+$ 非核心线程数。（非核心线程：简单理解，即核心线程都被占用，但还有任务要做，就创建非核心线程）\n3. **keepAliveTime（非核心线程闲置超时时长）**：这个参数可以理解为，任务少，但池中线程多，非核心线程不能白养着，超过这个时间不工作的就会被干掉，但是核心线程会保留。\n4. **TimeUnit（keepAliveTime的单位）**：  \n    TimeUnit是一个枚举类型，其包括:\n    NANOSECONDS ： 1微毫秒 = 1微秒 / 1000\n    MICROSECONDS ： 1微秒 = 1毫秒 / 1000\n    MILLISECONDS ： 1毫秒 = 1秒 /1000\n    SECONDS ： 秒\n    MINUTES ： 分\n    HOURS ： 小时\n    DAYS ： 天\n5. **BlockingQueue workQueue（线程池中的任务队列）**：默认情况下，任务进来之后先分配给核心线程执行，核心线程如果都被占用，并不会立刻开启非核心线程执行任务，而是将任务插入任务队列等待执行，核心线程会从任务队列取任务来执行，任务队列可以设置最大值，一旦插入的任务足够多，达到最大值，才会创建非核心线程执行任务。常见的workQueue有四种：\n    *  **SynchronousQueue**：这个队列接收到任务的时候，会直接提交给线程处理，而不保留它，如果所有线程都在工作怎么办？那就新建一个线程来处理这个任务！所以为了保证不出现<线程数达到了maximumPoolSize而不能新建线程>的错误，使用这个类型队列的时候，maximumPoolSize一般指定成Integer.MAX_VALUE，即无限大；\n    *  **LinkedBlockingQueue**：这个队列接收到任务的时候，如果当前已经创建的核心线程数小于线程池的核心线程数上限，则新建线程(核心线程)处理任务；如果当前已经创建的核心线程数等于核心线程数上限，则进入队列等待。由于这个队列没有最大值限制，即所有超过核心线程数的任务都将被添加到队列中，这也就导致了maximumPoolSize的设定失效，因为总线程数永远不会超过corePoolSize；\n    *  **ArrayBlockingQueue**：可以限定队列的长度，接收到任务的时候，如果没有达到corePoolSize的值，则新建线程(核心线程)执行任务，如果达到了，则入队等候，如果队列已满，则新建线程(非核心线程)执行任务，又如果总线程数到了maximumPoolSize，并且队列也满了，则发生错误，或是执行实现定义好的饱和策略\n    *  **DelayQueue**：队列内元素必须实现Delayed接口，这就意味着你传进去的任务必须先实现Delayed接口。这个队列接收到任务时，首先先入队，只有达到了指定的延时时间，才会执行任务；\n    \n6. **ThreadFactory threadFactory （创建线程的工厂）**：可以用线程工厂给每个创建出来的线程设置名字。一般情况下无须设置该参数。\n7. **RejectedExecutionHandler handler（饱和策略）**：这是当任务队列和线程池都满了时所采取的应对策略，默认是***AbordPolicy ***， 表示无法处理新任务，并抛出 RejectedExecutionException 异常。此外还有3种策略，它们分别如下：\n      *  **CallerRunsPolicy**：用调用者所在的线程来处理任务。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。     \n      *  **DiscardPolicy**：不能执行的任务，并将该任务删除。\n      *  **DiscardOldestPolicy**：丢弃队列最近的任务，并执行当前的任务。\n      *  接下来上图，相信结合图你能大彻大悟~![](http://p5vswdxl9.bkt.clouddn.com/thpool)\n    \n-------\n\n#### 线程池使用\njava为我们提供了4种线程池FixedThreadPool、CachedThreadPool、SingleThreadExecutor、ScheduledThreadPool，几乎可以满足我们大部分的需要。\n\n* ***FixedThreadPool ***可重用固定线程数的线程池，超出的线程会在队列中等待，在Executors类中我们可以找到创建方式：\n\n   ```java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n        return new ThreadPoolExecutor(nThreads, nThreads,\n                                      0L, TimeUnit.MILLISECONDS,\n                                      new LinkedBlockingQueue<Runnable>());\n}\n    ```\n\n*  ***CachedThreadPool ***是一个根据需要创建线程的线程池。\n\n   ```java\npublic static ExecutorService newCachedThreadPool() {\n        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                      60L, TimeUnit.SECONDS,\n                                      new SynchronousQueue<Runnable>());\n }\n   ```\n   \n*   ***SingleThreadExecutor ***是使用单个线程工作的线程池。其创建源码如下：\n\n   ```java\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                                new LinkedBlockingQueue<Runnable>()));\n}\n   ```\n\n* *** ScheduledThreadPool ***是一个能实现定时和周期性任务的线程池，它的创建源码如下：\n  \n   ```java\npublic static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {\n        return new ScheduledThreadPoolExecutor(corePoolSize);\n}\n\n\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n        super(corePoolSize, Integer.MAX_VALUE,\n              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,\n              new DelayedWorkQueue());\n}\n    ```\n\n-------\n\n#### 合理配置线程池的大小\n&emsp;&emsp;一般需要根据任务的类型来配置线程池大小：\n* 如果是CPU密集型任务（***线程CPU时间所占比例越高，需要越少线程，即CPU密集型任务。 *** ），就需要尽量压榨CPU，参考值可以设为 NCPU+1；\n* 如果是IO密集型任务（***线程等待时间所占比例越高，需要越多线程，即IO密集型任务 *** ），参考值可以设置为2*NCPU；\n* 具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整；\n* 最佳线程数目 = ((线程等待时间+线程CPU时间)/线程CPU时间)$*$CPU数目；\n* 比如平均每个线程CPU运行时间为0.5s，而线程等待时间（非CPU运行时间，比如IO）为1.5s，CPU核心数为8，那么根据上面这个公式估算得到：((0.5+1.5)/0.5)$*$8=32；\n* TODO\n\n\n[参考链接]()\n\n\n","slug":"JavaMultiThread/thread-pool","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmn00189l8ie05vyqks","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><hr>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;很多人可能已经很熟悉操作系统中的多任务：就是同一时刻运行多个程序的能力。<br>&emsp;&emsp;多线程程序在较低层次上扩展了多任务的概念：一个程序同时执行多个任务。通常每一个任务称为一个线程，它是线程控制的简称。可以同时运行一个以上线程的程序成为多线程程序。<br>&emsp;&emsp;<font color=\"#EE4000\">线程和进程的区别</font>：</p>\n<ol>\n<li>多个进程的内部数据和状态都是完全独立的，而多线程是共享一块内存空间和一组系统资源，有可能互相影响。　　</li>\n<li>线程本身的数据通常只有寄存器数据，以及一个程序执行时使用的堆栈，所以线程的切换负担比进程切换的负担要小。多线程程序比多进程程序需要更少的管理费用。　　</li>\n<li>进程是重量级的任务，需要分配给它们独立的地址空间，进程间通信是昂贵和受限的，进程间的转换也是很需要花费的。而线程是轻量级的选手，它们共享相同的地址空间并且共同分享同一个进程，线程间的通信是便宜的，线程间的转换也是低成本的。</li>\n</ol>\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"多线程技术背景\"><a href=\"#多线程技术背景\" class=\"headerlink\" title=\"多线程技术背景\"></a>多线程技术背景</h4><p>&emsp;&emsp;面向对象编程，创建和销毁对象是很浪费时间，因为创建一个对象要获取内存资源或者其它更多资源。在Java中亦是如此，虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。<br>&emsp;&emsp;为了提高服务程序的效率，尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁。如何利用已有对象来服务就是一个需要解决的关键问题，其实这就是一些”池化资源”技术产生的原因。<br>&emsp;&emsp;线程池为我们做的，就是线程创建之后为我们保留，当我们需要的时候直接拿来用，省去了重复创建销毁的过程。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/threadPool\" alt=\"线程\"></p>\n<hr>\n<h4 id=\"线程池的优点\"><a href=\"#线程池的优点\" class=\"headerlink\" title=\"线程池的优点\"></a>线程池的优点</h4><ul>\n<li>重用线程中的线程，减少因对象创建、销毁所带来的性能开销；</li>\n<li>能有效的控制线程的最大并发数，提高系统资源利用率，同时避免过多的资源竞争，避免堵塞；</li>\n<li>能够多线程进行简单的管理，使线程的使用简单、高效；</li>\n</ul>\n<hr>\n<h4 id=\"线程池的处理逻辑\"><a href=\"#线程池的处理逻辑\" class=\"headerlink\" title=\"线程池的处理逻辑\"></a>线程池的处理逻辑</h4><h5 id=\"线程池ThreadPoolExecutor构造函数\"><a href=\"#线程池ThreadPoolExecutor构造函数\" class=\"headerlink\" title=\"线程池ThreadPoolExecutor构造函数\"></a>线程池ThreadPoolExecutor构造函数</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//五个参数的构造函数</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\">             Executors.defaultThreadFactory(), defaultHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//六个参数的构造函数（1）</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\">             threadFactory, defaultHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//六个参数的构造函数（2） </span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\">             Executors.defaultThreadFactory(), handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//七个参数的构造函数 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">            maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">            keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workQueue == <span class=\"keyword\">null</span> || threadFactory == <span class=\"keyword\">null</span> || handler == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"构造函数参数介绍\"><a href=\"#构造函数参数介绍\" class=\"headerlink\" title=\"构造函数参数介绍\"></a>构造函数参数介绍</h5><ol>\n<li><strong>corePoolSize（核心线程， 该线程池中核心线程数最大值</strong>：在创建完线程池之后，核心线程先不创建，在接到任务之后创建核心线程。并且会意一直存在于线程池中(即使这个线程什么多不做)，有任务要执行时，如果核心线程没有被占用，会优先用核心线程执行任务。数量一般情况下设置为CPU核数的二倍即可。</li>\n<li><strong>maximumPoolSize （该线程池中线程总数最大值）</strong>：线程总数 $=$ 核心线程数 $+$ 非核心线程数。（非核心线程：简单理解，即核心线程都被占用，但还有任务要做，就创建非核心线程）</li>\n<li><strong>keepAliveTime（非核心线程闲置超时时长）</strong>：这个参数可以理解为，任务少，但池中线程多，非核心线程不能白养着，超过这个时间不工作的就会被干掉，但是核心线程会保留。</li>\n<li><strong>TimeUnit（keepAliveTime的单位）</strong>：<br> TimeUnit是一个枚举类型，其包括:<br> NANOSECONDS ： 1微毫秒 = 1微秒 / 1000<br> MICROSECONDS ： 1微秒 = 1毫秒 / 1000<br> MILLISECONDS ： 1毫秒 = 1秒 /1000<br> SECONDS ： 秒<br> MINUTES ： 分<br> HOURS ： 小时<br> DAYS ： 天</li>\n<li><p><strong>BlockingQueue workQueue（线程池中的任务队列）</strong>：默认情况下，任务进来之后先分配给核心线程执行，核心线程如果都被占用，并不会立刻开启非核心线程执行任务，而是将任务插入任务队列等待执行，核心线程会从任务队列取任务来执行，任务队列可以设置最大值，一旦插入的任务足够多，达到最大值，才会创建非核心线程执行任务。常见的workQueue有四种：</p>\n<ul>\n<li><strong>SynchronousQueue</strong>：这个队列接收到任务的时候，会直接提交给线程处理，而不保留它，如果所有线程都在工作怎么办？那就新建一个线程来处理这个任务！所以为了保证不出现&lt;线程数达到了maximumPoolSize而不能新建线程&gt;的错误，使用这个类型队列的时候，maximumPoolSize一般指定成Integer.MAX_VALUE，即无限大；</li>\n<li><strong>LinkedBlockingQueue</strong>：这个队列接收到任务的时候，如果当前已经创建的核心线程数小于线程池的核心线程数上限，则新建线程(核心线程)处理任务；如果当前已经创建的核心线程数等于核心线程数上限，则进入队列等待。由于这个队列没有最大值限制，即所有超过核心线程数的任务都将被添加到队列中，这也就导致了maximumPoolSize的设定失效，因为总线程数永远不会超过corePoolSize；</li>\n<li><strong>ArrayBlockingQueue</strong>：可以限定队列的长度，接收到任务的时候，如果没有达到corePoolSize的值，则新建线程(核心线程)执行任务，如果达到了，则入队等候，如果队列已满，则新建线程(非核心线程)执行任务，又如果总线程数到了maximumPoolSize，并且队列也满了，则发生错误，或是执行实现定义好的饱和策略</li>\n<li><strong>DelayQueue</strong>：队列内元素必须实现Delayed接口，这就意味着你传进去的任务必须先实现Delayed接口。这个队列接收到任务时，首先先入队，只有达到了指定的延时时间，才会执行任务；</li>\n</ul>\n</li>\n<li><p><strong>ThreadFactory threadFactory （创建线程的工厂）</strong>：可以用线程工厂给每个创建出来的线程设置名字。一般情况下无须设置该参数。</p>\n</li>\n<li><strong>RejectedExecutionHandler handler（饱和策略）</strong>：这是当任务队列和线程池都满了时所采取的应对策略，默认是<strong><em>AbordPolicy </em></strong>， 表示无法处理新任务，并抛出 RejectedExecutionException 异常。此外还有3种策略，它们分别如下：<ul>\n<li><strong>CallerRunsPolicy</strong>：用调用者所在的线程来处理任务。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。     </li>\n<li><strong>DiscardPolicy</strong>：不能执行的任务，并将该任务删除。</li>\n<li><strong>DiscardOldestPolicy</strong>：丢弃队列最近的任务，并执行当前的任务。</li>\n<li>接下来上图，相信结合图你能大彻大悟~<img src=\"http://p5vswdxl9.bkt.clouddn.com/thpool\" alt=\"\"></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"线程池使用\"><a href=\"#线程池使用\" class=\"headerlink\" title=\"线程池使用\"></a>线程池使用</h4><p>java为我们提供了4种线程池FixedThreadPool、CachedThreadPool、SingleThreadExecutor、ScheduledThreadPool，几乎可以满足我们大部分的需要。</p>\n<ul>\n<li><p><strong><em>FixedThreadPool </em></strong>可重用固定线程数的线程池，超出的线程会在队列中等待，在Executors类中我们可以找到创建方式：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                      <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                      <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>CachedThreadPool </em></strong>是一个根据需要创建线程的线程池。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                      <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                      <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><strong><em>SingleThreadExecutor </em></strong>是使用单个线程工作的线程池。其创建源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em> ScheduledThreadPool </em></strong>是一个能实现定时和周期性任务的线程池，它的创建源码如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE,</span><br><span class=\"line\">              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span><br><span class=\"line\">              <span class=\"keyword\">new</span> DelayedWorkQueue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"合理配置线程池的大小\"><a href=\"#合理配置线程池的大小\" class=\"headerlink\" title=\"合理配置线程池的大小\"></a>合理配置线程池的大小</h4><p>&emsp;&emsp;一般需要根据任务的类型来配置线程池大小：</p>\n<ul>\n<li>如果是CPU密集型任务（<strong><em>线程CPU时间所占比例越高，需要越少线程，即CPU密集型任务。 </em></strong> ），就需要尽量压榨CPU，参考值可以设为 NCPU+1；</li>\n<li>如果是IO密集型任务（<strong><em>线程等待时间所占比例越高，需要越多线程，即IO密集型任务 </em></strong> ），参考值可以设置为2*NCPU；</li>\n<li>具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整；</li>\n<li>最佳线程数目 = ((线程等待时间+线程CPU时间)/线程CPU时间)$*$CPU数目；</li>\n<li>比如平均每个线程CPU运行时间为0.5s，而线程等待时间（非CPU运行时间，比如IO）为1.5s，CPU核心数为8，那么根据上面这个公式估算得到：((0.5+1.5)/0.5)$*$8=32；</li>\n<li>TODO</li>\n</ul>\n<p><a href=\"\">参考链接</a></p>\n","site":{"data":{}},"excerpt":"<hr>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;很多人可能已经很熟悉操作系统中的多任务：就是同一时刻运行多个程序的能力。<br>&emsp;&emsp;多线程程序在较低层次上扩展了多任务的概念：一个程序同时执行多个任务。通常每一个任务称为一个线程，它是线程控制的简称。可以同时运行一个以上线程的程序成为多线程程序。<br>&emsp;&emsp;<font color=\"#EE4000\">线程和进程的区别</font>：</p>\n<ol>\n<li>多个进程的内部数据和状态都是完全独立的，而多线程是共享一块内存空间和一组系统资源，有可能互相影响。　　</li>\n<li>线程本身的数据通常只有寄存器数据，以及一个程序执行时使用的堆栈，所以线程的切换负担比进程切换的负担要小。多线程程序比多进程程序需要更少的管理费用。　　</li>\n<li>进程是重量级的任务，需要分配给它们独立的地址空间，进程间通信是昂贵和受限的，进程间的转换也是很需要花费的。而线程是轻量级的选手，它们共享相同的地址空间并且共同分享同一个进程，线程间的通信是便宜的，线程间的转换也是低成本的。</li>\n</ol>\n<hr>","more":"<h4 id=\"多线程技术背景\"><a href=\"#多线程技术背景\" class=\"headerlink\" title=\"多线程技术背景\"></a>多线程技术背景</h4><p>&emsp;&emsp;面向对象编程，创建和销毁对象是很浪费时间，因为创建一个对象要获取内存资源或者其它更多资源。在Java中亦是如此，虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。<br>&emsp;&emsp;为了提高服务程序的效率，尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁。如何利用已有对象来服务就是一个需要解决的关键问题，其实这就是一些”池化资源”技术产生的原因。<br>&emsp;&emsp;线程池为我们做的，就是线程创建之后为我们保留，当我们需要的时候直接拿来用，省去了重复创建销毁的过程。<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/threadPool\" alt=\"线程\"></p>\n<hr>\n<h4 id=\"线程池的优点\"><a href=\"#线程池的优点\" class=\"headerlink\" title=\"线程池的优点\"></a>线程池的优点</h4><ul>\n<li>重用线程中的线程，减少因对象创建、销毁所带来的性能开销；</li>\n<li>能有效的控制线程的最大并发数，提高系统资源利用率，同时避免过多的资源竞争，避免堵塞；</li>\n<li>能够多线程进行简单的管理，使线程的使用简单、高效；</li>\n</ul>\n<hr>\n<h4 id=\"线程池的处理逻辑\"><a href=\"#线程池的处理逻辑\" class=\"headerlink\" title=\"线程池的处理逻辑\"></a>线程池的处理逻辑</h4><h5 id=\"线程池ThreadPoolExecutor构造函数\"><a href=\"#线程池ThreadPoolExecutor构造函数\" class=\"headerlink\" title=\"线程池ThreadPoolExecutor构造函数\"></a>线程池ThreadPoolExecutor构造函数</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//五个参数的构造函数</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\">             Executors.defaultThreadFactory(), defaultHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//六个参数的构造函数（1）</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\">             threadFactory, defaultHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//六个参数的构造函数（2） </span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class=\"line\">             Executors.defaultThreadFactory(), handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//七个参数的构造函数 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">int</span> maximumPoolSize,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              <span class=\"keyword\">long</span> keepAliveTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              TimeUnit unit,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              ThreadFactory threadFactory,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">            maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">            maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">            keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workQueue == <span class=\"keyword\">null</span> || threadFactory == <span class=\"keyword\">null</span> || handler == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NullPointerException();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.handler = handler;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"构造函数参数介绍\"><a href=\"#构造函数参数介绍\" class=\"headerlink\" title=\"构造函数参数介绍\"></a>构造函数参数介绍</h5><ol>\n<li><strong>corePoolSize（核心线程， 该线程池中核心线程数最大值</strong>：在创建完线程池之后，核心线程先不创建，在接到任务之后创建核心线程。并且会意一直存在于线程池中(即使这个线程什么多不做)，有任务要执行时，如果核心线程没有被占用，会优先用核心线程执行任务。数量一般情况下设置为CPU核数的二倍即可。</li>\n<li><strong>maximumPoolSize （该线程池中线程总数最大值）</strong>：线程总数 $=$ 核心线程数 $+$ 非核心线程数。（非核心线程：简单理解，即核心线程都被占用，但还有任务要做，就创建非核心线程）</li>\n<li><strong>keepAliveTime（非核心线程闲置超时时长）</strong>：这个参数可以理解为，任务少，但池中线程多，非核心线程不能白养着，超过这个时间不工作的就会被干掉，但是核心线程会保留。</li>\n<li><strong>TimeUnit（keepAliveTime的单位）</strong>：<br> TimeUnit是一个枚举类型，其包括:<br> NANOSECONDS ： 1微毫秒 = 1微秒 / 1000<br> MICROSECONDS ： 1微秒 = 1毫秒 / 1000<br> MILLISECONDS ： 1毫秒 = 1秒 /1000<br> SECONDS ： 秒<br> MINUTES ： 分<br> HOURS ： 小时<br> DAYS ： 天</li>\n<li><p><strong>BlockingQueue workQueue（线程池中的任务队列）</strong>：默认情况下，任务进来之后先分配给核心线程执行，核心线程如果都被占用，并不会立刻开启非核心线程执行任务，而是将任务插入任务队列等待执行，核心线程会从任务队列取任务来执行，任务队列可以设置最大值，一旦插入的任务足够多，达到最大值，才会创建非核心线程执行任务。常见的workQueue有四种：</p>\n<ul>\n<li><strong>SynchronousQueue</strong>：这个队列接收到任务的时候，会直接提交给线程处理，而不保留它，如果所有线程都在工作怎么办？那就新建一个线程来处理这个任务！所以为了保证不出现&lt;线程数达到了maximumPoolSize而不能新建线程&gt;的错误，使用这个类型队列的时候，maximumPoolSize一般指定成Integer.MAX_VALUE，即无限大；</li>\n<li><strong>LinkedBlockingQueue</strong>：这个队列接收到任务的时候，如果当前已经创建的核心线程数小于线程池的核心线程数上限，则新建线程(核心线程)处理任务；如果当前已经创建的核心线程数等于核心线程数上限，则进入队列等待。由于这个队列没有最大值限制，即所有超过核心线程数的任务都将被添加到队列中，这也就导致了maximumPoolSize的设定失效，因为总线程数永远不会超过corePoolSize；</li>\n<li><strong>ArrayBlockingQueue</strong>：可以限定队列的长度，接收到任务的时候，如果没有达到corePoolSize的值，则新建线程(核心线程)执行任务，如果达到了，则入队等候，如果队列已满，则新建线程(非核心线程)执行任务，又如果总线程数到了maximumPoolSize，并且队列也满了，则发生错误，或是执行实现定义好的饱和策略</li>\n<li><strong>DelayQueue</strong>：队列内元素必须实现Delayed接口，这就意味着你传进去的任务必须先实现Delayed接口。这个队列接收到任务时，首先先入队，只有达到了指定的延时时间，才会执行任务；</li>\n</ul>\n</li>\n<li><p><strong>ThreadFactory threadFactory （创建线程的工厂）</strong>：可以用线程工厂给每个创建出来的线程设置名字。一般情况下无须设置该参数。</p>\n</li>\n<li><strong>RejectedExecutionHandler handler（饱和策略）</strong>：这是当任务队列和线程池都满了时所采取的应对策略，默认是<strong><em>AbordPolicy </em></strong>， 表示无法处理新任务，并抛出 RejectedExecutionException 异常。此外还有3种策略，它们分别如下：<ul>\n<li><strong>CallerRunsPolicy</strong>：用调用者所在的线程来处理任务。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。     </li>\n<li><strong>DiscardPolicy</strong>：不能执行的任务，并将该任务删除。</li>\n<li><strong>DiscardOldestPolicy</strong>：丢弃队列最近的任务，并执行当前的任务。</li>\n<li>接下来上图，相信结合图你能大彻大悟~<img src=\"http://p5vswdxl9.bkt.clouddn.com/thpool\" alt=\"\"></li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"线程池使用\"><a href=\"#线程池使用\" class=\"headerlink\" title=\"线程池使用\"></a>线程池使用</h4><p>java为我们提供了4种线程池FixedThreadPool、CachedThreadPool、SingleThreadExecutor、ScheduledThreadPool，几乎可以满足我们大部分的需要。</p>\n<ul>\n<li><p><strong><em>FixedThreadPool </em></strong>可重用固定线程数的线程池，超出的线程会在队列中等待，在Executors类中我们可以找到创建方式：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newFixedThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> nThreads)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class=\"line\">                                      <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                      <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em>CachedThreadPool </em></strong>是一个根据需要创建线程的线程池。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newCachedThreadPool</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                      <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                      <span class=\"keyword\">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><strong><em>SingleThreadExecutor </em></strong>是使用单个线程工作的线程池。其创建源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title\">newSingleThreadExecutor</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FinalizableDelegatedExecutorService</span><br><span class=\"line\">        (<span class=\"keyword\">new</span> ThreadPoolExecutor(<span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><em> ScheduledThreadPool </em></strong>是一个能实现定时和周期性任务的线程池，它的创建源码如下：</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ScheduledExecutorService <span class=\"title\">newScheduledThreadPool</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(corePoolSize, Integer.MAX_VALUE,</span><br><span class=\"line\">              DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span><br><span class=\"line\">              <span class=\"keyword\">new</span> DelayedWorkQueue());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"合理配置线程池的大小\"><a href=\"#合理配置线程池的大小\" class=\"headerlink\" title=\"合理配置线程池的大小\"></a>合理配置线程池的大小</h4><p>&emsp;&emsp;一般需要根据任务的类型来配置线程池大小：</p>\n<ul>\n<li>如果是CPU密集型任务（<strong><em>线程CPU时间所占比例越高，需要越少线程，即CPU密集型任务。 </em></strong> ），就需要尽量压榨CPU，参考值可以设为 NCPU+1；</li>\n<li>如果是IO密集型任务（<strong><em>线程等待时间所占比例越高，需要越多线程，即IO密集型任务 </em></strong> ），参考值可以设置为2*NCPU；</li>\n<li>具体的设置还需要根据实际情况进行调整，比如可以先将线程池大小设置为参考值，再观察任务运行情况和系统负载、资源利用率来进行适当调整；</li>\n<li>最佳线程数目 = ((线程等待时间+线程CPU时间)/线程CPU时间)$*$CPU数目；</li>\n<li>比如平均每个线程CPU运行时间为0.5s，而线程等待时间（非CPU运行时间，比如IO）为1.5s，CPU核心数为8，那么根据上面这个公式估算得到：((0.5+1.5)/0.5)$*$8=32；</li>\n<li>TODO</li>\n</ul>\n<p><a href=\"\">参考链接</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Apr 21 2016 21:17:23 GMT+0800 (CST)","title":"线程池介绍","path":"2016/04/21/JavaMultiThread/thread-pool/","eyeCatchImage":null,"excerpt":"<hr>\n<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>&emsp;&emsp;很多人可能已经很熟悉操作系统中的多任务：就是同一时刻运行多个程序的能力。<br>&emsp;&emsp;多线程程序在较低层次上扩展了多任务的概念：一个程序同时执行多个任务。通常每一个任务称为一个线程，它是线程控制的简称。可以同时运行一个以上线程的程序成为多线程程序。<br>&emsp;&emsp;<font color=\"#EE4000\">线程和进程的区别</font>：</p>\n<ol>\n<li>多个进程的内部数据和状态都是完全独立的，而多线程是共享一块内存空间和一组系统资源，有可能互相影响。　　</li>\n<li>线程本身的数据通常只有寄存器数据，以及一个程序执行时使用的堆栈，所以线程的切换负担比进程切换的负担要小。多线程程序比多进程程序需要更少的管理费用。　　</li>\n<li>进程是重量级的任务，需要分配给它们独立的地址空间，进程间通信是昂贵和受限的，进程间的转换也是很需要花费的。而线程是轻量级的选手，它们共享相同的地址空间并且共同分享同一个进程，线程间的通信是便宜的，线程间的转换也是低成本的。</li>\n</ol>\n<hr>","date":"2016-04-21T12:15:31.000Z","pv":0,"totalPV":0,"categories":"Java多线程","tags":["多线程","线程池"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"浅析线程安全","date":"2017-03-02T14:13:25.000Z","updated":"2017-03-02T14:33:14.000Z","copyright":true,"mathjax":true,"_content":"\n\n","source":"_posts/JavaMultiThread/thread-safety-demo.md","raw":"---\ntitle: 浅析线程安全\ndate: 2017-03-02 22:13:25\nupdated: 2017-03-02 22:33:14\ncategories: Java多线程\ntags: [Thread]\ncopyright: true\nmathjax: true\n---\n\n\n","slug":"JavaMultiThread/thread-safety-demo","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmp001b9l8iekyxjern","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Mar 02 2017 22:33:14 GMT+0800 (CST)","title":"浅析线程安全","path":"2017/03/02/JavaMultiThread/thread-safety-demo/","eyeCatchImage":null,"excerpt":null,"date":"2017-03-02T14:13:25.000Z","pv":0,"totalPV":0,"categories":"Java多线程","tags":["Thread"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"多线程相关知识点","date":"2016-04-23T12:20:43.000Z","updated":"2016-04-23T13:19:21.000Z","copyright":true,"mathjax":true,"_content":"### 引入线程技术背景\n1. 一个应用程序中同时存在多个任务，其中部分活动会随时间的推移而阻塞，而另外一部分则不会。例如：一个文字处理软件，前台部分需要从终端设备获得输入或者将处理完的部分输出，而后台线程则可以实现对文字的处理。故对于CPU密集型进程，该用多线程其性能不一定能得到很大提高，但对于IO密集型进程，其性能可得到很大提高。\n2. <font color=#FF4500> 线程比进程更轻量级，创建和撤销的代价小，在许多系统中国呢，创建一个线程比一个进程要快10～100倍不等</font>。\n3. 在多核CPU中，真正的并行有了可能。即在多线程设计中一部分可用来处理前台任务，一部分可用来处理后台任务，实现真正意义上的并行。\n4. 线程间的切换代价要比进程切换的代价小。\n\n<!--more-->\n\n-------\n\n### 引入线程技术背景\n1. 某个操作可能会陷入长时间等待，等待的线程会进入睡眠状态，无法继续进行。多线程执行可以有效利用等待时间。如等待网络响应可能需要几秒时间。\n2. 某个操作(常常是计算)会消耗大量的时间，如果只有一个线程，程序和用户之间交互会中断。多线程可以让一个线程负责交付，另一个线程负责计算。\n3. 多CPU或者多核计算机，本身具备同时执行多个线程的能力，故单线程无法完全发挥计算机的计算能力。\n4. 相对于多进程应用，多线层在数据共享方面效率要高得多。\n5. 程序逻辑本身就要求并发操作。\n\n-------\n\n### 进程和线程\n&emsp;&emsp;进程是操作系统的管理单位，线程则是进程的管理单位。一个线程至少包含一个执行线程。不管是在多线程还是单线程，每个线程都一个程序计数器（记录要执行的下一条指令），一组寄存器（保存当前线程的工作变量），堆栈（记录执行理事，其中每一帧保存了一个已经调用但为返回的过程）。虽然线程***寄生 ***在进程中，但与它的进程是不同的概念，并且可以分别处理：<font color=#FF4500 >进程是系统分配资源的基本单位，线程是调度CPU的基本单位</font>。\n\n| 每个进程中的内容 | 每个线程的内容 |\n| --- | --- |\n| 地址空间 | 程序计数器 |\n| 全局变量 | 寄存器 |\n| 打开文件 | 堆栈 |\n| 子进程 | 状态 |\n| 即将发生的报警 |  |\n| 信号与信号处理程序 |  |\n| 账户信号 |  |\n| 同步、互斥信号量 |  |\n\n-------\n\n### CPU调度\n&emsp;&emsp;进程执行由CPU进行周期和I/O等待周期组成。进程在这两个状态之间切换（CPU burst ～ IO burst）\n进程执行从CPU区间（CPU burst）开始，在这之后是IO区间（IO burst）。接着另外一个CPU区间，然后是另外一个IO区间，如此进行下去，最后CPU区间通过系统请求中止执行。\n经过大量CPU区间长度的测试。发现具有大量短CPU区间和少量长CPU区间。IO约束程序通常具有很多短CPU区间。CPU约束成层序可能有少量的长CPU区间。这种分布有助于选择合适的CPU调度算法。\n\n\n\n\n\n\n","source":"_posts/JavaMultiThread/thread-sample-introduce.md","raw":"---\ntitle:  多线程相关知识点 \ndate: 2016-04-23 20:20:43\nupdated: 2016-04-23 21:19:21\ncategories: Java多线程\ntags: [多线程]\ncopyright: true\nmathjax: true\n---\n### 引入线程技术背景\n1. 一个应用程序中同时存在多个任务，其中部分活动会随时间的推移而阻塞，而另外一部分则不会。例如：一个文字处理软件，前台部分需要从终端设备获得输入或者将处理完的部分输出，而后台线程则可以实现对文字的处理。故对于CPU密集型进程，该用多线程其性能不一定能得到很大提高，但对于IO密集型进程，其性能可得到很大提高。\n2. <font color=#FF4500> 线程比进程更轻量级，创建和撤销的代价小，在许多系统中国呢，创建一个线程比一个进程要快10～100倍不等</font>。\n3. 在多核CPU中，真正的并行有了可能。即在多线程设计中一部分可用来处理前台任务，一部分可用来处理后台任务，实现真正意义上的并行。\n4. 线程间的切换代价要比进程切换的代价小。\n\n<!--more-->\n\n-------\n\n### 引入线程技术背景\n1. 某个操作可能会陷入长时间等待，等待的线程会进入睡眠状态，无法继续进行。多线程执行可以有效利用等待时间。如等待网络响应可能需要几秒时间。\n2. 某个操作(常常是计算)会消耗大量的时间，如果只有一个线程，程序和用户之间交互会中断。多线程可以让一个线程负责交付，另一个线程负责计算。\n3. 多CPU或者多核计算机，本身具备同时执行多个线程的能力，故单线程无法完全发挥计算机的计算能力。\n4. 相对于多进程应用，多线层在数据共享方面效率要高得多。\n5. 程序逻辑本身就要求并发操作。\n\n-------\n\n### 进程和线程\n&emsp;&emsp;进程是操作系统的管理单位，线程则是进程的管理单位。一个线程至少包含一个执行线程。不管是在多线程还是单线程，每个线程都一个程序计数器（记录要执行的下一条指令），一组寄存器（保存当前线程的工作变量），堆栈（记录执行理事，其中每一帧保存了一个已经调用但为返回的过程）。虽然线程***寄生 ***在进程中，但与它的进程是不同的概念，并且可以分别处理：<font color=#FF4500 >进程是系统分配资源的基本单位，线程是调度CPU的基本单位</font>。\n\n| 每个进程中的内容 | 每个线程的内容 |\n| --- | --- |\n| 地址空间 | 程序计数器 |\n| 全局变量 | 寄存器 |\n| 打开文件 | 堆栈 |\n| 子进程 | 状态 |\n| 即将发生的报警 |  |\n| 信号与信号处理程序 |  |\n| 账户信号 |  |\n| 同步、互斥信号量 |  |\n\n-------\n\n### CPU调度\n&emsp;&emsp;进程执行由CPU进行周期和I/O等待周期组成。进程在这两个状态之间切换（CPU burst ～ IO burst）\n进程执行从CPU区间（CPU burst）开始，在这之后是IO区间（IO burst）。接着另外一个CPU区间，然后是另外一个IO区间，如此进行下去，最后CPU区间通过系统请求中止执行。\n经过大量CPU区间长度的测试。发现具有大量短CPU区间和少量长CPU区间。IO约束程序通常具有很多短CPU区间。CPU约束成层序可能有少量的长CPU区间。这种分布有助于选择合适的CPU调度算法。\n\n\n\n\n\n\n","slug":"JavaMultiThread/thread-sample-introduce","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmr001e9l8iemsmpbd1","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"引入线程技术背景\"><a href=\"#引入线程技术背景\" class=\"headerlink\" title=\"引入线程技术背景\"></a>引入线程技术背景</h3><ol>\n<li>一个应用程序中同时存在多个任务，其中部分活动会随时间的推移而阻塞，而另外一部分则不会。例如：一个文字处理软件，前台部分需要从终端设备获得输入或者将处理完的部分输出，而后台线程则可以实现对文字的处理。故对于CPU密集型进程，该用多线程其性能不一定能得到很大提高，但对于IO密集型进程，其性能可得到很大提高。</li>\n<li><font color=\"#FF4500\"> 线程比进程更轻量级，创建和撤销的代价小，在许多系统中国呢，创建一个线程比一个进程要快10～100倍不等</font>。</li>\n<li>在多核CPU中，真正的并行有了可能。即在多线程设计中一部分可用来处理前台任务，一部分可用来处理后台任务，实现真正意义上的并行。</li>\n<li>线程间的切换代价要比进程切换的代价小。</li>\n</ol>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"引入线程技术背景-1\"><a href=\"#引入线程技术背景-1\" class=\"headerlink\" title=\"引入线程技术背景\"></a>引入线程技术背景</h3><ol>\n<li>某个操作可能会陷入长时间等待，等待的线程会进入睡眠状态，无法继续进行。多线程执行可以有效利用等待时间。如等待网络响应可能需要几秒时间。</li>\n<li>某个操作(常常是计算)会消耗大量的时间，如果只有一个线程，程序和用户之间交互会中断。多线程可以让一个线程负责交付，另一个线程负责计算。</li>\n<li>多CPU或者多核计算机，本身具备同时执行多个线程的能力，故单线程无法完全发挥计算机的计算能力。</li>\n<li>相对于多进程应用，多线层在数据共享方面效率要高得多。</li>\n<li>程序逻辑本身就要求并发操作。</li>\n</ol>\n<hr>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><p>&emsp;&emsp;进程是操作系统的管理单位，线程则是进程的管理单位。一个线程至少包含一个执行线程。不管是在多线程还是单线程，每个线程都一个程序计数器（记录要执行的下一条指令），一组寄存器（保存当前线程的工作变量），堆栈（记录执行理事，其中每一帧保存了一个已经调用但为返回的过程）。虽然线程<strong><em>寄生 </em></strong>在进程中，但与它的进程是不同的概念，并且可以分别处理：<font color=\"#FF4500\">进程是系统分配资源的基本单位，线程是调度CPU的基本单位</font>。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>每个进程中的内容</th>\n<th>每个线程的内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>地址空间</td>\n<td>程序计数器</td>\n</tr>\n<tr>\n<td>全局变量</td>\n<td>寄存器</td>\n</tr>\n<tr>\n<td>打开文件</td>\n<td>堆栈</td>\n</tr>\n<tr>\n<td>子进程</td>\n<td>状态</td>\n</tr>\n<tr>\n<td>即将发生的报警</td>\n<td></td>\n</tr>\n<tr>\n<td>信号与信号处理程序</td>\n<td></td>\n</tr>\n<tr>\n<td>账户信号</td>\n<td></td>\n</tr>\n<tr>\n<td>同步、互斥信号量</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"CPU调度\"><a href=\"#CPU调度\" class=\"headerlink\" title=\"CPU调度\"></a>CPU调度</h3><p>&emsp;&emsp;进程执行由CPU进行周期和I/O等待周期组成。进程在这两个状态之间切换（CPU burst ～ IO burst）<br>进程执行从CPU区间（CPU burst）开始，在这之后是IO区间（IO burst）。接着另外一个CPU区间，然后是另外一个IO区间，如此进行下去，最后CPU区间通过系统请求中止执行。<br>经过大量CPU区间长度的测试。发现具有大量短CPU区间和少量长CPU区间。IO约束程序通常具有很多短CPU区间。CPU约束成层序可能有少量的长CPU区间。这种分布有助于选择合适的CPU调度算法。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"引入线程技术背景\"><a href=\"#引入线程技术背景\" class=\"headerlink\" title=\"引入线程技术背景\"></a>引入线程技术背景</h3><ol>\n<li>一个应用程序中同时存在多个任务，其中部分活动会随时间的推移而阻塞，而另外一部分则不会。例如：一个文字处理软件，前台部分需要从终端设备获得输入或者将处理完的部分输出，而后台线程则可以实现对文字的处理。故对于CPU密集型进程，该用多线程其性能不一定能得到很大提高，但对于IO密集型进程，其性能可得到很大提高。</li>\n<li><font color=\"#FF4500\"> 线程比进程更轻量级，创建和撤销的代价小，在许多系统中国呢，创建一个线程比一个进程要快10～100倍不等</font>。</li>\n<li>在多核CPU中，真正的并行有了可能。即在多线程设计中一部分可用来处理前台任务，一部分可用来处理后台任务，实现真正意义上的并行。</li>\n<li>线程间的切换代价要比进程切换的代价小。</li>\n</ol>","more":"<hr>\n<h3 id=\"引入线程技术背景-1\"><a href=\"#引入线程技术背景-1\" class=\"headerlink\" title=\"引入线程技术背景\"></a>引入线程技术背景</h3><ol>\n<li>某个操作可能会陷入长时间等待，等待的线程会进入睡眠状态，无法继续进行。多线程执行可以有效利用等待时间。如等待网络响应可能需要几秒时间。</li>\n<li>某个操作(常常是计算)会消耗大量的时间，如果只有一个线程，程序和用户之间交互会中断。多线程可以让一个线程负责交付，另一个线程负责计算。</li>\n<li>多CPU或者多核计算机，本身具备同时执行多个线程的能力，故单线程无法完全发挥计算机的计算能力。</li>\n<li>相对于多进程应用，多线层在数据共享方面效率要高得多。</li>\n<li>程序逻辑本身就要求并发操作。</li>\n</ol>\n<hr>\n<h3 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h3><p>&emsp;&emsp;进程是操作系统的管理单位，线程则是进程的管理单位。一个线程至少包含一个执行线程。不管是在多线程还是单线程，每个线程都一个程序计数器（记录要执行的下一条指令），一组寄存器（保存当前线程的工作变量），堆栈（记录执行理事，其中每一帧保存了一个已经调用但为返回的过程）。虽然线程<strong><em>寄生 </em></strong>在进程中，但与它的进程是不同的概念，并且可以分别处理：<font color=\"#FF4500\">进程是系统分配资源的基本单位，线程是调度CPU的基本单位</font>。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>每个进程中的内容</th>\n<th>每个线程的内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>地址空间</td>\n<td>程序计数器</td>\n</tr>\n<tr>\n<td>全局变量</td>\n<td>寄存器</td>\n</tr>\n<tr>\n<td>打开文件</td>\n<td>堆栈</td>\n</tr>\n<tr>\n<td>子进程</td>\n<td>状态</td>\n</tr>\n<tr>\n<td>即将发生的报警</td>\n<td></td>\n</tr>\n<tr>\n<td>信号与信号处理程序</td>\n<td></td>\n</tr>\n<tr>\n<td>账户信号</td>\n<td></td>\n</tr>\n<tr>\n<td>同步、互斥信号量</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h3 id=\"CPU调度\"><a href=\"#CPU调度\" class=\"headerlink\" title=\"CPU调度\"></a>CPU调度</h3><p>&emsp;&emsp;进程执行由CPU进行周期和I/O等待周期组成。进程在这两个状态之间切换（CPU burst ～ IO burst）<br>进程执行从CPU区间（CPU burst）开始，在这之后是IO区间（IO burst）。接着另外一个CPU区间，然后是另外一个IO区间，如此进行下去，最后CPU区间通过系统请求中止执行。<br>经过大量CPU区间长度的测试。发现具有大量短CPU区间和少量长CPU区间。IO约束程序通常具有很多短CPU区间。CPU约束成层序可能有少量的长CPU区间。这种分布有助于选择合适的CPU调度算法。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Apr 23 2016 21:19:21 GMT+0800 (CST)","title":"多线程相关知识点","path":"2016/04/23/JavaMultiThread/thread-sample-introduce/","eyeCatchImage":null,"excerpt":"<h3 id=\"引入线程技术背景\"><a href=\"#引入线程技术背景\" class=\"headerlink\" title=\"引入线程技术背景\"></a>引入线程技术背景</h3><ol>\n<li>一个应用程序中同时存在多个任务，其中部分活动会随时间的推移而阻塞，而另外一部分则不会。例如：一个文字处理软件，前台部分需要从终端设备获得输入或者将处理完的部分输出，而后台线程则可以实现对文字的处理。故对于CPU密集型进程，该用多线程其性能不一定能得到很大提高，但对于IO密集型进程，其性能可得到很大提高。</li>\n<li><font color=\"#FF4500\"> 线程比进程更轻量级，创建和撤销的代价小，在许多系统中国呢，创建一个线程比一个进程要快10～100倍不等</font>。</li>\n<li>在多核CPU中，真正的并行有了可能。即在多线程设计中一部分可用来处理前台任务，一部分可用来处理后台任务，实现真正意义上的并行。</li>\n<li>线程间的切换代价要比进程切换的代价小。</li>\n</ol>","date":"2016-04-23T12:20:43.000Z","pv":0,"totalPV":0,"categories":"Java多线程","tags":["多线程"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Chapter(1)","copyright":true,"date":"2016-05-01T04:20:43.000Z","updated":"2016-05-01T12:19:21.000Z","mathjax":true,"_content":"\n### Thread类中start()方法和run()方法的区别\n1. Thread.java类中的start()方法通知“线程规划器”，此线程已经准备就绪，等待调用线程对象的run()方法。这个过程其实就是让系统安排一个时间来调用Thread中的run()方法，也就是使线程得到运行，启动线程，具有异步执行的效果。\n2. 如果代码调用thread.run()方法就不是异步执行，而是同步，那么此线程对象并不交给“线程规划器”来进行处理，而是由main()主线程来调用run()方法，也就是必须等run()方法中的代码执行完后才可以执行后面的代码。\n3. ([<font color=#ff6600>代码Demo地址</font>](https://github.com/edgeowner/JavaMulti-threadProgramming))：参见com.multithread.demo.chapter1.ThreadShareDemo目录下代码\n\n<!--more-->\n\n-------\n\n\n\n\n","source":"_posts/JavaMultiThreadBook/MultiThreadChapter1.md","raw":"---\ntitle: Chapter(1)\ntags: [多线程]\ncopyright: true\ndate: 2016-05-01 12:20:43\nupdated: 2016-05-01 20:19:21\ncategories: Java Multi-thread Programming书籍\nmathjax: true \n---\n\n### Thread类中start()方法和run()方法的区别\n1. Thread.java类中的start()方法通知“线程规划器”，此线程已经准备就绪，等待调用线程对象的run()方法。这个过程其实就是让系统安排一个时间来调用Thread中的run()方法，也就是使线程得到运行，启动线程，具有异步执行的效果。\n2. 如果代码调用thread.run()方法就不是异步执行，而是同步，那么此线程对象并不交给“线程规划器”来进行处理，而是由main()主线程来调用run()方法，也就是必须等run()方法中的代码执行完后才可以执行后面的代码。\n3. ([<font color=#ff6600>代码Demo地址</font>](https://github.com/edgeowner/JavaMulti-threadProgramming))：参见com.multithread.demo.chapter1.ThreadShareDemo目录下代码\n\n<!--more-->\n\n-------\n\n\n\n\n","slug":"JavaMultiThreadBook/MultiThreadChapter1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmt001h9l8i41ri4n5l","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"Thread类中start-方法和run-方法的区别\"><a href=\"#Thread类中start-方法和run-方法的区别\" class=\"headerlink\" title=\"Thread类中start()方法和run()方法的区别\"></a>Thread类中start()方法和run()方法的区别</h3><ol>\n<li>Thread.java类中的start()方法通知“线程规划器”，此线程已经准备就绪，等待调用线程对象的run()方法。这个过程其实就是让系统安排一个时间来调用Thread中的run()方法，也就是使线程得到运行，启动线程，具有异步执行的效果。</li>\n<li>如果代码调用thread.run()方法就不是异步执行，而是同步，那么此线程对象并不交给“线程规划器”来进行处理，而是由main()主线程来调用run()方法，也就是必须等run()方法中的代码执行完后才可以执行后面的代码。</li>\n<li>(<a href=\"https://github.com/edgeowner/JavaMulti-threadProgramming\" target=\"_blank\" rel=\"noopener\"><font color=\"#ff6600\">代码Demo地址</font></a>)：参见com.multithread.demo.chapter1.ThreadShareDemo目录下代码</li>\n</ol>\n<a id=\"more\"></a>\n<hr>\n","site":{"data":{}},"excerpt":"<h3 id=\"Thread类中start-方法和run-方法的区别\"><a href=\"#Thread类中start-方法和run-方法的区别\" class=\"headerlink\" title=\"Thread类中start()方法和run()方法的区别\"></a>Thread类中start()方法和run()方法的区别</h3><ol>\n<li>Thread.java类中的start()方法通知“线程规划器”，此线程已经准备就绪，等待调用线程对象的run()方法。这个过程其实就是让系统安排一个时间来调用Thread中的run()方法，也就是使线程得到运行，启动线程，具有异步执行的效果。</li>\n<li>如果代码调用thread.run()方法就不是异步执行，而是同步，那么此线程对象并不交给“线程规划器”来进行处理，而是由main()主线程来调用run()方法，也就是必须等run()方法中的代码执行完后才可以执行后面的代码。</li>\n<li>(<a href=\"https://github.com/edgeowner/JavaMulti-threadProgramming\" target=\"_blank\" rel=\"noopener\"><font color=\"#ff6600\">代码Demo地址</font></a>)：参见com.multithread.demo.chapter1.ThreadShareDemo目录下代码</li>\n</ol>","more":"<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sun May 01 2016 20:19:21 GMT+0800 (CST)","title":"Chapter(1)","path":"2016/05/01/JavaMultiThreadBook/MultiThreadChapter1/","eyeCatchImage":null,"excerpt":"<h3 id=\"Thread类中start-方法和run-方法的区别\"><a href=\"#Thread类中start-方法和run-方法的区别\" class=\"headerlink\" title=\"Thread类中start()方法和run()方法的区别\"></a>Thread类中start()方法和run()方法的区别</h3><ol>\n<li>Thread.java类中的start()方法通知“线程规划器”，此线程已经准备就绪，等待调用线程对象的run()方法。这个过程其实就是让系统安排一个时间来调用Thread中的run()方法，也就是使线程得到运行，启动线程，具有异步执行的效果。</li>\n<li>如果代码调用thread.run()方法就不是异步执行，而是同步，那么此线程对象并不交给“线程规划器”来进行处理，而是由main()主线程来调用run()方法，也就是必须等run()方法中的代码执行完后才可以执行后面的代码。</li>\n<li>(<a href=\"https://github.com/edgeowner/JavaMulti-threadProgramming\" target=\"_blank\" rel=\"noopener\"><font color=\"#ff6600\">代码Demo地址</font></a>)：参见com.multithread.demo.chapter1.ThreadShareDemo目录下代码</li>\n</ol>","date":"2016-05-01T04:20:43.000Z","pv":0,"totalPV":0,"categories":"Java Multi-thread Programming书籍","tags":["多线程"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ThreadPoolExecutor 参数详解","copyright":true,"date":"2016-04-21T01:15:31.000Z","updated":"2016-04-21T12:17:23.000Z","mathjax":true,"_content":"\n\n### ThreadPoolExecutor类介绍\n&emsp;&emsp; \n\n\n","source":"_posts/JavaMultiThreadBook/MultiThreadChapter2.md","raw":"---\ntitle: ThreadPoolExecutor 参数详解\ntags: [多线程, 线程池]\ncopyright: true\ndate: 2016-04-21 9:15:31\nupdated: 2016-04-21 20:17:23\ncategories: Java多线程\nmathjax: true \n---\n\n\n### ThreadPoolExecutor类介绍\n&emsp;&emsp; \n\n\n","slug":"JavaMultiThreadBook/MultiThreadChapter2","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmv001k9l8izi70q18z","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"ThreadPoolExecutor类介绍\"><a href=\"#ThreadPoolExecutor类介绍\" class=\"headerlink\" title=\"ThreadPoolExecutor类介绍\"></a>ThreadPoolExecutor类介绍</h3><p>&emsp;&emsp; </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ThreadPoolExecutor类介绍\"><a href=\"#ThreadPoolExecutor类介绍\" class=\"headerlink\" title=\"ThreadPoolExecutor类介绍\"></a>ThreadPoolExecutor类介绍</h3><p>&emsp;&emsp; </p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Apr 21 2016 20:17:23 GMT+0800 (CST)","title":"ThreadPoolExecutor 参数详解","path":"2016/04/21/JavaMultiThreadBook/MultiThreadChapter2/","eyeCatchImage":null,"excerpt":null,"date":"2016-04-21T01:15:31.000Z","pv":0,"totalPV":0,"categories":"Java多线程","tags":["多线程","线程池"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ThreadPoolExecutor 参数详解","copyright":true,"date":"2016-04-21T01:15:31.000Z","updated":"2016-04-21T12:17:23.000Z","mathjax":true,"_content":"\n\n### ThreadPoolExecutor类介绍\n&emsp;&emsp; \n\n\n","source":"_posts/JavaMultiThreadBook/MultiThreadChapter3.md","raw":"---\ntitle: ThreadPoolExecutor 参数详解\ntags: [多线程, 线程池]\ncopyright: true\ndate: 2016-04-21 9:15:31\nupdated: 2016-04-21 20:17:23\ncategories: Java多线程\nmathjax: true \n---\n\n\n### ThreadPoolExecutor类介绍\n&emsp;&emsp; \n\n\n","slug":"JavaMultiThreadBook/MultiThreadChapter3","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmw001n9l8ib5z13wi9","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"ThreadPoolExecutor类介绍\"><a href=\"#ThreadPoolExecutor类介绍\" class=\"headerlink\" title=\"ThreadPoolExecutor类介绍\"></a>ThreadPoolExecutor类介绍</h3><p>&emsp;&emsp; </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ThreadPoolExecutor类介绍\"><a href=\"#ThreadPoolExecutor类介绍\" class=\"headerlink\" title=\"ThreadPoolExecutor类介绍\"></a>ThreadPoolExecutor类介绍</h3><p>&emsp;&emsp; </p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Apr 21 2016 20:17:23 GMT+0800 (CST)","title":"ThreadPoolExecutor 参数详解","path":"2016/04/21/JavaMultiThreadBook/MultiThreadChapter3/","eyeCatchImage":null,"excerpt":null,"date":"2016-04-21T01:15:31.000Z","pv":0,"totalPV":0,"categories":"Java多线程","tags":["多线程","线程池"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"ThreadPoolExecutor 参数详解","copyright":true,"date":"2016-04-21T01:15:31.000Z","updated":"2016-04-21T12:17:23.000Z","mathjax":true,"_content":"\n\n### ThreadPoolExecutor类介绍\n&emsp;&emsp; \n\n\n","source":"_posts/JavaMultiThreadBook/MultiThreadChapter4.md","raw":"---\ntitle: ThreadPoolExecutor 参数详解\ntags: [多线程, 线程池]\ncopyright: true\ndate: 2016-04-21 9:15:31\nupdated: 2016-04-21 20:17:23\ncategories: Java多线程\nmathjax: true \n---\n\n\n### ThreadPoolExecutor类介绍\n&emsp;&emsp; \n\n\n","slug":"JavaMultiThreadBook/MultiThreadChapter4","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmx001p9l8i3ck1d9qz","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"ThreadPoolExecutor类介绍\"><a href=\"#ThreadPoolExecutor类介绍\" class=\"headerlink\" title=\"ThreadPoolExecutor类介绍\"></a>ThreadPoolExecutor类介绍</h3><p>&emsp;&emsp; </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ThreadPoolExecutor类介绍\"><a href=\"#ThreadPoolExecutor类介绍\" class=\"headerlink\" title=\"ThreadPoolExecutor类介绍\"></a>ThreadPoolExecutor类介绍</h3><p>&emsp;&emsp; </p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Apr 21 2016 20:17:23 GMT+0800 (CST)","title":"ThreadPoolExecutor 参数详解","path":"2016/04/21/JavaMultiThreadBook/MultiThreadChapter4/","eyeCatchImage":null,"excerpt":null,"date":"2016-04-21T01:15:31.000Z","pv":0,"totalPV":0,"categories":"Java多线程","tags":["多线程","线程池"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java CAS","date":"2018-03-13T12:04:50.000Z","copyright":true,"_content":"","source":"_posts/JavaPremium/Java-CAS.md","raw":"---\ntitle: Java CAS\ndate: 2018-03-13 20:04:50\ntags:\ncategories:\ncopyright: true\n---\n","slug":"JavaPremium/Java-CAS","published":1,"updated":"2018-03-19T10:37:03.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbmz001t9l8i3ityq2hl","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 19 2018 18:37:03 GMT+0800 (CST)","title":"Java CAS","path":"2018/03/13/JavaPremium/Java-CAS/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-13T12:04:50.000Z","pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java LDAP","date":"2018-03-13T12:05:05.000Z","copyright":true,"_content":"","source":"_posts/JavaPremium/Java-LDAP.md","raw":"---\ntitle: Java LDAP\ndate: 2018-03-13 20:05:05\ntags:\ncategories:\ncopyright: true\n---\n","slug":"JavaPremium/Java-LDAP","published":1,"updated":"2018-03-14T02:35:23.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbn0001u9l8i6pt95c6x","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 14 2018 10:35:23 GMT+0800 (CST)","title":"Java LDAP","path":"2018/03/13/JavaPremium/Java-LDAP/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-13T12:05:05.000Z","pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java NIO","date":"2018-03-13T12:05:28.000Z","copyright":true,"_content":"","source":"_posts/JavaPremium/Java-NIO.md","raw":"---\ntitle: Java NIO\ndate: 2018-03-13 20:05:28\ntags: \ncategories: \ncopyright: true\n---\n","slug":"JavaPremium/Java-NIO","published":1,"updated":"2018-03-14T02:35:31.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbn1001y9l8ik6ieuw6p","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 14 2018 10:35:31 GMT+0800 (CST)","title":"Java NIO","path":"2018/03/13/JavaPremium/Java-NIO/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-13T12:05:28.000Z","pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Java序列化","date":"2018-03-13T12:06:04.000Z","copyright":true,"_content":"","source":"_posts/JavaPremium/Java序列化.md","raw":"---\ntitle: Java序列化\ndate: 2018-03-13 20:06:04\ntags: [Java, Serialize]\ncategories: Java\ncopyright: true\n---\n","slug":"JavaPremium/Java序列化","published":1,"updated":"2018-03-14T02:28:55.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbn200209l8iudr51qsw","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 14 2018 10:28:55 GMT+0800 (CST)","title":"Java序列化","path":"2018/03/13/JavaPremium/Java序列化/","eyeCatchImage":null,"excerpt":null,"date":"2018-03-13T12:06:04.000Z","pv":0,"totalPV":0,"categories":"Java","tags":["Java","Serialize"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"浅析数据库读现象","date":"2016-11-05T02:20:28.000Z","updated":"2016-11-05T02:25:49.000Z","copyright":true,"mathjax":true,"_content":"\n[](http://www.hollischuang.com/archives/900)\n\n\n\n","source":"_posts/Mysql/dataSourceRead.md","raw":"---\ntitle: 浅析数据库读现象\ndate: 2016-11-05 10:20:28\nupdated: 2016-11-05 10:25:49\ncategories: 并发控制相关知识点\ntags: [并发控制, 锁]\ncopyright: true\nmathjax: true\n\n---\n\n[](http://www.hollischuang.com/archives/900)\n\n\n\n","slug":"Mysql/dataSourceRead","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbn400249l8i07ngfnl1","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><a href=\"http://www.hollischuang.com/archives/900\" target=\"_blank\" rel=\"noopener\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.hollischuang.com/archives/900\" target=\"_blank\" rel=\"noopener\"></a></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Nov 05 2016 10:25:49 GMT+0800 (CST)","title":"浅析数据库读现象","path":"2016/11/05/Mysql/dataSourceRead/","eyeCatchImage":null,"excerpt":null,"date":"2016-11-05T02:20:28.000Z","pv":0,"totalPV":0,"categories":"并发控制相关知识点","tags":["并发控制","锁"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"乐观锁与悲观锁的实际应用","date":"2016-10-01T11:20:43.000Z","updated":"2016-10-01T12:19:21.000Z","copyright":true,"mathjax":true,"_content":"\n#### 高并发场景\n&emsp;&emsp;首先假设一个业务场景：数据库中有一条数据，需要获取到当前的值，在当前值的基础上$+10$，然后再更新回去。如果此时有两个线程同时并发处理，第一个线程拿到数据是$10，+10=20$更新回去。第二个线程原本是要在第一个线程的基础上再$+20=40$,结果由于并发访问取到更新前的数据为$10，+20=30$。\n这就是典型的存在中间状态，导致数据不正确。来看以下的例子：\n并发所带来的问题，和上文提到的类似，这里有一张price表，表结构如下：\n\n```sql\nCREATE TABLE `price` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `total` decimal(12,2) DEFAULT '0.00' COMMENT '总值',\n  `front` decimal(12,2) DEFAULT '0.00' COMMENT '消费前',\n  `end` decimal(12,2) DEFAULT '0.00' COMMENT '消费后',\n  `add_time` timestamp NULL DEFAULT NULL COMMENT '添加时间',\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP, COMMENT '更新时间',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8\n```\n\n<!--more-->\n\n单测例子如下([Github代码地址]())：\n\n```java\n//就一个主线程，循环100次，每次把front的值减去10，再写入一次流水记录，正常情况是写入的每条记录都会每次减去10。\n @Test\n    public void singleCounsumerTest() {\n\n        for (int i = 0; i < 100; i++) {\n            Price price = priceMapper.selectByPrimaryKey(1);\n            int ron = 10;\n            price.setFront(price.getFront().subtract(new BigDecimal(ron)));\n            price.setEnd(price.getEnd().add(new BigDecimal(ron)));\n            price.setTotal(price.getFront().add(price.getEnd()));\n\n            priceMapper.updateByPrimaryKey(price);\n            price.setId(null);\n            priceMapper.insertSelective(price);\n        }\n    }\n```\n执行结果如下图：\n![图（1）](http://p5vswdxl9.bkt.clouddn.com/result1.png)\n可以看到确实是每次都递减10，但是如果是多线程的情况下会是如何呢？（[代码PriceController](https://github.com/edgeowner/saber)）\n```java\n @Slf4j\n@RestController\n@RequestMapping(\"/price\")\npublic class PriceController {\n\n    @Autowired\n    private PriceApplication priceApplication;\n\n    @Autowired\n    private PriceMapper priceMapper;\n    @Autowired\n    private ThreadPoolConfig config;\n\n\n    /**\n     * 多线程并发执行Demo ,无锁场景下的更新\n     *\n     * @param priceVO\n     * @return message\n     */\n    @RequestMapping(value = \"/update\", method = RequestMethod.POST)\n    public ResponseEntity<Map<String, Object>> updatePrice(@RequestBody PriceVO priceVO) {\n\n        try {\n            if (priceVO == null) {\n                throw new BizException(BizException.NUM_VALIDATION, \"priceVO is null\");\n            }\n\n            for (int i = 0; i < 10; i++) {\n                final int count = i;\n                Thread thread = new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        toUpdatePrice(count);\n                    }\n                });\n                config.submit(thread);\n            }\n            return WebUtil.success(\"price更新成功\");\n        } catch (BizException ex) {\n            log.error(\"更新价格失败\", ExceptionUtils.getFullStackTrace(ex));\n            return WebUtil.error(ex.getErrorMessage());\n        }\n\n    }\n\n\n    private void toUpdatePrice(int count) {\n        log.info(MessageFormat.format(\"thread create start:{0} \", count));\n        Price price = priceMapper.selectByPrimaryKey(1);\n        int ron = 10;\n        price.setFront(price.getFront().subtract(new BigDecimal(ron)));\n        price.setEnd(price.getEnd().add(new BigDecimal(ron)));\n        priceMapper.updateByPrimaryKey(price);\n        price.setId(null);\n        priceMapper.insertSelective(price);\n        log.info(MessageFormat.format(\"thread create end:{0} \", count));\n    }\n}\n```\n关于线程池的使用今后会仔细探讨。这里就简单理解为有10个线程并发去处理上面单线程的逻辑，来看看结果怎么样？\n![图（2）](http://p5vswdxl9.bkt.clouddn.com/result2.png)\n\n会看到明显的数据错误，导致错误的原因自然就是有线程读取到了中间状态进行了错误的更新。\n进而有了以下两种解决方案：***悲观锁 ***和***乐观锁 ***。\n\n-------\n\n#### 悲观锁\n&emsp;&emsp;简单理解下悲观锁：当一个事务锁定了一些数据之后，只有当当前锁提交了事务，释放了锁，其他事务才能获得锁并执行操作。\n使用方式如下：\n首先要关闭MySQL的自动提交：set autocommit = 0;\n```sql\nbigen --开启事务\nselect id, total, front, end from price where id=1 for update \n\ninsert into price values(?,?,?,?,?)\n\ncommit --提交事务\n```\n这里使用**select for update**的方式利用数据库开启了悲观锁，锁定了id=1的这条数据(注意：**这里除非是使用了索引会启用行级锁，不然是会使用表锁，将整张表都锁住。**)。之后使用commit提交事务并释放锁，这样下一个线程过来拿到的就是正确的数据。\n悲观锁一般是用于并发不是很高，并且不允许脏读等情况。但是对数据库资源消耗较大。\n\n-------\n\n#### 乐观锁\n&emsp;&emsp;乐观锁是首先假设数据冲突很少，只有在数据提交修改的时候才进行校验，如果冲突了则不会进行更新。\n通常的实现方式增加一个version字段，为每一条数据加上版本。每次更新的时候version+1，并且更新时候带上版本号。实现方式如下：\n新建了一张price_version表：\n```sql\nCREATE TABLE `price_version` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `total` decimal(12,2) DEFAULT '0.00' COMMENT '总值',\n  `front` decimal(12,2) DEFAULT '0.00' COMMENT '消费前',\n  `end` decimal(12,2) DEFAULT '0.00' COMMENT '消费后',\n  `version` int(11) DEFAULT '0' COMMENT '并发版本控制',\n  `add_time` timestamp NULL DEFAULT NULL  COMMENT '添加时间',\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP  COMMENT '更新时间',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n``更新数据的SQL``：\n```xml\n<update id=\"updateByVersion\" parameterType=\"com.demo.saber.infrastructure.po.PriceVersion\">\n        update price_version\n        set front = #{front, jdbcType=DECIMAL},\n            version = version + 1\n        where id = #{id, jdbcType=INTEGER}\n        and version = #{version, jdbcType=INTEGER}\n    </update>\n```\n``调用方式``：\n```java\n@Slf4j\n@RestController\n@RequestMapping(\"/priceverion\")\npublic class PriceVersionController {\n\n\n    @Autowired\n    private PriceVersionMapper priceVersionMapper;\n\n\n    @Autowired\n    private ThreadPoolConfig config;\n\n    /**\n     * 多线程并发执行Demo ,乐观锁场景下的更新\n     *\n     * @param priceVersionVO\n     * @return message\n     */\n    @RequestMapping(value = \"/threadPriceVersion\", method = RequestMethod.POST)\n    public ResponseEntity<Map<String, Object>> updatePrice(@RequestBody PriceVersionVO priceVersionVO) {\n\n        try {\n            if (priceVersionVO == null) {\n                throw new BizException(BizException.NUM_VALIDATION, \"priceVersionVO is null\");\n            }\n\n            for (int i = 0; i < 10; i++) {\n                final int count = i;\n                Thread thread = new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        PriceVersion priceVersion = priceVersionMapper.selectByPrimaryKey(1);\n                        int ron = 10;\n                        //\"本次消费=\" + ron\n                        log.info(MessageFormat.format(\"当前线程({0})本次消费={1}\", count, ron));\n                        priceVersion.setFront(new BigDecimal(ron));\n                        int backflag = priceVersionMapper.updateByVersion(priceVersion);\n                        if (backflag == 0) {\n                            log.error(MessageFormat.format(\"当前线程({0})更新失败\", count));\n                        } else {\n                            log.error(MessageFormat.format(\"当前线程({0})更新成功\", count));\n                        }\n\n                    }\n                });\n                config.submit(thread);\n            }\n            return WebUtil.success(\"priceVersion更新成功\");\n        } catch (BizException ex) {\n            log.error(\"更新priceVersion失败\", ExceptionUtils.getFullStackTrace(ex));\n            return WebUtil.error(ex.getErrorMessage());\n        }\n\n    }\n}\n```\n**处理逻辑 **：开了三个线程生成了20以内的随机数更新到front字段。调用该接口时日志如下：\n![更新日志](http://p5vswdxl9.bkt.clouddn.com/result3.jpg)\n可以看到线程1、2、3、4都更新失败了，线程0更新成功了。\n\n乐观锁在实际应用相对较多，它可以提供更好的并发访问，并且数据库开销较少，但是有可能存在脏读的情况。\n\n-------\n\n#### 代码地址\n[edgeowner](https://github.com/edgeowner/saber)\n\n#### 参考资源\n[SSM (十五) 乐观锁与悲观锁的实际应用](https://juejin.im/post/5962e64c6fb9a06ba14b9cd9)\n\n\n\n\n\n","source":"_posts/Lock/optimistic-pessimistic.md","raw":"---\ntitle:  乐观锁与悲观锁的实际应用\ndate: 2016-10-01 19:20:43\nupdated: 2016-10-01 20:19:21\ncategories: 并发控制相关知识点\ntags: [并发控制, 锁]\ncopyright: true\nmathjax: true\n---\n\n#### 高并发场景\n&emsp;&emsp;首先假设一个业务场景：数据库中有一条数据，需要获取到当前的值，在当前值的基础上$+10$，然后再更新回去。如果此时有两个线程同时并发处理，第一个线程拿到数据是$10，+10=20$更新回去。第二个线程原本是要在第一个线程的基础上再$+20=40$,结果由于并发访问取到更新前的数据为$10，+20=30$。\n这就是典型的存在中间状态，导致数据不正确。来看以下的例子：\n并发所带来的问题，和上文提到的类似，这里有一张price表，表结构如下：\n\n```sql\nCREATE TABLE `price` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `total` decimal(12,2) DEFAULT '0.00' COMMENT '总值',\n  `front` decimal(12,2) DEFAULT '0.00' COMMENT '消费前',\n  `end` decimal(12,2) DEFAULT '0.00' COMMENT '消费后',\n  `add_time` timestamp NULL DEFAULT NULL COMMENT '添加时间',\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP, COMMENT '更新时间',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8\n```\n\n<!--more-->\n\n单测例子如下([Github代码地址]())：\n\n```java\n//就一个主线程，循环100次，每次把front的值减去10，再写入一次流水记录，正常情况是写入的每条记录都会每次减去10。\n @Test\n    public void singleCounsumerTest() {\n\n        for (int i = 0; i < 100; i++) {\n            Price price = priceMapper.selectByPrimaryKey(1);\n            int ron = 10;\n            price.setFront(price.getFront().subtract(new BigDecimal(ron)));\n            price.setEnd(price.getEnd().add(new BigDecimal(ron)));\n            price.setTotal(price.getFront().add(price.getEnd()));\n\n            priceMapper.updateByPrimaryKey(price);\n            price.setId(null);\n            priceMapper.insertSelective(price);\n        }\n    }\n```\n执行结果如下图：\n![图（1）](http://p5vswdxl9.bkt.clouddn.com/result1.png)\n可以看到确实是每次都递减10，但是如果是多线程的情况下会是如何呢？（[代码PriceController](https://github.com/edgeowner/saber)）\n```java\n @Slf4j\n@RestController\n@RequestMapping(\"/price\")\npublic class PriceController {\n\n    @Autowired\n    private PriceApplication priceApplication;\n\n    @Autowired\n    private PriceMapper priceMapper;\n    @Autowired\n    private ThreadPoolConfig config;\n\n\n    /**\n     * 多线程并发执行Demo ,无锁场景下的更新\n     *\n     * @param priceVO\n     * @return message\n     */\n    @RequestMapping(value = \"/update\", method = RequestMethod.POST)\n    public ResponseEntity<Map<String, Object>> updatePrice(@RequestBody PriceVO priceVO) {\n\n        try {\n            if (priceVO == null) {\n                throw new BizException(BizException.NUM_VALIDATION, \"priceVO is null\");\n            }\n\n            for (int i = 0; i < 10; i++) {\n                final int count = i;\n                Thread thread = new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        toUpdatePrice(count);\n                    }\n                });\n                config.submit(thread);\n            }\n            return WebUtil.success(\"price更新成功\");\n        } catch (BizException ex) {\n            log.error(\"更新价格失败\", ExceptionUtils.getFullStackTrace(ex));\n            return WebUtil.error(ex.getErrorMessage());\n        }\n\n    }\n\n\n    private void toUpdatePrice(int count) {\n        log.info(MessageFormat.format(\"thread create start:{0} \", count));\n        Price price = priceMapper.selectByPrimaryKey(1);\n        int ron = 10;\n        price.setFront(price.getFront().subtract(new BigDecimal(ron)));\n        price.setEnd(price.getEnd().add(new BigDecimal(ron)));\n        priceMapper.updateByPrimaryKey(price);\n        price.setId(null);\n        priceMapper.insertSelective(price);\n        log.info(MessageFormat.format(\"thread create end:{0} \", count));\n    }\n}\n```\n关于线程池的使用今后会仔细探讨。这里就简单理解为有10个线程并发去处理上面单线程的逻辑，来看看结果怎么样？\n![图（2）](http://p5vswdxl9.bkt.clouddn.com/result2.png)\n\n会看到明显的数据错误，导致错误的原因自然就是有线程读取到了中间状态进行了错误的更新。\n进而有了以下两种解决方案：***悲观锁 ***和***乐观锁 ***。\n\n-------\n\n#### 悲观锁\n&emsp;&emsp;简单理解下悲观锁：当一个事务锁定了一些数据之后，只有当当前锁提交了事务，释放了锁，其他事务才能获得锁并执行操作。\n使用方式如下：\n首先要关闭MySQL的自动提交：set autocommit = 0;\n```sql\nbigen --开启事务\nselect id, total, front, end from price where id=1 for update \n\ninsert into price values(?,?,?,?,?)\n\ncommit --提交事务\n```\n这里使用**select for update**的方式利用数据库开启了悲观锁，锁定了id=1的这条数据(注意：**这里除非是使用了索引会启用行级锁，不然是会使用表锁，将整张表都锁住。**)。之后使用commit提交事务并释放锁，这样下一个线程过来拿到的就是正确的数据。\n悲观锁一般是用于并发不是很高，并且不允许脏读等情况。但是对数据库资源消耗较大。\n\n-------\n\n#### 乐观锁\n&emsp;&emsp;乐观锁是首先假设数据冲突很少，只有在数据提交修改的时候才进行校验，如果冲突了则不会进行更新。\n通常的实现方式增加一个version字段，为每一条数据加上版本。每次更新的时候version+1，并且更新时候带上版本号。实现方式如下：\n新建了一张price_version表：\n```sql\nCREATE TABLE `price_version` (\n  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `total` decimal(12,2) DEFAULT '0.00' COMMENT '总值',\n  `front` decimal(12,2) DEFAULT '0.00' COMMENT '消费前',\n  `end` decimal(12,2) DEFAULT '0.00' COMMENT '消费后',\n  `version` int(11) DEFAULT '0' COMMENT '并发版本控制',\n  `add_time` timestamp NULL DEFAULT NULL  COMMENT '添加时间',\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP  COMMENT '更新时间',\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\n```\n``更新数据的SQL``：\n```xml\n<update id=\"updateByVersion\" parameterType=\"com.demo.saber.infrastructure.po.PriceVersion\">\n        update price_version\n        set front = #{front, jdbcType=DECIMAL},\n            version = version + 1\n        where id = #{id, jdbcType=INTEGER}\n        and version = #{version, jdbcType=INTEGER}\n    </update>\n```\n``调用方式``：\n```java\n@Slf4j\n@RestController\n@RequestMapping(\"/priceverion\")\npublic class PriceVersionController {\n\n\n    @Autowired\n    private PriceVersionMapper priceVersionMapper;\n\n\n    @Autowired\n    private ThreadPoolConfig config;\n\n    /**\n     * 多线程并发执行Demo ,乐观锁场景下的更新\n     *\n     * @param priceVersionVO\n     * @return message\n     */\n    @RequestMapping(value = \"/threadPriceVersion\", method = RequestMethod.POST)\n    public ResponseEntity<Map<String, Object>> updatePrice(@RequestBody PriceVersionVO priceVersionVO) {\n\n        try {\n            if (priceVersionVO == null) {\n                throw new BizException(BizException.NUM_VALIDATION, \"priceVersionVO is null\");\n            }\n\n            for (int i = 0; i < 10; i++) {\n                final int count = i;\n                Thread thread = new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        PriceVersion priceVersion = priceVersionMapper.selectByPrimaryKey(1);\n                        int ron = 10;\n                        //\"本次消费=\" + ron\n                        log.info(MessageFormat.format(\"当前线程({0})本次消费={1}\", count, ron));\n                        priceVersion.setFront(new BigDecimal(ron));\n                        int backflag = priceVersionMapper.updateByVersion(priceVersion);\n                        if (backflag == 0) {\n                            log.error(MessageFormat.format(\"当前线程({0})更新失败\", count));\n                        } else {\n                            log.error(MessageFormat.format(\"当前线程({0})更新成功\", count));\n                        }\n\n                    }\n                });\n                config.submit(thread);\n            }\n            return WebUtil.success(\"priceVersion更新成功\");\n        } catch (BizException ex) {\n            log.error(\"更新priceVersion失败\", ExceptionUtils.getFullStackTrace(ex));\n            return WebUtil.error(ex.getErrorMessage());\n        }\n\n    }\n}\n```\n**处理逻辑 **：开了三个线程生成了20以内的随机数更新到front字段。调用该接口时日志如下：\n![更新日志](http://p5vswdxl9.bkt.clouddn.com/result3.jpg)\n可以看到线程1、2、3、4都更新失败了，线程0更新成功了。\n\n乐观锁在实际应用相对较多，它可以提供更好的并发访问，并且数据库开销较少，但是有可能存在脏读的情况。\n\n-------\n\n#### 代码地址\n[edgeowner](https://github.com/edgeowner/saber)\n\n#### 参考资源\n[SSM (十五) 乐观锁与悲观锁的实际应用](https://juejin.im/post/5962e64c6fb9a06ba14b9cd9)\n\n\n\n\n\n","slug":"Lock/optimistic-pessimistic","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbn500269l8ifhijcd98","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h4 id=\"高并发场景\"><a href=\"#高并发场景\" class=\"headerlink\" title=\"高并发场景\"></a>高并发场景</h4><p>&emsp;&emsp;首先假设一个业务场景：数据库中有一条数据，需要获取到当前的值，在当前值的基础上$+10$，然后再更新回去。如果此时有两个线程同时并发处理，第一个线程拿到数据是$10，+10=20$更新回去。第二个线程原本是要在第一个线程的基础上再$+20=40$,结果由于并发访问取到更新前的数据为$10，+20=30$。<br>这就是典型的存在中间状态，导致数据不正确。来看以下的例子：<br>并发所带来的问题，和上文提到的类似，这里有一张price表，表结构如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`price`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'主键'</span>,</span><br><span class=\"line\">  <span class=\"string\">`total`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'总值'</span>,</span><br><span class=\"line\">  <span class=\"string\">`front`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'消费前'</span>,</span><br><span class=\"line\">  <span class=\"string\">`end`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'消费后'</span>,</span><br><span class=\"line\">  <span class=\"string\">`add_time`</span> <span class=\"keyword\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'添加时间'</span>,</span><br><span class=\"line\">  <span class=\"string\">`update_time`</span> <span class=\"keyword\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>, <span class=\"keyword\">COMMENT</span> <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span>  <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>单测例子如下(<a href=\"\">Github代码地址</a>)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//就一个主线程，循环100次，每次把front的值减去10，再写入一次流水记录，正常情况是写入的每条记录都会每次减去10。</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">singleCounsumerTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            Price price = priceMapper.selectByPrimaryKey(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ron = <span class=\"number\">10</span>;</span><br><span class=\"line\">            price.setFront(price.getFront().subtract(<span class=\"keyword\">new</span> BigDecimal(ron)));</span><br><span class=\"line\">            price.setEnd(price.getEnd().add(<span class=\"keyword\">new</span> BigDecimal(ron)));</span><br><span class=\"line\">            price.setTotal(price.getFront().add(price.getEnd()));</span><br><span class=\"line\"></span><br><span class=\"line\">            priceMapper.updateByPrimaryKey(price);</span><br><span class=\"line\">            price.setId(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            priceMapper.insertSelective(price);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果如下图：<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/result1.png\" alt=\"图（1）\"><br>可以看到确实是每次都递减10，但是如果是多线程的情况下会是如何呢？（<a href=\"https://github.com/edgeowner/saber\" target=\"_blank\" rel=\"noopener\">代码PriceController</a>）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/price\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriceController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PriceApplication priceApplication;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PriceMapper priceMapper;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ThreadPoolConfig config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 多线程并发执行Demo ,无锁场景下的更新</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> priceVO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> message</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/update\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; updatePrice(<span class=\"meta\">@RequestBody</span> PriceVO priceVO) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (priceVO == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BizException(BizException.NUM_VALIDATION, <span class=\"string\">\"priceVO is null\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = i;</span><br><span class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        toUpdatePrice(count);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                config.submit(thread);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> WebUtil.success(<span class=\"string\">\"price更新成功\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BizException ex) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"更新价格失败\"</span>, ExceptionUtils.getFullStackTrace(ex));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> WebUtil.error(ex.getErrorMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">toUpdatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">        log.info(MessageFormat.format(<span class=\"string\">\"thread create start:&#123;0&#125; \"</span>, count));</span><br><span class=\"line\">        Price price = priceMapper.selectByPrimaryKey(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ron = <span class=\"number\">10</span>;</span><br><span class=\"line\">        price.setFront(price.getFront().subtract(<span class=\"keyword\">new</span> BigDecimal(ron)));</span><br><span class=\"line\">        price.setEnd(price.getEnd().add(<span class=\"keyword\">new</span> BigDecimal(ron)));</span><br><span class=\"line\">        priceMapper.updateByPrimaryKey(price);</span><br><span class=\"line\">        price.setId(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        priceMapper.insertSelective(price);</span><br><span class=\"line\">        log.info(MessageFormat.format(<span class=\"string\">\"thread create end:&#123;0&#125; \"</span>, count));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于线程池的使用今后会仔细探讨。这里就简单理解为有10个线程并发去处理上面单线程的逻辑，来看看结果怎么样？<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/result2.png\" alt=\"图（2）\"></p>\n<p>会看到明显的数据错误，导致错误的原因自然就是有线程读取到了中间状态进行了错误的更新。<br>进而有了以下两种解决方案：<strong><em>悲观锁 </em></strong>和<strong><em>乐观锁 </em></strong>。</p>\n<hr>\n<h4 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h4><p>&emsp;&emsp;简单理解下悲观锁：当一个事务锁定了一些数据之后，只有当当前锁提交了事务，释放了锁，其他事务才能获得锁并执行操作。<br>使用方式如下：<br>首先要关闭MySQL的自动提交：set autocommit = 0;<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigen <span class=\"comment\">--开启事务</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, total, front, <span class=\"keyword\">end</span> <span class=\"keyword\">from</span> price <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> price <span class=\"keyword\">values</span>(?,?,?,?,?)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"comment\">--提交事务</span></span><br></pre></td></tr></table></figure></p>\n<p>这里使用<strong>select for update</strong>的方式利用数据库开启了悲观锁，锁定了id=1的这条数据(注意：<strong>这里除非是使用了索引会启用行级锁，不然是会使用表锁，将整张表都锁住。</strong>)。之后使用commit提交事务并释放锁，这样下一个线程过来拿到的就是正确的数据。<br>悲观锁一般是用于并发不是很高，并且不允许脏读等情况。但是对数据库资源消耗较大。</p>\n<hr>\n<h4 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h4><p>&emsp;&emsp;乐观锁是首先假设数据冲突很少，只有在数据提交修改的时候才进行校验，如果冲突了则不会进行更新。<br>通常的实现方式增加一个version字段，为每一条数据加上版本。每次更新的时候version+1，并且更新时候带上版本号。实现方式如下：<br>新建了一张price_version表：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`price_version`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'主键'</span>,</span><br><span class=\"line\">  <span class=\"string\">`total`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'总值'</span>,</span><br><span class=\"line\">  <span class=\"string\">`front`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'消费前'</span>,</span><br><span class=\"line\">  <span class=\"string\">`end`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'消费后'</span>,</span><br><span class=\"line\">  <span class=\"string\">`version`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'并发版本控制'</span>,</span><br><span class=\"line\">  <span class=\"string\">`add_time`</span> <span class=\"keyword\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>  <span class=\"keyword\">COMMENT</span> <span class=\"string\">'添加时间'</span>,</span><br><span class=\"line\">  <span class=\"string\">`update_time`</span> <span class=\"keyword\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>  <span class=\"keyword\">COMMENT</span> <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure></p>\n<p><code>更新数据的SQL</code>：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateByVersion\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.demo.saber.infrastructure.po.PriceVersion\"</span>&gt;</span></span><br><span class=\"line\">        update price_version</span><br><span class=\"line\">        set front = #&#123;front, jdbcType=DECIMAL&#125;,</span><br><span class=\"line\">            version = version + 1</span><br><span class=\"line\">        where id = #&#123;id, jdbcType=INTEGER&#125;</span><br><span class=\"line\">        and version = #&#123;version, jdbcType=INTEGER&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>调用方式</code>：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/priceverion\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriceVersionController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PriceVersionMapper priceVersionMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ThreadPoolConfig config;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 多线程并发执行Demo ,乐观锁场景下的更新</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> priceVersionVO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> message</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/threadPriceVersion\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; updatePrice(<span class=\"meta\">@RequestBody</span> PriceVersionVO priceVersionVO) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (priceVersionVO == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BizException(BizException.NUM_VALIDATION, <span class=\"string\">\"priceVersionVO is null\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = i;</span><br><span class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        PriceVersion priceVersion = priceVersionMapper.selectByPrimaryKey(<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> ron = <span class=\"number\">10</span>;</span><br><span class=\"line\">                        <span class=\"comment\">//\"本次消费=\" + ron</span></span><br><span class=\"line\">                        log.info(MessageFormat.format(<span class=\"string\">\"当前线程(&#123;0&#125;)本次消费=&#123;1&#125;\"</span>, count, ron));</span><br><span class=\"line\">                        priceVersion.setFront(<span class=\"keyword\">new</span> BigDecimal(ron));</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> backflag = priceVersionMapper.updateByVersion(priceVersion);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (backflag == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            log.error(MessageFormat.format(<span class=\"string\">\"当前线程(&#123;0&#125;)更新失败\"</span>, count));</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            log.error(MessageFormat.format(<span class=\"string\">\"当前线程(&#123;0&#125;)更新成功\"</span>, count));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                config.submit(thread);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> WebUtil.success(<span class=\"string\">\"priceVersion更新成功\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BizException ex) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"更新priceVersion失败\"</span>, ExceptionUtils.getFullStackTrace(ex));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> WebUtil.error(ex.getErrorMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>处理逻辑 </strong>：开了三个线程生成了20以内的随机数更新到front字段。调用该接口时日志如下：<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/result3.jpg\" alt=\"更新日志\"><br>可以看到线程1、2、3、4都更新失败了，线程0更新成功了。</p>\n<p>乐观锁在实际应用相对较多，它可以提供更好的并发访问，并且数据库开销较少，但是有可能存在脏读的情况。</p>\n<hr>\n<h4 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a>代码地址</h4><p><a href=\"https://github.com/edgeowner/saber\" target=\"_blank\" rel=\"noopener\">edgeowner</a></p>\n<h4 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h4><p><a href=\"https://juejin.im/post/5962e64c6fb9a06ba14b9cd9\" target=\"_blank\" rel=\"noopener\">SSM (十五) 乐观锁与悲观锁的实际应用</a></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"高并发场景\"><a href=\"#高并发场景\" class=\"headerlink\" title=\"高并发场景\"></a>高并发场景</h4><p>&emsp;&emsp;首先假设一个业务场景：数据库中有一条数据，需要获取到当前的值，在当前值的基础上$+10$，然后再更新回去。如果此时有两个线程同时并发处理，第一个线程拿到数据是$10，+10=20$更新回去。第二个线程原本是要在第一个线程的基础上再$+20=40$,结果由于并发访问取到更新前的数据为$10，+20=30$。<br>这就是典型的存在中间状态，导致数据不正确。来看以下的例子：<br>并发所带来的问题，和上文提到的类似，这里有一张price表，表结构如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`price`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'主键'</span>,</span><br><span class=\"line\">  <span class=\"string\">`total`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'总值'</span>,</span><br><span class=\"line\">  <span class=\"string\">`front`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'消费前'</span>,</span><br><span class=\"line\">  <span class=\"string\">`end`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'消费后'</span>,</span><br><span class=\"line\">  <span class=\"string\">`add_time`</span> <span class=\"keyword\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'添加时间'</span>,</span><br><span class=\"line\">  <span class=\"string\">`update_time`</span> <span class=\"keyword\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>, <span class=\"keyword\">COMMENT</span> <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span>  <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>","more":"<p>单测例子如下(<a href=\"\">Github代码地址</a>)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//就一个主线程，循环100次，每次把front的值减去10，再写入一次流水记录，正常情况是写入的每条记录都会每次减去10。</span></span><br><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">singleCounsumerTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            Price price = priceMapper.selectByPrimaryKey(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> ron = <span class=\"number\">10</span>;</span><br><span class=\"line\">            price.setFront(price.getFront().subtract(<span class=\"keyword\">new</span> BigDecimal(ron)));</span><br><span class=\"line\">            price.setEnd(price.getEnd().add(<span class=\"keyword\">new</span> BigDecimal(ron)));</span><br><span class=\"line\">            price.setTotal(price.getFront().add(price.getEnd()));</span><br><span class=\"line\"></span><br><span class=\"line\">            priceMapper.updateByPrimaryKey(price);</span><br><span class=\"line\">            price.setId(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">            priceMapper.insertSelective(price);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>执行结果如下图：<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/result1.png\" alt=\"图（1）\"><br>可以看到确实是每次都递减10，但是如果是多线程的情况下会是如何呢？（<a href=\"https://github.com/edgeowner/saber\" target=\"_blank\" rel=\"noopener\">代码PriceController</a>）<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/price\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriceController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PriceApplication priceApplication;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PriceMapper priceMapper;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ThreadPoolConfig config;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 多线程并发执行Demo ,无锁场景下的更新</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> priceVO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> message</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/update\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; updatePrice(<span class=\"meta\">@RequestBody</span> PriceVO priceVO) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (priceVO == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BizException(BizException.NUM_VALIDATION, <span class=\"string\">\"priceVO is null\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = i;</span><br><span class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        toUpdatePrice(count);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                config.submit(thread);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> WebUtil.success(<span class=\"string\">\"price更新成功\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BizException ex) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"更新价格失败\"</span>, ExceptionUtils.getFullStackTrace(ex));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> WebUtil.error(ex.getErrorMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">toUpdatePrice</span><span class=\"params\">(<span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">        log.info(MessageFormat.format(<span class=\"string\">\"thread create start:&#123;0&#125; \"</span>, count));</span><br><span class=\"line\">        Price price = priceMapper.selectByPrimaryKey(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ron = <span class=\"number\">10</span>;</span><br><span class=\"line\">        price.setFront(price.getFront().subtract(<span class=\"keyword\">new</span> BigDecimal(ron)));</span><br><span class=\"line\">        price.setEnd(price.getEnd().add(<span class=\"keyword\">new</span> BigDecimal(ron)));</span><br><span class=\"line\">        priceMapper.updateByPrimaryKey(price);</span><br><span class=\"line\">        price.setId(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        priceMapper.insertSelective(price);</span><br><span class=\"line\">        log.info(MessageFormat.format(<span class=\"string\">\"thread create end:&#123;0&#125; \"</span>, count));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于线程池的使用今后会仔细探讨。这里就简单理解为有10个线程并发去处理上面单线程的逻辑，来看看结果怎么样？<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/result2.png\" alt=\"图（2）\"></p>\n<p>会看到明显的数据错误，导致错误的原因自然就是有线程读取到了中间状态进行了错误的更新。<br>进而有了以下两种解决方案：<strong><em>悲观锁 </em></strong>和<strong><em>乐观锁 </em></strong>。</p>\n<hr>\n<h4 id=\"悲观锁\"><a href=\"#悲观锁\" class=\"headerlink\" title=\"悲观锁\"></a>悲观锁</h4><p>&emsp;&emsp;简单理解下悲观锁：当一个事务锁定了一些数据之后，只有当当前锁提交了事务，释放了锁，其他事务才能获得锁并执行操作。<br>使用方式如下：<br>首先要关闭MySQL的自动提交：set autocommit = 0;<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bigen <span class=\"comment\">--开启事务</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, total, front, <span class=\"keyword\">end</span> <span class=\"keyword\">from</span> price <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> price <span class=\"keyword\">values</span>(?,?,?,?,?)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"comment\">--提交事务</span></span><br></pre></td></tr></table></figure></p>\n<p>这里使用<strong>select for update</strong>的方式利用数据库开启了悲观锁，锁定了id=1的这条数据(注意：<strong>这里除非是使用了索引会启用行级锁，不然是会使用表锁，将整张表都锁住。</strong>)。之后使用commit提交事务并释放锁，这样下一个线程过来拿到的就是正确的数据。<br>悲观锁一般是用于并发不是很高，并且不允许脏读等情况。但是对数据库资源消耗较大。</p>\n<hr>\n<h4 id=\"乐观锁\"><a href=\"#乐观锁\" class=\"headerlink\" title=\"乐观锁\"></a>乐观锁</h4><p>&emsp;&emsp;乐观锁是首先假设数据冲突很少，只有在数据提交修改的时候才进行校验，如果冲突了则不会进行更新。<br>通常的实现方式增加一个version字段，为每一条数据加上版本。每次更新的时候version+1，并且更新时候带上版本号。实现方式如下：<br>新建了一张price_version表：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`price_version`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'主键'</span>,</span><br><span class=\"line\">  <span class=\"string\">`total`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'总值'</span>,</span><br><span class=\"line\">  <span class=\"string\">`front`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'消费前'</span>,</span><br><span class=\"line\">  <span class=\"string\">`end`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'消费后'</span>,</span><br><span class=\"line\">  <span class=\"string\">`version`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'并发版本控制'</span>,</span><br><span class=\"line\">  <span class=\"string\">`add_time`</span> <span class=\"keyword\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>  <span class=\"keyword\">COMMENT</span> <span class=\"string\">'添加时间'</span>,</span><br><span class=\"line\">  <span class=\"string\">`update_time`</span> <span class=\"keyword\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>  <span class=\"keyword\">COMMENT</span> <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure></p>\n<p><code>更新数据的SQL</code>：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">\"updateByVersion\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"com.demo.saber.infrastructure.po.PriceVersion\"</span>&gt;</span></span><br><span class=\"line\">        update price_version</span><br><span class=\"line\">        set front = #&#123;front, jdbcType=DECIMAL&#125;,</span><br><span class=\"line\">            version = version + 1</span><br><span class=\"line\">        where id = #&#123;id, jdbcType=INTEGER&#125;</span><br><span class=\"line\">        and version = #&#123;version, jdbcType=INTEGER&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>调用方式</code>：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf</span>4j</span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/priceverion\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriceVersionController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> PriceVersionMapper priceVersionMapper;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ThreadPoolConfig config;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 多线程并发执行Demo ,乐观锁场景下的更新</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> priceVersionVO</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> message</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/threadPriceVersion\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; updatePrice(<span class=\"meta\">@RequestBody</span> PriceVersionVO priceVersionVO) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (priceVersionVO == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BizException(BizException.NUM_VALIDATION, <span class=\"string\">\"priceVersionVO is null\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = i;</span><br><span class=\"line\">                Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        PriceVersion priceVersion = priceVersionMapper.selectByPrimaryKey(<span class=\"number\">1</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> ron = <span class=\"number\">10</span>;</span><br><span class=\"line\">                        <span class=\"comment\">//\"本次消费=\" + ron</span></span><br><span class=\"line\">                        log.info(MessageFormat.format(<span class=\"string\">\"当前线程(&#123;0&#125;)本次消费=&#123;1&#125;\"</span>, count, ron));</span><br><span class=\"line\">                        priceVersion.setFront(<span class=\"keyword\">new</span> BigDecimal(ron));</span><br><span class=\"line\">                        <span class=\"keyword\">int</span> backflag = priceVersionMapper.updateByVersion(priceVersion);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (backflag == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                            log.error(MessageFormat.format(<span class=\"string\">\"当前线程(&#123;0&#125;)更新失败\"</span>, count));</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            log.error(MessageFormat.format(<span class=\"string\">\"当前线程(&#123;0&#125;)更新成功\"</span>, count));</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                config.submit(thread);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> WebUtil.success(<span class=\"string\">\"priceVersion更新成功\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (BizException ex) &#123;</span><br><span class=\"line\">            log.error(<span class=\"string\">\"更新priceVersion失败\"</span>, ExceptionUtils.getFullStackTrace(ex));</span><br><span class=\"line\">            <span class=\"keyword\">return</span> WebUtil.error(ex.getErrorMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>处理逻辑 </strong>：开了三个线程生成了20以内的随机数更新到front字段。调用该接口时日志如下：<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/result3.jpg\" alt=\"更新日志\"><br>可以看到线程1、2、3、4都更新失败了，线程0更新成功了。</p>\n<p>乐观锁在实际应用相对较多，它可以提供更好的并发访问，并且数据库开销较少，但是有可能存在脏读的情况。</p>\n<hr>\n<h4 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a>代码地址</h4><p><a href=\"https://github.com/edgeowner/saber\" target=\"_blank\" rel=\"noopener\">edgeowner</a></p>\n<h4 id=\"参考资源\"><a href=\"#参考资源\" class=\"headerlink\" title=\"参考资源\"></a>参考资源</h4><p><a href=\"https://juejin.im/post/5962e64c6fb9a06ba14b9cd9\" target=\"_blank\" rel=\"noopener\">SSM (十五) 乐观锁与悲观锁的实际应用</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Oct 01 2016 20:19:21 GMT+0800 (CST)","title":"乐观锁与悲观锁的实际应用","path":"2016/10/01/Lock/optimistic-pessimistic/","eyeCatchImage":null,"excerpt":"<h4 id=\"高并发场景\"><a href=\"#高并发场景\" class=\"headerlink\" title=\"高并发场景\"></a>高并发场景</h4><p>&emsp;&emsp;首先假设一个业务场景：数据库中有一条数据，需要获取到当前的值，在当前值的基础上$+10$，然后再更新回去。如果此时有两个线程同时并发处理，第一个线程拿到数据是$10，+10=20$更新回去。第二个线程原本是要在第一个线程的基础上再$+20=40$,结果由于并发访问取到更新前的数据为$10，+20=30$。<br>这就是典型的存在中间状态，导致数据不正确。来看以下的例子：<br>并发所带来的问题，和上文提到的类似，这里有一张price表，表结构如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`price`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT <span class=\"keyword\">COMMENT</span> <span class=\"string\">'主键'</span>,</span><br><span class=\"line\">  <span class=\"string\">`total`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'总值'</span>,</span><br><span class=\"line\">  <span class=\"string\">`front`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'消费前'</span>,</span><br><span class=\"line\">  <span class=\"string\">`end`</span> <span class=\"built_in\">decimal</span>(<span class=\"number\">12</span>,<span class=\"number\">2</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0.00'</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'消费后'</span>,</span><br><span class=\"line\">  <span class=\"string\">`add_time`</span> <span class=\"keyword\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">'添加时间'</span>,</span><br><span class=\"line\">  <span class=\"string\">`update_time`</span> <span class=\"keyword\">timestamp</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>, <span class=\"keyword\">COMMENT</span> <span class=\"string\">'更新时间'</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span>  <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>","date":"2016-10-01T11:20:43.000Z","pv":0,"totalPV":0,"categories":"并发控制相关知识点","tags":["并发控制","锁"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"数据库的锁","date":"2016-11-06T12:20:43.000Z","updated":"2016-11-06T13:40:21.000Z","copyright":true,"mathjax":true,"_content":"[](http://www.hollischuang.com/archives/909)\n\n","source":"_posts/Mysql/dateSourceLock.md","raw":"---\ntitle: 数据库的锁 \ndate: 2016-11-06 20:20:43\nupdated: 2016-11-06 21:40:21\ncategories: 并发控制相关知识点\ntags: [并发控制, 锁]\ncopyright: true\nmathjax: true\n---\n[](http://www.hollischuang.com/archives/909)\n\n","slug":"Mysql/dateSourceLock","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbn7002a9l8i4m6z68ex","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><a href=\"http://www.hollischuang.com/archives/909\" target=\"_blank\" rel=\"noopener\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://www.hollischuang.com/archives/909\" target=\"_blank\" rel=\"noopener\"></a></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sun Nov 06 2016 21:40:21 GMT+0800 (CST)","title":"数据库的锁","path":"2016/11/06/Mysql/dateSourceLock/","eyeCatchImage":null,"excerpt":null,"date":"2016-11-06T12:20:43.000Z","pv":0,"totalPV":0,"categories":"并发控制相关知识点","tags":["并发控制","锁"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Mysql索引介绍","date":"2017-05-06T11:23:43.000Z","updated":"2017-05-06T13:40:21.000Z","copyright":true,"mathjax":true,"_content":"[](https://segmentfault.com/a/1190000012773157)\n\n\n","source":"_posts/Mysql/mysql-index.md","raw":"---\ntitle: Mysql索引介绍\ndate: 2017-05-06 19:23:43\nupdated: 2017-05-06 21:40:21\ncategories: 示例代码\ntags: [Code]\ncopyright: true\nmathjax: true\n---\n[](https://segmentfault.com/a/1190000012773157)\n\n\n","slug":"Mysql/mysql-index","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbn8002d9l8iv7u6p38b","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p><a href=\"https://segmentfault.com/a/1190000012773157\" target=\"_blank\" rel=\"noopener\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://segmentfault.com/a/1190000012773157\" target=\"_blank\" rel=\"noopener\"></a></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat May 06 2017 21:40:21 GMT+0800 (CST)","title":"Mysql索引介绍","path":"2017/05/06/Mysql/mysql-index/","eyeCatchImage":null,"excerpt":null,"date":"2017-05-06T11:23:43.000Z","pv":0,"totalPV":0,"categories":"示例代码","tags":["Code"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"堆排序（Heap Sort）","copyright":true,"date":"2015-03-24T02:12:31.000Z","updated":"2015-03-24T14:19:00.000Z","_content":"\n### 堆排序\n堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。\n堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。\n大堆小堆图例：\n![](http://p5vswdxl9.bkt.clouddn.com/%E5%A4%A7%E5%A0%86%E5%B0%8F%E5%A0%86.png)\n简单来说：堆排序是将数据看成是完全二叉树、根据完全二叉树的特性来进行排序的一种算法。\n最大堆要求节点的元素都要不小于其孩子，最小堆要求节点元素都不大于其左右孩子。那么处于最大堆的根节点的元素一定是这个堆中的最大值。\n完全二叉树有个特性：左边子节点位置 = 当前父节点的两倍 + 1，右边子节点位置 = 当前父节点的两倍 + 2\n[点击参考文章](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484064&idx=2&sn=d308d573df43e8e3b0633d0dc1147c3b&chksm=ebd743a1dca0cab774e7df348401039dda0765923efde0b9cf8e3589c4ceab25c5ec0cea5f7d#rd)\n\n<!-- more -->\n-------\n\n#### 算法思路\n\n这里我们讨论最大堆：当前每个父节点都大于子节点。\nIn this Algorithm we first build the heap using the given elements, We create a Max Heap to sort the elements in ascending order , Once the heap is \ncreated we swap the root node with the last node an delete the last node from the heap。\n1. Build a heap we need transform it into to a max  heap ;\n2. Create a Max heap (this Max heap parent node is always greater than or equal to child nodes);\n3. Remove the node ,in anther way :Swap first and last node and delete the last node from heap;\n4. Repeat the 1,2,3 step ,always build the max heap;\n\n算法动态展示：\n1.  [YouTube视频源地址](https://www.youtube.com/watch?v=MtQL_ll5KhQ&t=26s)\n2. [Heap Sort - step by step guide](https://www.youtube.com/watch?v=51JGP4VVlDc&t=276s);\n3. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180328-140208-HD.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n\n-------\n\n#### 代码实现方式\n(关键节点添加输出标注，可自行追踪执行过程)\n```java\n /**\n     * 堆排序\n     *\n     * @param arrs\n     */\n    public static void heapSort(int[] arrs) {\n        if (arrs == null || arrs.length == 0) {\n            return;\n        }\n        int len = arrs.length;\n        //循环建立最大堆\n        for (int i = 0; i < len; i++) {\n            System.out.println(MessageFormat.format(\"1. heapSort: i,{0}  j,{1}\", i, len - 1));\n            System.out.println(\"--------------1. buildMaxHeap start--------------\");\n            buildMaxHeap(arrs, len - i);\n            //交换堆顶和最后一个元素\n            int temp = arrs[0];\n            arrs[0] = arrs[len - 1 - i];\n            arrs[len - 1 - i] = temp;\n            System.out.println(\"--------------1. buildMaxHeap over--------------\");\n        }\n        \n    }\n\n    /**\n     * 完成最大堆建立\n     *\n     * @param arrs\n     * @param len\n     */\n    private static void buildMaxHeap(int[] arrs, int len) {\n        System.out.println(\"--------------2. buildMaxHeap method start--------------\");\n        System.out.println(MessageFormat.format(\"--------------2. params:{0}--------------\",len));\n        for (int j = (int) Math.floor(len / 2); j >= 0; j--) {\n            heapify(arrs, j, len);\n        }\n    }\n\n    /**\n     * 建立堆 (大顶堆方式)\n     *\n     * @param arrs           完全二叉树\n     * @param currentRooNode 当前父节点位置\n     * @param length         节点总数\n     */\n    private static void heapify(int[] arrs, int currentRooNode, int length) {\n        System.out.println(\"--------------3. heapify method start--------------\");\n        System.out.println(MessageFormat.format(\"--------------3. params:{0},{1}-------------\", currentRooNode, length));\n        if (currentRooNode < length) {\n            //左叶子结点 位置\n            int left = 2 * currentRooNode + 1;\n            //右叶子结点 位置\n            int right = 2 * currentRooNode + 2;\n            int max = currentRooNode;\n\n            if (left < length) {\n                //如果当前根节点的 左叶子节点元素值较大，记录它的位置\n                if (arrs[max] < arrs[left]) {\n                    max = left;\n                }\n            }\n\n            if (right < length) {\n                //如果当前根节点的 右叶子节点元素值较大，记录它的位置\n                if (arrs[max] < arrs[right]) {\n                    max = right;\n                }\n            }\n\n            //如果最大的不是根元素位置，那么就交换\n            if (max != currentRooNode) {\n                int temp = arrs[max];\n                arrs[max] = arrs[currentRooNode];\n                arrs[currentRooNode] = temp;\n                //继续比较，直到完成一次建堆\n                heapify(arrs, max, length);\n            }\n\n        }\n        System.out.println(\"--------------3. heapify method over--------------\");\n    }\n```\n参考地址：[堆排序](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484064&idx=2&sn=d308d573df43e8e3b0633d0dc1147c3b&chksm=ebd743a1dca0cab774e7df348401039dda0765923efde0b9cf8e3589c4ceab25c5ec0cea5f7d#rd)\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n\n\n\n","source":"_posts/SortAlogrithms/heapSort.md","raw":"---\ntitle: 堆排序（Heap Sort）\ntags: [Algorithms, Sort]\ncopyright: true\ndate: 2015-03-24 10:12:31\nupdated: 2015-03-24 22:19:00\ncategories: Algorithms\n---\n\n### 堆排序\n堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。\n堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。\n大堆小堆图例：\n![](http://p5vswdxl9.bkt.clouddn.com/%E5%A4%A7%E5%A0%86%E5%B0%8F%E5%A0%86.png)\n简单来说：堆排序是将数据看成是完全二叉树、根据完全二叉树的特性来进行排序的一种算法。\n最大堆要求节点的元素都要不小于其孩子，最小堆要求节点元素都不大于其左右孩子。那么处于最大堆的根节点的元素一定是这个堆中的最大值。\n完全二叉树有个特性：左边子节点位置 = 当前父节点的两倍 + 1，右边子节点位置 = 当前父节点的两倍 + 2\n[点击参考文章](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484064&idx=2&sn=d308d573df43e8e3b0633d0dc1147c3b&chksm=ebd743a1dca0cab774e7df348401039dda0765923efde0b9cf8e3589c4ceab25c5ec0cea5f7d#rd)\n\n<!-- more -->\n-------\n\n#### 算法思路\n\n这里我们讨论最大堆：当前每个父节点都大于子节点。\nIn this Algorithm we first build the heap using the given elements, We create a Max Heap to sort the elements in ascending order , Once the heap is \ncreated we swap the root node with the last node an delete the last node from the heap。\n1. Build a heap we need transform it into to a max  heap ;\n2. Create a Max heap (this Max heap parent node is always greater than or equal to child nodes);\n3. Remove the node ,in anther way :Swap first and last node and delete the last node from heap;\n4. Repeat the 1,2,3 step ,always build the max heap;\n\n算法动态展示：\n1.  [YouTube视频源地址](https://www.youtube.com/watch?v=MtQL_ll5KhQ&t=26s)\n2. [Heap Sort - step by step guide](https://www.youtube.com/watch?v=51JGP4VVlDc&t=276s);\n3. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180328-140208-HD.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n\n-------\n\n#### 代码实现方式\n(关键节点添加输出标注，可自行追踪执行过程)\n```java\n /**\n     * 堆排序\n     *\n     * @param arrs\n     */\n    public static void heapSort(int[] arrs) {\n        if (arrs == null || arrs.length == 0) {\n            return;\n        }\n        int len = arrs.length;\n        //循环建立最大堆\n        for (int i = 0; i < len; i++) {\n            System.out.println(MessageFormat.format(\"1. heapSort: i,{0}  j,{1}\", i, len - 1));\n            System.out.println(\"--------------1. buildMaxHeap start--------------\");\n            buildMaxHeap(arrs, len - i);\n            //交换堆顶和最后一个元素\n            int temp = arrs[0];\n            arrs[0] = arrs[len - 1 - i];\n            arrs[len - 1 - i] = temp;\n            System.out.println(\"--------------1. buildMaxHeap over--------------\");\n        }\n        \n    }\n\n    /**\n     * 完成最大堆建立\n     *\n     * @param arrs\n     * @param len\n     */\n    private static void buildMaxHeap(int[] arrs, int len) {\n        System.out.println(\"--------------2. buildMaxHeap method start--------------\");\n        System.out.println(MessageFormat.format(\"--------------2. params:{0}--------------\",len));\n        for (int j = (int) Math.floor(len / 2); j >= 0; j--) {\n            heapify(arrs, j, len);\n        }\n    }\n\n    /**\n     * 建立堆 (大顶堆方式)\n     *\n     * @param arrs           完全二叉树\n     * @param currentRooNode 当前父节点位置\n     * @param length         节点总数\n     */\n    private static void heapify(int[] arrs, int currentRooNode, int length) {\n        System.out.println(\"--------------3. heapify method start--------------\");\n        System.out.println(MessageFormat.format(\"--------------3. params:{0},{1}-------------\", currentRooNode, length));\n        if (currentRooNode < length) {\n            //左叶子结点 位置\n            int left = 2 * currentRooNode + 1;\n            //右叶子结点 位置\n            int right = 2 * currentRooNode + 2;\n            int max = currentRooNode;\n\n            if (left < length) {\n                //如果当前根节点的 左叶子节点元素值较大，记录它的位置\n                if (arrs[max] < arrs[left]) {\n                    max = left;\n                }\n            }\n\n            if (right < length) {\n                //如果当前根节点的 右叶子节点元素值较大，记录它的位置\n                if (arrs[max] < arrs[right]) {\n                    max = right;\n                }\n            }\n\n            //如果最大的不是根元素位置，那么就交换\n            if (max != currentRooNode) {\n                int temp = arrs[max];\n                arrs[max] = arrs[currentRooNode];\n                arrs[currentRooNode] = temp;\n                //继续比较，直到完成一次建堆\n                heapify(arrs, max, length);\n            }\n\n        }\n        System.out.println(\"--------------3. heapify method over--------------\");\n    }\n```\n参考地址：[堆排序](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484064&idx=2&sn=d308d573df43e8e3b0633d0dc1147c3b&chksm=ebd743a1dca0cab774e7df348401039dda0765923efde0b9cf8e3589c4ceab25c5ec0cea5f7d#rd)\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n\n\n\n","slug":"SortAlogrithms/heapSort","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbnb002h9l8i8khk5txs","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。<br>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。<br>大堆小堆图例：<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/%E5%A4%A7%E5%A0%86%E5%B0%8F%E5%A0%86.png\" alt=\"\"><br>简单来说：堆排序是将数据看成是完全二叉树、根据完全二叉树的特性来进行排序的一种算法。<br>最大堆要求节点的元素都要不小于其孩子，最小堆要求节点元素都不大于其左右孩子。那么处于最大堆的根节点的元素一定是这个堆中的最大值。<br>完全二叉树有个特性：左边子节点位置 = 当前父节点的两倍 + 1，右边子节点位置 = 当前父节点的两倍 + 2<br><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484064&amp;idx=2&amp;sn=d308d573df43e8e3b0633d0dc1147c3b&amp;chksm=ebd743a1dca0cab774e7df348401039dda0765923efde0b9cf8e3589c4ceab25c5ec0cea5f7d#rd\" target=\"_blank\" rel=\"noopener\">点击参考文章</a></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>这里我们讨论最大堆：当前每个父节点都大于子节点。<br>In this Algorithm we first build the heap using the given elements, We create a Max Heap to sort the elements in ascending order , Once the heap is<br>created we swap the root node with the last node an delete the last node from the heap。</p>\n<ol>\n<li>Build a heap we need transform it into to a max  heap ;</li>\n<li>Create a Max heap (this Max heap parent node is always greater than or equal to child nodes);</li>\n<li>Remove the node ,in anther way :Swap first and last node and delete the last node from heap;</li>\n<li>Repeat the 1,2,3 step ,always build the max heap;</li>\n</ol>\n<p>算法动态展示：</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=MtQL_ll5KhQ&amp;t=26s\" target=\"_blank\" rel=\"noopener\">YouTube视频源地址</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=51JGP4VVlDc&amp;t=276s\" target=\"_blank\" rel=\"noopener\">Heap Sort - step by step guide</a>;</li>\n<li><div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180328-140208-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n</li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式\"><a href=\"#代码实现方式\" class=\"headerlink\" title=\"代码实现方式\"></a>代码实现方式</h4><p>(关键节点添加输出标注，可自行追踪执行过程)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 堆排序</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (arrs == <span class=\"keyword\">null</span> || arrs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> len = arrs.length;</span><br><span class=\"line\">       <span class=\"comment\">//循环建立最大堆</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">           System.out.println(MessageFormat.format(<span class=\"string\">\"1. heapSort: i,&#123;0&#125;  j,&#123;1&#125;\"</span>, i, len - <span class=\"number\">1</span>));</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"--------------1. buildMaxHeap start--------------\"</span>);</span><br><span class=\"line\">           buildMaxHeap(arrs, len - i);</span><br><span class=\"line\">           <span class=\"comment\">//交换堆顶和最后一个元素</span></span><br><span class=\"line\">           <span class=\"keyword\">int</span> temp = arrs[<span class=\"number\">0</span>];</span><br><span class=\"line\">           arrs[<span class=\"number\">0</span>] = arrs[len - <span class=\"number\">1</span> - i];</span><br><span class=\"line\">           arrs[len - <span class=\"number\">1</span> - i] = temp;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"--------------1. buildMaxHeap over--------------\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 完成最大堆建立</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> len</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"--------------2. buildMaxHeap method start--------------\"</span>);</span><br><span class=\"line\">       System.out.println(MessageFormat.format(<span class=\"string\">\"--------------2. params:&#123;0&#125;--------------\"</span>,len));</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = (<span class=\"keyword\">int</span>) Math.floor(len / <span class=\"number\">2</span>); j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">           heapify(arrs, j, len);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 建立堆 (大顶堆方式)</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> arrs           完全二叉树</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> currentRooNode 当前父节点位置</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> length         节点总数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapify</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs, <span class=\"keyword\">int</span> currentRooNode, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"--------------3. heapify method start--------------\"</span>);</span><br><span class=\"line\">       System.out.println(MessageFormat.format(<span class=\"string\">\"--------------3. params:&#123;0&#125;,&#123;1&#125;-------------\"</span>, currentRooNode, length));</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (currentRooNode &lt; length) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//左叶子结点 位置</span></span><br><span class=\"line\">           <span class=\"keyword\">int</span> left = <span class=\"number\">2</span> * currentRooNode + <span class=\"number\">1</span>;</span><br><span class=\"line\">           <span class=\"comment\">//右叶子结点 位置</span></span><br><span class=\"line\">           <span class=\"keyword\">int</span> right = <span class=\"number\">2</span> * currentRooNode + <span class=\"number\">2</span>;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> max = currentRooNode;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (left &lt; length) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//如果当前根节点的 左叶子节点元素值较大，记录它的位置</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (arrs[max] &lt; arrs[left]) &#123;</span><br><span class=\"line\">                   max = left;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (right &lt; length) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//如果当前根节点的 右叶子节点元素值较大，记录它的位置</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (arrs[max] &lt; arrs[right]) &#123;</span><br><span class=\"line\">                   max = right;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//如果最大的不是根元素位置，那么就交换</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (max != currentRooNode) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = arrs[max];</span><br><span class=\"line\">               arrs[max] = arrs[currentRooNode];</span><br><span class=\"line\">               arrs[currentRooNode] = temp;</span><br><span class=\"line\">               <span class=\"comment\">//继续比较，直到完成一次建堆</span></span><br><span class=\"line\">               heapify(arrs, max, length);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"--------------3. heapify method over--------------\"</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考地址：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484064&amp;idx=2&amp;sn=d308d573df43e8e3b0633d0dc1147c3b&amp;chksm=ebd743a1dca0cab774e7df348401039dda0765923efde0b9cf8e3589c4ceab25c5ec0cea5f7d#rd\" target=\"_blank\" rel=\"noopener\">堆排序</a><br>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。<br>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。<br>大堆小堆图例：<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/%E5%A4%A7%E5%A0%86%E5%B0%8F%E5%A0%86.png\" alt=\"\"><br>简单来说：堆排序是将数据看成是完全二叉树、根据完全二叉树的特性来进行排序的一种算法。<br>最大堆要求节点的元素都要不小于其孩子，最小堆要求节点元素都不大于其左右孩子。那么处于最大堆的根节点的元素一定是这个堆中的最大值。<br>完全二叉树有个特性：左边子节点位置 = 当前父节点的两倍 + 1，右边子节点位置 = 当前父节点的两倍 + 2<br><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484064&amp;idx=2&amp;sn=d308d573df43e8e3b0633d0dc1147c3b&amp;chksm=ebd743a1dca0cab774e7df348401039dda0765923efde0b9cf8e3589c4ceab25c5ec0cea5f7d#rd\" target=\"_blank\" rel=\"noopener\">点击参考文章</a></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","more":"<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>这里我们讨论最大堆：当前每个父节点都大于子节点。<br>In this Algorithm we first build the heap using the given elements, We create a Max Heap to sort the elements in ascending order , Once the heap is<br>created we swap the root node with the last node an delete the last node from the heap。</p>\n<ol>\n<li>Build a heap we need transform it into to a max  heap ;</li>\n<li>Create a Max heap (this Max heap parent node is always greater than or equal to child nodes);</li>\n<li>Remove the node ,in anther way :Swap first and last node and delete the last node from heap;</li>\n<li>Repeat the 1,2,3 step ,always build the max heap;</li>\n</ol>\n<p>算法动态展示：</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=MtQL_ll5KhQ&amp;t=26s\" target=\"_blank\" rel=\"noopener\">YouTube视频源地址</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=51JGP4VVlDc&amp;t=276s\" target=\"_blank\" rel=\"noopener\">Heap Sort - step by step guide</a>;</li>\n<li><div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180328-140208-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n</li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式\"><a href=\"#代码实现方式\" class=\"headerlink\" title=\"代码实现方式\"></a>代码实现方式</h4><p>(关键节点添加输出标注，可自行追踪执行过程)<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 堆排序</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (arrs == <span class=\"keyword\">null</span> || arrs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> len = arrs.length;</span><br><span class=\"line\">       <span class=\"comment\">//循环建立最大堆</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">           System.out.println(MessageFormat.format(<span class=\"string\">\"1. heapSort: i,&#123;0&#125;  j,&#123;1&#125;\"</span>, i, len - <span class=\"number\">1</span>));</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"--------------1. buildMaxHeap start--------------\"</span>);</span><br><span class=\"line\">           buildMaxHeap(arrs, len - i);</span><br><span class=\"line\">           <span class=\"comment\">//交换堆顶和最后一个元素</span></span><br><span class=\"line\">           <span class=\"keyword\">int</span> temp = arrs[<span class=\"number\">0</span>];</span><br><span class=\"line\">           arrs[<span class=\"number\">0</span>] = arrs[len - <span class=\"number\">1</span> - i];</span><br><span class=\"line\">           arrs[len - <span class=\"number\">1</span> - i] = temp;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"--------------1. buildMaxHeap over--------------\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 完成最大堆建立</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> len</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"--------------2. buildMaxHeap method start--------------\"</span>);</span><br><span class=\"line\">       System.out.println(MessageFormat.format(<span class=\"string\">\"--------------2. params:&#123;0&#125;--------------\"</span>,len));</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = (<span class=\"keyword\">int</span>) Math.floor(len / <span class=\"number\">2</span>); j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">           heapify(arrs, j, len);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 建立堆 (大顶堆方式)</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> arrs           完全二叉树</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> currentRooNode 当前父节点位置</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> length         节点总数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapify</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs, <span class=\"keyword\">int</span> currentRooNode, <span class=\"keyword\">int</span> length)</span> </span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"--------------3. heapify method start--------------\"</span>);</span><br><span class=\"line\">       System.out.println(MessageFormat.format(<span class=\"string\">\"--------------3. params:&#123;0&#125;,&#123;1&#125;-------------\"</span>, currentRooNode, length));</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (currentRooNode &lt; length) &#123;</span><br><span class=\"line\">           <span class=\"comment\">//左叶子结点 位置</span></span><br><span class=\"line\">           <span class=\"keyword\">int</span> left = <span class=\"number\">2</span> * currentRooNode + <span class=\"number\">1</span>;</span><br><span class=\"line\">           <span class=\"comment\">//右叶子结点 位置</span></span><br><span class=\"line\">           <span class=\"keyword\">int</span> right = <span class=\"number\">2</span> * currentRooNode + <span class=\"number\">2</span>;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> max = currentRooNode;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (left &lt; length) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//如果当前根节点的 左叶子节点元素值较大，记录它的位置</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (arrs[max] &lt; arrs[left]) &#123;</span><br><span class=\"line\">                   max = left;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (right &lt; length) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//如果当前根节点的 右叶子节点元素值较大，记录它的位置</span></span><br><span class=\"line\">               <span class=\"keyword\">if</span> (arrs[max] &lt; arrs[right]) &#123;</span><br><span class=\"line\">                   max = right;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"comment\">//如果最大的不是根元素位置，那么就交换</span></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (max != currentRooNode) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = arrs[max];</span><br><span class=\"line\">               arrs[max] = arrs[currentRooNode];</span><br><span class=\"line\">               arrs[currentRooNode] = temp;</span><br><span class=\"line\">               <span class=\"comment\">//继续比较，直到完成一次建堆</span></span><br><span class=\"line\">               heapify(arrs, max, length);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"--------------3. heapify method over--------------\"</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>参考地址：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484064&amp;idx=2&amp;sn=d308d573df43e8e3b0633d0dc1147c3b&amp;chksm=ebd743a1dca0cab774e7df348401039dda0765923efde0b9cf8e3589c4ceab25c5ec0cea5f7d#rd\" target=\"_blank\" rel=\"noopener\">堆排序</a><br>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 24 2015 22:19:00 GMT+0800 (CST)","title":"堆排序（Heap Sort）","path":"2015/03/24/SortAlogrithms/heapSort/","eyeCatchImage":null,"excerpt":"<h3 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h3><p>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。<br>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。<br>大堆小堆图例：<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/%E5%A4%A7%E5%A0%86%E5%B0%8F%E5%A0%86.png\" alt=\"\"><br>简单来说：堆排序是将数据看成是完全二叉树、根据完全二叉树的特性来进行排序的一种算法。<br>最大堆要求节点的元素都要不小于其孩子，最小堆要求节点元素都不大于其左右孩子。那么处于最大堆的根节点的元素一定是这个堆中的最大值。<br>完全二叉树有个特性：左边子节点位置 = 当前父节点的两倍 + 1，右边子节点位置 = 当前父节点的两倍 + 2<br><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484064&amp;idx=2&amp;sn=d308d573df43e8e3b0633d0dc1147c3b&amp;chksm=ebd743a1dca0cab774e7df348401039dda0765923efde0b9cf8e3589c4ceab25c5ec0cea5f7d#rd\" target=\"_blank\" rel=\"noopener\">点击参考文章</a></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","date":"2015-03-24T02:12:31.000Z","pv":0,"totalPV":0,"categories":"Algorithms","tags":["Algorithms","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"排序算法之高效排序","copyright":true,"date":"2015-03-16T10:02:31.000Z","updated":"2015-03-16T12:29:00.000Z","_content":"## 高效排序\n***快速排序 ***、***堆排序 ***、***希尔排序 ***\n\n<!-- more -->\n---------------------\n### 快速排序：\n> 快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。\n> ***快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。 ***     \n> 快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。     \n快速排序的名字起的是简单粗暴，因为听到这个名字你就知道它存在的意义，就是快而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好。\n\n`基本思想`\n1. 从数列中挑出一个元素，称为 “基准”(pivot);\n2. 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面(相同的数可以到任一边)。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区(partition)操作()；\n3. 递归地(recursive)把小于基准值元素的子数列和大于基准值元素的子数列排序；\n>  递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/quickSort.gif)\n\n`代码实现`\n```java\n   public static void quickSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        quickSort(arr, 0, arr.length - 1);\n    }\n\n    private static int[] quickSort(int[] arr, int left, int right) {\n        if (left < right) {\n            int partitionIndex = partition(arr, left, right);\n            quickSort(arr, left, partitionIndex - 1);\n            quickSort(arr, partitionIndex + 1, right);\n        }\n        return arr;\n    }\n\n    private static int partition(int[] arr, int left, int right) {\n        //设定基准值(pivot)\n        int pivot = left;\n        int index = pivot + 1;\n        for (int i = index; i <= right; i++) {\n            if (arr[i] < arr[pivot]) {\n                SwapUtils.swap(arr, i, index);\n                index++;\n            }\n        }\n        SwapUtils.swap(arr, pivot, index - 1);\n        return index - 1;\n    }\n```\n\n** 快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。 **\n\n--------------\n\n### 堆排序：\n> 堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：\n>> 大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；\n>> 小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；\n> 将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。\n\n`基本思想`\n1. 创建一个堆 H[0……n-1]；\n2. 把堆首（最大值）和堆尾互换；\n3. 把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；\n4. 重复步骤2，直到堆的尺寸为 1。\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/heapSort.gif)\n\n`代码实现`\n```java\npublic static void heapSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        \n        int len = arr.length;\n\n        buildMaxHeap(arr, len);\n\n        for (int i = len - 1; i > 0; i--) {\n            SwapUtils.swap(arr, 0, i);\n            len--;\n            heapify(arr, 0, len);\n        }\n    }\n\n    private static void buildMaxHeap(int[] arr, int len) {\n        for (int i = (int) Math.floor(len / 2); i >= 0; i--) {\n            heapify(arr, i, len);\n        }\n    }\n\n    private static void heapify(int[] arr, int i, int len) {\n\n        int left = 2 * i + 1;\n        int right = 2 * i + 2;\n        int largest = i;\n\n        if (left < len && arr[left] > arr[largest]) {\n            largest = left;\n        }\n\n        if (right < len && arr[right] > arr[largest]) {\n            largest = right;\n        }\n\n        if (largest != i) {\n            SwapUtils.swap(arr, i, largest);\n            heapify(arr, largest, len);\n        }\n\n    }\n```\n\n** 堆排序的平均时间复杂度为 Ο(nlogn)。 **\n\n--------------\n\n### 希尔排序：\n> 希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。\n> 希尔排序是基于插入排序的以下两点性质而提出改进方法的：\n插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；\n> 希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n`基本思想`\n1. 选择一个增量序列t1，t2，……，tk，其中ti > tj,tk = 1；\n2. 按增量序列个数 k，对序列进行 k 趟排序；\n3. 每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。\n> 算法先将要排序的一组数按某个增量d（n/2,n为要排序数的个数）分成若干组，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。当增量减到1时，进行直接插入排序后，排序完成。\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/shellSort.png)\n`代码实现`\n```java\n  /**\n     * 希尔排序 针对有序序列在插入时采用交换法\n     *\n     * @param arr\n     */\n    private static void shellSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        //增量gap，并逐步缩小增量\n        for (int gap = arr.length / 2; gap > 0; gap /= 2) {\n            //从第gap个元素，逐个对其所在组进行直接插入排序操作\n            for (int i = gap; i < arr.length; i++) {\n                int j = i;\n                while (j - gap >= 0 && arr[j] < arr[j - gap]) {\n                    SwapUtils.swap(arr, j, j - gap);\n                    j -= gap;\n                }\n            }\n        }\n    }\n\n    /**\n     * 希尔排序 针对有序序列在插入时采用移动法。\n     *\n     * @param arr\n     */\n    private static void shellSort2(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        //增量gap，并逐步缩小增量\n        for (int gap = arr.length / 2; gap > 0; gap /= 2) {\n            //从第gap个元素，逐个对其所在组进行直接插入排序操作\n            for (int i = gap; i < arr.length; i++) {\n                int j = i;\n                int temp = arr[j];\n\n                while (j - gap >= 0 && arr[j] < arr[j - gap]) {\n                    //移动法\n                    arr[j] = arr[j - gap];\n                    j -= gap;\n                }\n                arr[j] = temp;\n            }\n        }\n    }\n```\n\n**希尔排序中对于增量序列的选择十分重要，直接影响到希尔排序的性能。我们上面选择的增量序列{n/2,(n/2)/2...1}(希尔增量)，其最坏时间复杂度依然为O(n2)，一些经过优化的增量序列如Hibbard经过复杂证明可使得最坏时间复杂度为O(n3/2)。**\n\n","source":"_posts/SortAlogrithms/high-efficiency.md","raw":"---\ntitle: 排序算法之高效排序\ntags: [Algorithms, Sort]\ncopyright: true\ndate: 2015-03-16 18:02:31\nupdated: 2015-03-16 20:29:00\ncategories: Algorithms\n---\n## 高效排序\n***快速排序 ***、***堆排序 ***、***希尔排序 ***\n\n<!-- more -->\n---------------------\n### 快速排序：\n> 快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。\n> ***快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。 ***     \n> 快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。     \n快速排序的名字起的是简单粗暴，因为听到这个名字你就知道它存在的意义，就是快而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好。\n\n`基本思想`\n1. 从数列中挑出一个元素，称为 “基准”(pivot);\n2. 重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面(相同的数可以到任一边)。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区(partition)操作()；\n3. 递归地(recursive)把小于基准值元素的子数列和大于基准值元素的子数列排序；\n>  递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/quickSort.gif)\n\n`代码实现`\n```java\n   public static void quickSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        quickSort(arr, 0, arr.length - 1);\n    }\n\n    private static int[] quickSort(int[] arr, int left, int right) {\n        if (left < right) {\n            int partitionIndex = partition(arr, left, right);\n            quickSort(arr, left, partitionIndex - 1);\n            quickSort(arr, partitionIndex + 1, right);\n        }\n        return arr;\n    }\n\n    private static int partition(int[] arr, int left, int right) {\n        //设定基准值(pivot)\n        int pivot = left;\n        int index = pivot + 1;\n        for (int i = index; i <= right; i++) {\n            if (arr[i] < arr[pivot]) {\n                SwapUtils.swap(arr, i, index);\n                index++;\n            }\n        }\n        SwapUtils.swap(arr, pivot, index - 1);\n        return index - 1;\n    }\n```\n\n** 快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。 **\n\n--------------\n\n### 堆排序：\n> 堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：\n>> 大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；\n>> 小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；\n> 将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。\n\n`基本思想`\n1. 创建一个堆 H[0……n-1]；\n2. 把堆首（最大值）和堆尾互换；\n3. 把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；\n4. 重复步骤2，直到堆的尺寸为 1。\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/heapSort.gif)\n\n`代码实现`\n```java\npublic static void heapSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        \n        int len = arr.length;\n\n        buildMaxHeap(arr, len);\n\n        for (int i = len - 1; i > 0; i--) {\n            SwapUtils.swap(arr, 0, i);\n            len--;\n            heapify(arr, 0, len);\n        }\n    }\n\n    private static void buildMaxHeap(int[] arr, int len) {\n        for (int i = (int) Math.floor(len / 2); i >= 0; i--) {\n            heapify(arr, i, len);\n        }\n    }\n\n    private static void heapify(int[] arr, int i, int len) {\n\n        int left = 2 * i + 1;\n        int right = 2 * i + 2;\n        int largest = i;\n\n        if (left < len && arr[left] > arr[largest]) {\n            largest = left;\n        }\n\n        if (right < len && arr[right] > arr[largest]) {\n            largest = right;\n        }\n\n        if (largest != i) {\n            SwapUtils.swap(arr, i, largest);\n            heapify(arr, largest, len);\n        }\n\n    }\n```\n\n** 堆排序的平均时间复杂度为 Ο(nlogn)。 **\n\n--------------\n\n### 希尔排序：\n> 希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。\n> 希尔排序是基于插入排序的以下两点性质而提出改进方法的：\n插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；\n> 希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n`基本思想`\n1. 选择一个增量序列t1，t2，……，tk，其中ti > tj,tk = 1；\n2. 按增量序列个数 k，对序列进行 k 趟排序；\n3. 每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。\n> 算法先将要排序的一组数按某个增量d（n/2,n为要排序数的个数）分成若干组，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。当增量减到1时，进行直接插入排序后，排序完成。\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/shellSort.png)\n`代码实现`\n```java\n  /**\n     * 希尔排序 针对有序序列在插入时采用交换法\n     *\n     * @param arr\n     */\n    private static void shellSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        //增量gap，并逐步缩小增量\n        for (int gap = arr.length / 2; gap > 0; gap /= 2) {\n            //从第gap个元素，逐个对其所在组进行直接插入排序操作\n            for (int i = gap; i < arr.length; i++) {\n                int j = i;\n                while (j - gap >= 0 && arr[j] < arr[j - gap]) {\n                    SwapUtils.swap(arr, j, j - gap);\n                    j -= gap;\n                }\n            }\n        }\n    }\n\n    /**\n     * 希尔排序 针对有序序列在插入时采用移动法。\n     *\n     * @param arr\n     */\n    private static void shellSort2(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        //增量gap，并逐步缩小增量\n        for (int gap = arr.length / 2; gap > 0; gap /= 2) {\n            //从第gap个元素，逐个对其所在组进行直接插入排序操作\n            for (int i = gap; i < arr.length; i++) {\n                int j = i;\n                int temp = arr[j];\n\n                while (j - gap >= 0 && arr[j] < arr[j - gap]) {\n                    //移动法\n                    arr[j] = arr[j - gap];\n                    j -= gap;\n                }\n                arr[j] = temp;\n            }\n        }\n    }\n```\n\n**希尔排序中对于增量序列的选择十分重要，直接影响到希尔排序的性能。我们上面选择的增量序列{n/2,(n/2)/2...1}(希尔增量)，其最坏时间复杂度依然为O(n2)，一些经过优化的增量序列如Hibbard经过复杂证明可使得最坏时间复杂度为O(n3/2)。**\n\n","slug":"SortAlogrithms/high-efficiency","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbnc002j9l8iwd7dh4lo","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"高效排序\"><a href=\"#高效排序\" class=\"headerlink\" title=\"高效排序\"></a>高效排序</h2><p><strong><em>快速排序 </em></strong>、<strong><em>堆排序 </em></strong>、<strong><em>希尔排序 </em></strong></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h3 id=\"快速排序：\"><a href=\"#快速排序：\" class=\"headerlink\" title=\"快速排序：\"></a>快速排序：</h3><blockquote>\n<p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。<br><strong><em>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。 </em></strong><br>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。<br>快速排序的名字起的是简单粗暴，因为听到这个名字你就知道它存在的意义，就是快而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好。</p>\n</blockquote>\n<p><code>基本思想</code></p>\n<ol>\n<li>从数列中挑出一个元素，称为 “基准”(pivot);</li>\n<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面(相同的数可以到任一边)。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区(partition)操作()；</li>\n<li>递归地(recursive)把小于基准值元素的子数列和大于基准值元素的子数列排序；<blockquote>\n<p> 递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>\n</blockquote>\n</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/quickSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     quickSort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] quickSort(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> partitionIndex = partition(arr, left, right);</span><br><span class=\"line\">         quickSort(arr, left, partitionIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">         quickSort(arr, partitionIndex + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//设定基准值(pivot)</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> pivot = left;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> index = pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = index; i &lt;= right; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class=\"line\">             SwapUtils.swap(arr, i, index);</span><br><span class=\"line\">             index++;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     SwapUtils.swap(arr, pivot, index - <span class=\"number\">1</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> index - <span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。 </strong></p>\n<hr>\n<h3 id=\"堆排序：\"><a href=\"#堆排序：\" class=\"headerlink\" title=\"堆排序：\"></a>堆排序：</h3><blockquote>\n<p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p>\n<blockquote>\n<p>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；<br>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；<br>将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</p>\n</blockquote>\n</blockquote>\n<p><code>基本思想</code></p>\n<ol>\n<li>创建一个堆 H[0……n-1]；</li>\n<li>把堆首（最大值）和堆尾互换；</li>\n<li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li>\n<li>重复步骤2，直到堆的尺寸为 1。</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/heapSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = arr.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        buildMaxHeap(arr, len);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            SwapUtils.swap(arr, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">            len--;</span><br><span class=\"line\">            heapify(arr, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (<span class=\"keyword\">int</span>) Math.floor(len / <span class=\"number\">2</span>); i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            heapify(arr, i, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapify</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = <span class=\"number\">2</span> * i + <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> largest = i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class=\"line\">            largest = left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class=\"line\">            largest = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (largest != i) &#123;</span><br><span class=\"line\">            SwapUtils.swap(arr, i, largest);</span><br><span class=\"line\">            heapify(arr, largest, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 堆排序的平均时间复杂度为 Ο(nlogn)。 </strong></p>\n<hr>\n<h3 id=\"希尔排序：\"><a href=\"#希尔排序：\" class=\"headerlink\" title=\"希尔排序：\"></a>希尔排序：</h3><blockquote>\n<p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：<br>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；<br>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>\n</blockquote>\n<p><code>基本思想</code></p>\n<ol>\n<li>选择一个增量序列t1，t2，……，tk，其中ti &gt; tj,tk = 1；</li>\n<li>按增量序列个数 k，对序列进行 k 趟排序；</li>\n<li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。<blockquote>\n<p>算法先将要排序的一组数按某个增量d（n/2,n为要排序数的个数）分成若干组，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。当增量减到1时，进行直接插入排序后，排序完成。</p>\n</blockquote>\n</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/shellSort.png\" alt=\"\"><br><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 希尔排序 针对有序序列在插入时采用交换法</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//增量gap，并逐步缩小增量</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> gap = arr.length / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//从第gap个元素，逐个对其所在组进行直接插入排序操作</span></span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">              <span class=\"keyword\">while</span> (j - gap &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &lt; arr[j - gap]) &#123;</span><br><span class=\"line\">                  SwapUtils.swap(arr, j, j - gap);</span><br><span class=\"line\">                  j -= gap;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 希尔排序 针对有序序列在插入时采用移动法。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//增量gap，并逐步缩小增量</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> gap = arr.length / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//从第gap个元素，逐个对其所在组进行直接插入排序操作</span></span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> temp = arr[j];</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">while</span> (j - gap &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &lt; arr[j - gap]) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">//移动法</span></span><br><span class=\"line\">                  arr[j] = arr[j - gap];</span><br><span class=\"line\">                  j -= gap;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              arr[j] = temp;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>希尔排序中对于增量序列的选择十分重要，直接影响到希尔排序的性能。我们上面选择的增量序列{n/2,(n/2)/2…1}(希尔增量)，其最坏时间复杂度依然为O(n2)，一些经过优化的增量序列如Hibbard经过复杂证明可使得最坏时间复杂度为O(n3/2)。</strong></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"高效排序\"><a href=\"#高效排序\" class=\"headerlink\" title=\"高效排序\"></a>高效排序</h2><p><strong><em>快速排序 </em></strong>、<strong><em>堆排序 </em></strong>、<strong><em>希尔排序 </em></strong></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","more":"<h3 id=\"快速排序：\"><a href=\"#快速排序：\" class=\"headerlink\" title=\"快速排序：\"></a>快速排序：</h3><blockquote>\n<p>快速排序是由东尼·霍尔所发展的一种排序算法。在平均状况下，排序 n 个项目要 Ο(nlogn) 次比较。在最坏状况下则需要 Ο(n2) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 Ο(nlogn) 算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。<br><strong><em>快速排序使用分治法（Divide and conquer）策略来把一个串行（list）分为两个子串行（sub-lists）。 </em></strong><br>快速排序又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。<br>快速排序的名字起的是简单粗暴，因为听到这个名字你就知道它存在的意义，就是快而且效率高！它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n logn) 的排序算法表现要更好。</p>\n</blockquote>\n<p><code>基本思想</code></p>\n<ol>\n<li>从数列中挑出一个元素，称为 “基准”(pivot);</li>\n<li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面(相同的数可以到任一边)。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区(partition)操作()；</li>\n<li>递归地(recursive)把小于基准值元素的子数列和大于基准值元素的子数列排序；<blockquote>\n<p> 递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会退出，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p>\n</blockquote>\n</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/quickSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     quickSort(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] quickSort(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right) &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> partitionIndex = partition(arr, left, right);</span><br><span class=\"line\">         quickSort(arr, left, partitionIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">         quickSort(arr, partitionIndex + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//设定基准值(pivot)</span></span><br><span class=\"line\">     <span class=\"keyword\">int</span> pivot = left;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> index = pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = index; i &lt;= right; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class=\"line\">             SwapUtils.swap(arr, i, index);</span><br><span class=\"line\">             index++;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     SwapUtils.swap(arr, pivot, index - <span class=\"number\">1</span>);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> index - <span class=\"number\">1</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(nlogn)，且 O(nlogn) 记号中隐含的常数因子很小，比复杂度稳定等于 O(nlogn) 的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。 </strong></p>\n<hr>\n<h3 id=\"堆排序：\"><a href=\"#堆排序：\" class=\"headerlink\" title=\"堆排序：\"></a>堆排序：</h3><blockquote>\n<p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p>\n<blockquote>\n<p>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列；<br>小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列；<br>将待排序序列构造成一个大顶堆，此时，整个序列的最大值就是堆顶的根节点。将其与末尾元素进行交换，此时末尾就为最大值。然后将剩余n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，便能得到一个有序序列了。</p>\n</blockquote>\n</blockquote>\n<p><code>基本思想</code></p>\n<ol>\n<li>创建一个堆 H[0……n-1]；</li>\n<li>把堆首（最大值）和堆尾互换；</li>\n<li>把堆的尺寸缩小 1，并调用 shift_down(0)，目的是把新的数组顶端数据调整到相应位置；</li>\n<li>重复步骤2，直到堆的尺寸为 1。</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/heapSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = arr.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        buildMaxHeap(arr, len);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = len - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            SwapUtils.swap(arr, <span class=\"number\">0</span>, i);</span><br><span class=\"line\">            len--;</span><br><span class=\"line\">            heapify(arr, <span class=\"number\">0</span>, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">buildMaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (<span class=\"keyword\">int</span>) Math.floor(len / <span class=\"number\">2</span>); i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            heapify(arr, i, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapify</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = <span class=\"number\">2</span> * i + <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> largest = i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class=\"line\">            largest = left;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class=\"line\">            largest = right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (largest != i) &#123;</span><br><span class=\"line\">            SwapUtils.swap(arr, i, largest);</span><br><span class=\"line\">            heapify(arr, largest, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 堆排序的平均时间复杂度为 Ο(nlogn)。 </strong></p>\n<hr>\n<h3 id=\"希尔排序：\"><a href=\"#希尔排序：\" class=\"headerlink\" title=\"希尔排序：\"></a>希尔排序：</h3><blockquote>\n<p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：<br>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率；但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位；<br>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>\n</blockquote>\n<p><code>基本思想</code></p>\n<ol>\n<li>选择一个增量序列t1，t2，……，tk，其中ti &gt; tj,tk = 1；</li>\n<li>按增量序列个数 k，对序列进行 k 趟排序；</li>\n<li>每趟排序，根据对应的增量 ti，将待排序列分割成若干长度为 m 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。<blockquote>\n<p>算法先将要排序的一组数按某个增量d（n/2,n为要排序数的个数）分成若干组，每组中记录的下标相差d.对每组中全部元素进行直接插入排序，然后再用一个较小的增量（d/2）对它进行分组，在每组中再进行直接插入排序。当增量减到1时，进行直接插入排序后，排序完成。</p>\n</blockquote>\n</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/shellSort.png\" alt=\"\"><br><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 希尔排序 针对有序序列在插入时采用交换法</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//增量gap，并逐步缩小增量</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> gap = arr.length / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//从第gap个元素，逐个对其所在组进行直接插入排序操作</span></span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">              <span class=\"keyword\">while</span> (j - gap &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &lt; arr[j - gap]) &#123;</span><br><span class=\"line\">                  SwapUtils.swap(arr, j, j - gap);</span><br><span class=\"line\">                  j -= gap;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 希尔排序 针对有序序列在插入时采用移动法。</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort2</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//增量gap，并逐步缩小增量</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> gap = arr.length / <span class=\"number\">2</span>; gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//从第gap个元素，逐个对其所在组进行直接插入排序操作</span></span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">              <span class=\"keyword\">int</span> temp = arr[j];</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"keyword\">while</span> (j - gap &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &lt; arr[j - gap]) &#123;</span><br><span class=\"line\">                  <span class=\"comment\">//移动法</span></span><br><span class=\"line\">                  arr[j] = arr[j - gap];</span><br><span class=\"line\">                  j -= gap;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              arr[j] = temp;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>希尔排序中对于增量序列的选择十分重要，直接影响到希尔排序的性能。我们上面选择的增量序列{n/2,(n/2)/2…1}(希尔增量)，其最坏时间复杂度依然为O(n2)，一些经过优化的增量序列如Hibbard经过复杂证明可使得最坏时间复杂度为O(n3/2)。</strong></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 16 2015 20:29:00 GMT+0800 (CST)","title":"排序算法之高效排序","path":"2015/03/16/SortAlogrithms/high-efficiency/","eyeCatchImage":null,"excerpt":"<h2 id=\"高效排序\"><a href=\"#高效排序\" class=\"headerlink\" title=\"高效排序\"></a>高效排序</h2><p><strong><em>快速排序 </em></strong>、<strong><em>堆排序 </em></strong>、<strong><em>希尔排序 </em></strong></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","date":"2015-03-16T10:02:31.000Z","pv":0,"totalPV":0,"categories":"Algorithms","tags":["Algorithms","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"排序算法之归并排序","copyright":true,"date":"2015-03-18T02:10:31.000Z","updated":"2015-03-19T12:29:00.000Z","_content":"## 分治递归思想排序：\n\n---------------------\n### 归并排序：\n归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。\n作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：\n> 自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；\n> 自下而上的迭代；\n\n`基本思想`\n1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；\n2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置；\n3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；\n4. 重复步骤 3 直到某一指针达到序列尾；\n5. 将另一序列剩下的所有元素直接复制到合并序列尾。\n<!-- more -->\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/mergeSort.gif)\n\n`代码实现`\n```java\n    private static int[] merger2Sort(int[] arr) {\n        if (null == arr || arr.length == 0 || arr.length < 2) {\n            return arr;\n        }\n        return sort(arr);\n    }\n\n    private static int[] sort(int[] arr) {\n        if (arr.length < 2) {\n            return arr;\n        }\n        int middle = (int) Math.floor(arr.length / 2);\n        int[] left = Arrays.copyOfRange(arr, 0, middle);\n        int[] right = Arrays.copyOfRange(arr, middle, arr.length);\n        return merge(sort(left), sort(right));\n    }\n\n    private static int[] merge(int[] left, int[] right) {\n        int[] result = new int[left.length + right.length];\n        int i = 0;\n        while (left.length > 0 && right.length > 0) {\n            if (left[0] <= right[0]) {\n                result[i++] = left[0];\n                left = Arrays.copyOfRange(left, 1, left.length);\n            } else {\n                result[i++] = right[0];\n                right = Arrays.copyOfRange(right, 1, right.length);\n            }\n        }\n\n        while (left.length > 0) {\n            result[i++] = left[0];\n            left = Arrays.copyOfRange(left, 1, left.length);\n        }\n\n        while (right.length > 0) {\n            result[i++] = right[0];\n            right = Arrays.copyOfRange(right, 1, right.length);\n        }\n\n        return result;\n\n    }\n```\n\n** 归并排序是稳定排序，它也是一种十分高效的排序，能利用完全二叉树特性的排序一般性能都不会太差。java中Arrays.sort()采用了一种名为TimSort的排序算法，就是归并排序的优化版本。从上文的图中可看出，每次合并操作的平均时间复杂度为O(n)，而完全二叉树的深度为|log2n|。总的平均时间复杂度为O(nlogn)。而且，归并排序的最好，最坏，平均时间复杂度均为O(nlogn)。 **\n\n--------------\n\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n\n","source":"_posts/SortAlogrithms/division-recursion.md","raw":"---\ntitle: 排序算法之归并排序\ntags: [Algorithms, Sort]\ncopyright: true\ndate: 2015-03-18 10:10:31\nupdated: 2015-03-19 20:29:00\ncategories: Algorithms\n---\n## 分治递归思想排序：\n\n---------------------\n### 归并排序：\n归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。\n作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：\n> 自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；\n> 自下而上的迭代；\n\n`基本思想`\n1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；\n2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置；\n3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；\n4. 重复步骤 3 直到某一指针达到序列尾；\n5. 将另一序列剩下的所有元素直接复制到合并序列尾。\n<!-- more -->\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/mergeSort.gif)\n\n`代码实现`\n```java\n    private static int[] merger2Sort(int[] arr) {\n        if (null == arr || arr.length == 0 || arr.length < 2) {\n            return arr;\n        }\n        return sort(arr);\n    }\n\n    private static int[] sort(int[] arr) {\n        if (arr.length < 2) {\n            return arr;\n        }\n        int middle = (int) Math.floor(arr.length / 2);\n        int[] left = Arrays.copyOfRange(arr, 0, middle);\n        int[] right = Arrays.copyOfRange(arr, middle, arr.length);\n        return merge(sort(left), sort(right));\n    }\n\n    private static int[] merge(int[] left, int[] right) {\n        int[] result = new int[left.length + right.length];\n        int i = 0;\n        while (left.length > 0 && right.length > 0) {\n            if (left[0] <= right[0]) {\n                result[i++] = left[0];\n                left = Arrays.copyOfRange(left, 1, left.length);\n            } else {\n                result[i++] = right[0];\n                right = Arrays.copyOfRange(right, 1, right.length);\n            }\n        }\n\n        while (left.length > 0) {\n            result[i++] = left[0];\n            left = Arrays.copyOfRange(left, 1, left.length);\n        }\n\n        while (right.length > 0) {\n            result[i++] = right[0];\n            right = Arrays.copyOfRange(right, 1, right.length);\n        }\n\n        return result;\n\n    }\n```\n\n** 归并排序是稳定排序，它也是一种十分高效的排序，能利用完全二叉树特性的排序一般性能都不会太差。java中Arrays.sort()采用了一种名为TimSort的排序算法，就是归并排序的优化版本。从上文的图中可看出，每次合并操作的平均时间复杂度为O(n)，而完全二叉树的深度为|log2n|。总的平均时间复杂度为O(nlogn)。而且，归并排序的最好，最坏，平均时间复杂度均为O(nlogn)。 **\n\n--------------\n\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n\n","slug":"SortAlogrithms/division-recursion","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbne002o9l8isiz5hovy","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"分治递归思想排序：\"><a href=\"#分治递归思想排序：\" class=\"headerlink\" title=\"分治递归思想排序：\"></a>分治递归思想排序：</h2><hr>\n<h3 id=\"归并排序：\"><a href=\"#归并排序：\" class=\"headerlink\" title=\"归并排序：\"></a>归并排序：</h3><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。<br>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p>\n<blockquote>\n<p>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；<br>自下而上的迭代；</p>\n</blockquote>\n<p><code>基本思想</code></p>\n<ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\n<li>重复步骤 3 直到某一指针达到序列尾；</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾。<a id=\"more\"></a>\n</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/mergeSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] merger2Sort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span> || arr.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sort(arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] sort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> middle = (<span class=\"keyword\">int</span>) Math.floor(arr.length / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] left = Arrays.copyOfRange(arr, <span class=\"number\">0</span>, middle);</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] right = Arrays.copyOfRange(arr, middle, arr.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(sort(left), sort(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] merge(<span class=\"keyword\">int</span>[] left, <span class=\"keyword\">int</span>[] right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[left.length + right.length];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.length &gt; <span class=\"number\">0</span> &amp;&amp; right.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            result[i++] = left[<span class=\"number\">0</span>];</span><br><span class=\"line\">            left = Arrays.copyOfRange(left, <span class=\"number\">1</span>, left.length);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result[i++] = right[<span class=\"number\">0</span>];</span><br><span class=\"line\">            right = Arrays.copyOfRange(right, <span class=\"number\">1</span>, right.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result[i++] = left[<span class=\"number\">0</span>];</span><br><span class=\"line\">        left = Arrays.copyOfRange(left, <span class=\"number\">1</span>, left.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result[i++] = right[<span class=\"number\">0</span>];</span><br><span class=\"line\">        right = Arrays.copyOfRange(right, <span class=\"number\">1</span>, right.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 归并排序是稳定排序，它也是一种十分高效的排序，能利用完全二叉树特性的排序一般性能都不会太差。java中Arrays.sort()采用了一种名为TimSort的排序算法，就是归并排序的优化版本。从上文的图中可看出，每次合并操作的平均时间复杂度为O(n)，而完全二叉树的深度为|log2n|。总的平均时间复杂度为O(nlogn)。而且，归并排序的最好，最坏，平均时间复杂度均为O(nlogn)。 </strong></p>\n<hr>\n<p>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"分治递归思想排序：\"><a href=\"#分治递归思想排序：\" class=\"headerlink\" title=\"分治递归思想排序：\"></a>分治递归思想排序：</h2><hr>\n<h3 id=\"归并排序：\"><a href=\"#归并排序：\" class=\"headerlink\" title=\"归并排序：\"></a>归并排序：</h3><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。<br>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p>\n<blockquote>\n<p>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；<br>自下而上的迭代；</p>\n</blockquote>\n<p><code>基本思想</code></p>\n<ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\n<li>重复步骤 3 直到某一指针达到序列尾；</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ol>","more":"\n\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/mergeSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] merger2Sort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span> || arr.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sort(arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] sort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.length &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> middle = (<span class=\"keyword\">int</span>) Math.floor(arr.length / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] left = Arrays.copyOfRange(arr, <span class=\"number\">0</span>, middle);</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] right = Arrays.copyOfRange(arr, middle, arr.length);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(sort(left), sort(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] merge(<span class=\"keyword\">int</span>[] left, <span class=\"keyword\">int</span>[] right) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[left.length + right.length];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.length &gt; <span class=\"number\">0</span> &amp;&amp; right.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            result[i++] = left[<span class=\"number\">0</span>];</span><br><span class=\"line\">            left = Arrays.copyOfRange(left, <span class=\"number\">1</span>, left.length);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result[i++] = right[<span class=\"number\">0</span>];</span><br><span class=\"line\">            right = Arrays.copyOfRange(right, <span class=\"number\">1</span>, right.length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result[i++] = left[<span class=\"number\">0</span>];</span><br><span class=\"line\">        left = Arrays.copyOfRange(left, <span class=\"number\">1</span>, left.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result[i++] = right[<span class=\"number\">0</span>];</span><br><span class=\"line\">        right = Arrays.copyOfRange(right, <span class=\"number\">1</span>, right.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 归并排序是稳定排序，它也是一种十分高效的排序，能利用完全二叉树特性的排序一般性能都不会太差。java中Arrays.sort()采用了一种名为TimSort的排序算法，就是归并排序的优化版本。从上文的图中可看出，每次合并操作的平均时间复杂度为O(n)，而完全二叉树的深度为|log2n|。总的平均时间复杂度为O(nlogn)。而且，归并排序的最好，最坏，平均时间复杂度均为O(nlogn)。 </strong></p>\n<hr>\n<p>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Mar 19 2015 20:29:00 GMT+0800 (CST)","title":"排序算法之归并排序","path":"2015/03/18/SortAlogrithms/division-recursion/","eyeCatchImage":null,"excerpt":"<h2 id=\"分治递归思想排序：\"><a href=\"#分治递归思想排序：\" class=\"headerlink\" title=\"分治递归思想排序：\"></a>分治递归思想排序：</h2><hr>\n<h3 id=\"归并排序：\"><a href=\"#归并排序：\" class=\"headerlink\" title=\"归并排序：\"></a>归并排序：</h3><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。<br>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p>\n<blockquote>\n<p>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；<br>自下而上的迭代；</p>\n</blockquote>\n<p><code>基本思想</code></p>\n<ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\n<li>重复步骤 3 直到某一指针达到序列尾；</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li></ol>","date":"2015-03-18T02:10:31.000Z","pv":0,"totalPV":0,"categories":"Algorithms","tags":["Algorithms","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"计数排序（Counting Sort）","copyright":true,"date":"2015-03-27T02:30:31.000Z","updated":"2015-03-27T03:30:14.000Z","mathjax":true,"_content":"### 计数排序\n计数排序是一种稳定的**线性时间排序算法**。计数排序使用一个额外的数组 $C$ ，其中第i个元素是待排序数组 $A$中值等于 $i$ 的元素的个数。然后根据数组 $C$ 来将 $A$ 中的元素排到正确的位置。\n当输入的元素是 $n$ 个 $0$到 $k$ 之间的整数时，它的运行时间是 $\\Theta (n+k)$ 。计数排序不是比较排序，排序的速度快于任何比较排序算法。\n由于用来计数的数组$C$ 的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上 $1$），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序$0$到 $100$ 之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序算法中，能够更有效的排序数据范围很大的数组。\n1. 计数排序(Counting Sort)是一种$O(n)$的排序算法，其思路是开一个长度为$maxValue-minValue+1$的数组，然后分配。扫描一遍原始数组，以当前值$-minValue$作为下标，将该下标的计数器增$1$。\n2. 收集。扫描一遍计数器数组，按顺序把值收集起来。\n3. 计数排序本质上是一种特殊的桶排序，当桶的个数最大的时候，就是计数排序。\n\n<!-- more -->\n\n-------\n\n#### 算法思路\nCounting sort is a sorting technique based on keys between a specific range, it works by counting the number of objects having distinct key values.Then doing some arithmetic to calculate the position of each object in the output sequence.\n\n1. Create a count array to store the count of each unique object;\n2. Initially the count of all elements is zero ;\n3. Count each elements in the given array and  place the count at the appropriate index;\n4. Modify the count array by adding the previous counts;\n5. Corresponding values represent the places in the count array;\n6. We place the objects in their correct positions and decrease the count by one;\n\n*翻译*\n> 1. 找出待排序的中最大元素和最小元素；\n> 2. 统计数组中每个值为 $i$ 的元素出现的次数，存入数组 $C$的第$i$项；\n> 3. 对所有的技术累加（ $C$ 中的第一个元素开始，每一项和前一项相加）；\n> 4. 反向填充目标数组；将每个元素 $i$ i放在新数组的第$C[i]$项，每放一个元素就将 $C[i]$减去$1$ ；\n\n\n算法动态展示\n 1. [YouTube视频源地址](https://www.youtube.com/watch?v=7zuGmKfUt7s&t=15s) ;\n 2. [Counting Sort - step by step guide](https://www.youtube.com/watch?v=TTnvXY82dtM);\n 3. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180402-174913-HD.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n \n-------\n\n#### 代码实现方式\n```java\n /**\n     * 计数排序 \n     *\n     * @param arrs\n     */\n    public static void countingSort(int[] arrs) {\n        int[] copyData = Arrays.copyOf(arrs, arrs.length);\n        int maxValue = arrs[0];\n        int minValue = arrs[0];\n        for (int i = 0; i < copyData.length; i++) {\n            if (copyData[i] > maxValue) {\n                maxValue = copyData[i];\n            }\n            if (copyData[i] < minValue) {\n                minValue = copyData[i];\n            }\n        }\n\n        int range = maxValue - minValue + 1;\n        int[] counts = new int[range];\n        Arrays.fill(counts, 0);\n        //  计算数组中每个值和最小值的差，并计数\n        for (int arr : copyData) {\n            counts[arr - minValue]++;\n        }\n        // 得到数组中大于某个数的值一共有多少个\n        for (int i = 1; i < counts.length; i++) {\n            counts[i] = counts[i] + counts[i - 1];\n        }\n        // 根据数量放置值，每放置一个，对应的值的数量减一\n        for (int i = 0; i < copyData.length; i++) {\n            int index = copyData[i] - minValue;\n            arrs[counts[index] - 1] = copyData[i];\n            counts[index]--;\n        }\n\n\n    }\n\n```\n\n参考地址：[计数排序](https://github.com/hustcc/JS-Sorting-Algorithm/blob/master/8.countingSort.md)\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n","source":"_posts/SortAlogrithms/countingSort.md","raw":"---\ntitle: 计数排序（Counting Sort）\ntags: [Algorithms, Sort]\ncopyright: true\ndate: 2015-03-27 10:30:31\nupdated: 2015-03-27 11:30:14\ncategories: Algorithms\nmathjax: true\n---\n### 计数排序\n计数排序是一种稳定的**线性时间排序算法**。计数排序使用一个额外的数组 $C$ ，其中第i个元素是待排序数组 $A$中值等于 $i$ 的元素的个数。然后根据数组 $C$ 来将 $A$ 中的元素排到正确的位置。\n当输入的元素是 $n$ 个 $0$到 $k$ 之间的整数时，它的运行时间是 $\\Theta (n+k)$ 。计数排序不是比较排序，排序的速度快于任何比较排序算法。\n由于用来计数的数组$C$ 的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上 $1$），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序$0$到 $100$ 之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序算法中，能够更有效的排序数据范围很大的数组。\n1. 计数排序(Counting Sort)是一种$O(n)$的排序算法，其思路是开一个长度为$maxValue-minValue+1$的数组，然后分配。扫描一遍原始数组，以当前值$-minValue$作为下标，将该下标的计数器增$1$。\n2. 收集。扫描一遍计数器数组，按顺序把值收集起来。\n3. 计数排序本质上是一种特殊的桶排序，当桶的个数最大的时候，就是计数排序。\n\n<!-- more -->\n\n-------\n\n#### 算法思路\nCounting sort is a sorting technique based on keys between a specific range, it works by counting the number of objects having distinct key values.Then doing some arithmetic to calculate the position of each object in the output sequence.\n\n1. Create a count array to store the count of each unique object;\n2. Initially the count of all elements is zero ;\n3. Count each elements in the given array and  place the count at the appropriate index;\n4. Modify the count array by adding the previous counts;\n5. Corresponding values represent the places in the count array;\n6. We place the objects in their correct positions and decrease the count by one;\n\n*翻译*\n> 1. 找出待排序的中最大元素和最小元素；\n> 2. 统计数组中每个值为 $i$ 的元素出现的次数，存入数组 $C$的第$i$项；\n> 3. 对所有的技术累加（ $C$ 中的第一个元素开始，每一项和前一项相加）；\n> 4. 反向填充目标数组；将每个元素 $i$ i放在新数组的第$C[i]$项，每放一个元素就将 $C[i]$减去$1$ ；\n\n\n算法动态展示\n 1. [YouTube视频源地址](https://www.youtube.com/watch?v=7zuGmKfUt7s&t=15s) ;\n 2. [Counting Sort - step by step guide](https://www.youtube.com/watch?v=TTnvXY82dtM);\n 3. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180402-174913-HD.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n \n-------\n\n#### 代码实现方式\n```java\n /**\n     * 计数排序 \n     *\n     * @param arrs\n     */\n    public static void countingSort(int[] arrs) {\n        int[] copyData = Arrays.copyOf(arrs, arrs.length);\n        int maxValue = arrs[0];\n        int minValue = arrs[0];\n        for (int i = 0; i < copyData.length; i++) {\n            if (copyData[i] > maxValue) {\n                maxValue = copyData[i];\n            }\n            if (copyData[i] < minValue) {\n                minValue = copyData[i];\n            }\n        }\n\n        int range = maxValue - minValue + 1;\n        int[] counts = new int[range];\n        Arrays.fill(counts, 0);\n        //  计算数组中每个值和最小值的差，并计数\n        for (int arr : copyData) {\n            counts[arr - minValue]++;\n        }\n        // 得到数组中大于某个数的值一共有多少个\n        for (int i = 1; i < counts.length; i++) {\n            counts[i] = counts[i] + counts[i - 1];\n        }\n        // 根据数量放置值，每放置一个，对应的值的数量减一\n        for (int i = 0; i < copyData.length; i++) {\n            int index = copyData[i] - minValue;\n            arrs[counts[index] - 1] = copyData[i];\n            counts[index]--;\n        }\n\n\n    }\n\n```\n\n参考地址：[计数排序](https://github.com/hustcc/JS-Sorting-Algorithm/blob/master/8.countingSort.md)\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n","slug":"SortAlogrithms/countingSort","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbnf002q9l8iaggc5tr4","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3><p>计数排序是一种稳定的<strong>线性时间排序算法</strong>。计数排序使用一个额外的数组 $C$ ，其中第i个元素是待排序数组 $A$中值等于 $i$ 的元素的个数。然后根据数组 $C$ 来将 $A$ 中的元素排到正确的位置。<br>当输入的元素是 $n$ 个 $0$到 $k$ 之间的整数时，它的运行时间是 $\\Theta (n+k)$ 。计数排序不是比较排序，排序的速度快于任何比较排序算法。<br>由于用来计数的数组$C$ 的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上 $1$），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序$0$到 $100$ 之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序算法中，能够更有效的排序数据范围很大的数组。</p>\n<ol>\n<li>计数排序(Counting Sort)是一种$O(n)$的排序算法，其思路是开一个长度为$maxValue-minValue+1$的数组，然后分配。扫描一遍原始数组，以当前值$-minValue$作为下标，将该下标的计数器增$1$。</li>\n<li>收集。扫描一遍计数器数组，按顺序把值收集起来。</li>\n<li>计数排序本质上是一种特殊的桶排序，当桶的个数最大的时候，就是计数排序。</li>\n</ol>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>Counting sort is a sorting technique based on keys between a specific range, it works by counting the number of objects having distinct key values.Then doing some arithmetic to calculate the position of each object in the output sequence.</p>\n<ol>\n<li>Create a count array to store the count of each unique object;</li>\n<li>Initially the count of all elements is zero ;</li>\n<li>Count each elements in the given array and  place the count at the appropriate index;</li>\n<li>Modify the count array by adding the previous counts;</li>\n<li>Corresponding values represent the places in the count array;</li>\n<li>We place the objects in their correct positions and decrease the count by one;</li>\n</ol>\n<p><em>翻译</em></p>\n<blockquote>\n<ol>\n<li>找出待排序的中最大元素和最小元素；</li>\n<li>统计数组中每个值为 $i$ 的元素出现的次数，存入数组 $C$的第$i$项；</li>\n<li>对所有的技术累加（ $C$ 中的第一个元素开始，每一项和前一项相加）；</li>\n<li>反向填充目标数组；将每个元素 $i$ i放在新数组的第$C[i]$项，每放一个元素就将 $C[i]$减去$1$ ；</li>\n</ol>\n</blockquote>\n<p>算法动态展示</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=7zuGmKfUt7s&amp;t=15s\" target=\"_blank\" rel=\"noopener\">YouTube视频源地址</a> ;</li>\n<li><a href=\"https://www.youtube.com/watch?v=TTnvXY82dtM\" target=\"_blank\" rel=\"noopener\">Counting Sort - step by step guide</a>;</li>\n<li><div id=\"dplayer1\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer1\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180402-174913-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n</li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式\"><a href=\"#代码实现方式\" class=\"headerlink\" title=\"代码实现方式\"></a>代码实现方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 计数排序 </span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">countingSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span>[] copyData = Arrays.copyOf(arrs, arrs.length);</span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxValue = arrs[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">int</span> minValue = arrs[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; copyData.length; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (copyData[i] &gt; maxValue) &#123;</span><br><span class=\"line\">               maxValue = copyData[i];</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (copyData[i] &lt; minValue) &#123;</span><br><span class=\"line\">               minValue = copyData[i];</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> range = maxValue - minValue + <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span>[] counts = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[range];</span><br><span class=\"line\">       Arrays.fill(counts, <span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"comment\">//  计算数组中每个值和最小值的差，并计数</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> arr : copyData) &#123;</span><br><span class=\"line\">           counts[arr - minValue]++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 得到数组中大于某个数的值一共有多少个</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; counts.length; i++) &#123;</span><br><span class=\"line\">           counts[i] = counts[i] + counts[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 根据数量放置值，每放置一个，对应的值的数量减一</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; copyData.length; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> index = copyData[i] - minValue;</span><br><span class=\"line\">           arrs[counts[index] - <span class=\"number\">1</span>] = copyData[i];</span><br><span class=\"line\">           counts[index]--;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>参考地址：<a href=\"https://github.com/hustcc/JS-Sorting-Algorithm/blob/master/8.countingSort.md\" target=\"_blank\" rel=\"noopener\">计数排序</a><br>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3><p>计数排序是一种稳定的<strong>线性时间排序算法</strong>。计数排序使用一个额外的数组 $C$ ，其中第i个元素是待排序数组 $A$中值等于 $i$ 的元素的个数。然后根据数组 $C$ 来将 $A$ 中的元素排到正确的位置。<br>当输入的元素是 $n$ 个 $0$到 $k$ 之间的整数时，它的运行时间是 $\\Theta (n+k)$ 。计数排序不是比较排序，排序的速度快于任何比较排序算法。<br>由于用来计数的数组$C$ 的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上 $1$），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序$0$到 $100$ 之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序算法中，能够更有效的排序数据范围很大的数组。</p>\n<ol>\n<li>计数排序(Counting Sort)是一种$O(n)$的排序算法，其思路是开一个长度为$maxValue-minValue+1$的数组，然后分配。扫描一遍原始数组，以当前值$-minValue$作为下标，将该下标的计数器增$1$。</li>\n<li>收集。扫描一遍计数器数组，按顺序把值收集起来。</li>\n<li>计数排序本质上是一种特殊的桶排序，当桶的个数最大的时候，就是计数排序。</li>\n</ol>","more":"<hr>\n<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>Counting sort is a sorting technique based on keys between a specific range, it works by counting the number of objects having distinct key values.Then doing some arithmetic to calculate the position of each object in the output sequence.</p>\n<ol>\n<li>Create a count array to store the count of each unique object;</li>\n<li>Initially the count of all elements is zero ;</li>\n<li>Count each elements in the given array and  place the count at the appropriate index;</li>\n<li>Modify the count array by adding the previous counts;</li>\n<li>Corresponding values represent the places in the count array;</li>\n<li>We place the objects in their correct positions and decrease the count by one;</li>\n</ol>\n<p><em>翻译</em></p>\n<blockquote>\n<ol>\n<li>找出待排序的中最大元素和最小元素；</li>\n<li>统计数组中每个值为 $i$ 的元素出现的次数，存入数组 $C$的第$i$项；</li>\n<li>对所有的技术累加（ $C$ 中的第一个元素开始，每一项和前一项相加）；</li>\n<li>反向填充目标数组；将每个元素 $i$ i放在新数组的第$C[i]$项，每放一个元素就将 $C[i]$减去$1$ ；</li>\n</ol>\n</blockquote>\n<p>算法动态展示</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=7zuGmKfUt7s&amp;t=15s\" target=\"_blank\" rel=\"noopener\">YouTube视频源地址</a> ;</li>\n<li><a href=\"https://www.youtube.com/watch?v=TTnvXY82dtM\" target=\"_blank\" rel=\"noopener\">Counting Sort - step by step guide</a>;</li>\n<li><div id=\"dplayer1\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer1\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180402-174913-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n</li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式\"><a href=\"#代码实现方式\" class=\"headerlink\" title=\"代码实现方式\"></a>代码实现方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 计数排序 </span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">countingSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span>[] copyData = Arrays.copyOf(arrs, arrs.length);</span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxValue = arrs[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">int</span> minValue = arrs[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; copyData.length; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (copyData[i] &gt; maxValue) &#123;</span><br><span class=\"line\">               maxValue = copyData[i];</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (copyData[i] &lt; minValue) &#123;</span><br><span class=\"line\">               minValue = copyData[i];</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> range = maxValue - minValue + <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span>[] counts = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[range];</span><br><span class=\"line\">       Arrays.fill(counts, <span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"comment\">//  计算数组中每个值和最小值的差，并计数</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> arr : copyData) &#123;</span><br><span class=\"line\">           counts[arr - minValue]++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 得到数组中大于某个数的值一共有多少个</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; counts.length; i++) &#123;</span><br><span class=\"line\">           counts[i] = counts[i] + counts[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">// 根据数量放置值，每放置一个，对应的值的数量减一</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; copyData.length; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">int</span> index = copyData[i] - minValue;</span><br><span class=\"line\">           arrs[counts[index] - <span class=\"number\">1</span>] = copyData[i];</span><br><span class=\"line\">           counts[index]--;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>参考地址：<a href=\"https://github.com/hustcc/JS-Sorting-Algorithm/blob/master/8.countingSort.md\" target=\"_blank\" rel=\"noopener\">计数排序</a><br>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Mar 27 2015 11:30:14 GMT+0800 (CST)","title":"计数排序（Counting Sort）","path":"2015/03/27/SortAlogrithms/countingSort/","eyeCatchImage":null,"excerpt":"<h3 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h3><p>计数排序是一种稳定的<strong>线性时间排序算法</strong>。计数排序使用一个额外的数组 $C$ ，其中第i个元素是待排序数组 $A$中值等于 $i$ 的元素的个数。然后根据数组 $C$ 来将 $A$ 中的元素排到正确的位置。<br>当输入的元素是 $n$ 个 $0$到 $k$ 之间的整数时，它的运行时间是 $\\Theta (n+k)$ 。计数排序不是比较排序，排序的速度快于任何比较排序算法。<br>由于用来计数的数组$C$ 的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上 $1$），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序$0$到 $100$ 之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序算法中，能够更有效的排序数据范围很大的数组。</p>\n<ol>\n<li>计数排序(Counting Sort)是一种$O(n)$的排序算法，其思路是开一个长度为$maxValue-minValue+1$的数组，然后分配。扫描一遍原始数组，以当前值$-minValue$作为下标，将该下标的计数器增$1$。</li>\n<li>收集。扫描一遍计数器数组，按顺序把值收集起来。</li>\n<li>计数排序本质上是一种特殊的桶排序，当桶的个数最大的时候，就是计数排序。</li>\n</ol>","date":"2015-03-27T02:30:31.000Z","pv":0,"totalPV":0,"categories":"Algorithms","tags":["Algorithms","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"排序算法之线性排序","copyright":true,"date":"2015-03-22T11:20:31.000Z","updated":"2015-03-23T13:29:00.000Z","_content":"## 线性排序：\n***计数排序 ***、***桶排序 ***、***基数排序 ***\n这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：\n> 基数排序：根据键值的每位数字来分配桶；\n> 计数排序：每个桶只存储单一键值；\n> 桶排序：每个桶存储一定范围的数值； \n\n<!-- more -->\n---------------------\n### 计数排序：\n计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\n`基本思想`\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/countingSort.gif)\n\n`代码实现`\n```java\n private static int[] counterSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return arr;\n        }\n        int maxValue = getMaxValue(arr);\n        return countingSort(arr, maxValue);\n    }\n\n    private static int[] countingSort(int[] arr, int maxValue) {\n        int bucketLen = maxValue + 1;\n        int[] bucket = new int[bucketLen];\n\n        for (int value : arr) {\n            bucket[value]++;\n        }\n        int sortedIndex = 0;\n        for (int j = 0; j < bucketLen; j++) {\n            while (bucket[j] > 0) {\n                arr[sortedIndex++] = j;\n                bucket[j]--;\n            }\n        }\n        return arr;\n    }\n\n\n    private static int getMaxValue(int[] arr) {\n        int maxValue = arr[0];\n        for (int value : arr) {\n            if (maxValue < value) {\n                maxValue = value;\n            }\n        }\n        return maxValue;\n    }\n```\n\n--------------\n\n### 桶排序：\n桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：\n> 1. 在额外空间充足的情况下，尽量增大桶的数量\n> 2. 使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中\n同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。\n\n`基本思想`\n 类似计数排序\n\n`遍历流程图例`\n\n`代码实现`\n```java\n  //桶值大小\n    private static int BUCKET_SIZE = 5;\n\n    private static int[] bucketSort(int[] arr) {\n\n        if (arr.length == 0) {\n            return arr;\n        }\n        int minValue = arr[0];\n        int maxValue = arr[0];\n        for (int value : arr) {\n            if (value < minValue) {\n                minValue = value;\n            } else if (value > maxValue) {\n                maxValue = value;\n            }\n        }\n        int bucketCount = (int) Math.floor((maxValue - minValue) / BUCKET_SIZE) + 1;\n        int[][] buckets = new int[bucketCount][0];\n        // 利用映射函数将数据分配到各个桶中\n        for (int i = 0; i < arr.length; i++) {\n            int index = (int) Math.floor((arr[i] - minValue) / BUCKET_SIZE);\n            buckets[index] = arrAppend(buckets[index], arr[i]);\n        }\n\n        int arrIndex = 0;\n        for (int[] bucket : buckets) {\n            if (bucket.length <= 0) {\n                continue;\n            }\n            // 对每个桶进行排序，这里使用了插入排序\n            bucket = insertSort(bucket);\n            for (int value : bucket) {\n                arr[arrIndex++] = value;\n            }\n        }\n        return arr;\n    }\n\n    /**\n     * 自动扩容，并保存数据\n     *\n     * @param arr\n     * @param value\n     */\n    private static int[] arrAppend(int[] arr, int value) {\n        arr = Arrays.copyOf(arr, arr.length + 1);\n        arr[arr.length - 1] = value;\n        return arr;\n    }\n\n\n    /**\n     * 插入排序\n     *\n     * @param arr\n     * @return\n     */\n    public static int[] insertSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return arr;\n        }\n        // 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的\n        for (int i = 1; i < arr.length; i++) {\n            // 从已经排序的序列最右边的开始比较，找到比其小的数\n            int j = i;\n            // 记录要插入的数据\n            int tmp = arr[i];\n            while (j > 0 && tmp < arr[j - 1]) {\n                arr[j] = arr[j - 1];\n                j--;\n            }\n            // 存在比其小的数，插入\n            if (j != i) {\n                arr[j] = tmp;\n            }\n\n        }\n        return arr;\n    }\n    \n```\n\n--------------\n### 基数排序：\n基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。\n`基本思想`\n1. 基数排序：通过序列中各个元素的值，对排序的N个元素进行若干趟的“分配”与“收集”来实现排序；\n2. 分配：我们将L[i]中的元素取出，首先确定其个位上的数字，根据该数字分配到与之序号相同的桶中；\n3. 收集：当序列中所有的元素都分配到对应的桶中，再按照顺序依次将桶中的元素收集形成新的一个待排序列L[]；\n对新形成的序列L[]重复执行分配和收集元素中的十位、百位...直到分配完该序列中的最高位，则排序结束；\n4. 根据上述“基数排序”的展示，我们可以清楚的看到整个实现的过程\n\n`LSD基数排序遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/radixSort.gif)\n\n`代码实现`\n```java\n private static int[] radixSort(int[] arr) {\n\n        if (null == arr || arr.length == 0) {\n            return arr;\n        }\n\n        int maxDigit = getMaxDigit(arr);\n\n        return radixSort(arr, maxDigit);\n    }\n    /**\n     * 获取最高位数\n     */\n    private static int getMaxDigit(int[] arr) {\n        int maxValue = getMaxValue(arr);\n        return getNumLenght(maxValue);\n    }\n\n    private static int getNumLenght(long num) {\n        if (num == 0) {\n            return 1;\n        }\n        int lenght = 0;\n        for (long temp = num; temp != 0; temp /= 10) {\n            lenght++;\n        }\n        return lenght;\n    }\n\n\n    private static int[] radixSort(int[] arr, int maxDigit) {\n        int mod = 10;\n        int dev = 1;\n\n        for (int i = 0; i < maxDigit; i++, dev *= 10, mod *= 10) {\n            // 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)\n            int[][] counter = new int[mod * 2][0];\n\n            for (int j = 0; j < arr.length; j++) {\n                int bucket = ((arr[j] % mod) / dev) + mod;\n                counter[bucket] = arrayAppend(counter[bucket], arr[j]);\n            }\n\n            int pos = 0;\n            for (int[] bucket : counter) {\n                for (int value : bucket) {\n                    arr[pos++] = value;\n                }\n            }\n        }\n        return arr;\n    }\n\n    /**\n     * 自动扩容，并保存数据\n     *\n     * @param arr\n     * @param value\n     */\n    private static int[] arrayAppend(int[] arr, int value) {\n        arr = Arrays.copyOf(arr, arr.length + 1);\n        arr[arr.length - 1] = value;\n        return arr;\n    }\n\n\n    private static int getMaxValue(int[] arr) {\n        int maxValue = arr[0];\n        for (int value : arr) {\n            if (maxValue < value) {\n                maxValue = value;\n            }\n        }\n        return maxValue;\n    }\n    \n```\n\n\n--------------\n\n\n\n","source":"_posts/SortAlogrithms/linear.md","raw":"---\ntitle: 排序算法之线性排序\ntags: [Algorithms, Sort]\ncopyright: true\ndate: 2015-03-22 19:20:31\nupdated: 2015-03-23 21:29:00\ncategories: Algorithms\n---\n## 线性排序：\n***计数排序 ***、***桶排序 ***、***基数排序 ***\n这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：\n> 基数排序：根据键值的每位数字来分配桶；\n> 计数排序：每个桶只存储单一键值；\n> 桶排序：每个桶存储一定范围的数值； \n\n<!-- more -->\n---------------------\n### 计数排序：\n计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\n`基本思想`\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/countingSort.gif)\n\n`代码实现`\n```java\n private static int[] counterSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return arr;\n        }\n        int maxValue = getMaxValue(arr);\n        return countingSort(arr, maxValue);\n    }\n\n    private static int[] countingSort(int[] arr, int maxValue) {\n        int bucketLen = maxValue + 1;\n        int[] bucket = new int[bucketLen];\n\n        for (int value : arr) {\n            bucket[value]++;\n        }\n        int sortedIndex = 0;\n        for (int j = 0; j < bucketLen; j++) {\n            while (bucket[j] > 0) {\n                arr[sortedIndex++] = j;\n                bucket[j]--;\n            }\n        }\n        return arr;\n    }\n\n\n    private static int getMaxValue(int[] arr) {\n        int maxValue = arr[0];\n        for (int value : arr) {\n            if (maxValue < value) {\n                maxValue = value;\n            }\n        }\n        return maxValue;\n    }\n```\n\n--------------\n\n### 桶排序：\n桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：\n> 1. 在额外空间充足的情况下，尽量增大桶的数量\n> 2. 使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中\n同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。\n\n`基本思想`\n 类似计数排序\n\n`遍历流程图例`\n\n`代码实现`\n```java\n  //桶值大小\n    private static int BUCKET_SIZE = 5;\n\n    private static int[] bucketSort(int[] arr) {\n\n        if (arr.length == 0) {\n            return arr;\n        }\n        int minValue = arr[0];\n        int maxValue = arr[0];\n        for (int value : arr) {\n            if (value < minValue) {\n                minValue = value;\n            } else if (value > maxValue) {\n                maxValue = value;\n            }\n        }\n        int bucketCount = (int) Math.floor((maxValue - minValue) / BUCKET_SIZE) + 1;\n        int[][] buckets = new int[bucketCount][0];\n        // 利用映射函数将数据分配到各个桶中\n        for (int i = 0; i < arr.length; i++) {\n            int index = (int) Math.floor((arr[i] - minValue) / BUCKET_SIZE);\n            buckets[index] = arrAppend(buckets[index], arr[i]);\n        }\n\n        int arrIndex = 0;\n        for (int[] bucket : buckets) {\n            if (bucket.length <= 0) {\n                continue;\n            }\n            // 对每个桶进行排序，这里使用了插入排序\n            bucket = insertSort(bucket);\n            for (int value : bucket) {\n                arr[arrIndex++] = value;\n            }\n        }\n        return arr;\n    }\n\n    /**\n     * 自动扩容，并保存数据\n     *\n     * @param arr\n     * @param value\n     */\n    private static int[] arrAppend(int[] arr, int value) {\n        arr = Arrays.copyOf(arr, arr.length + 1);\n        arr[arr.length - 1] = value;\n        return arr;\n    }\n\n\n    /**\n     * 插入排序\n     *\n     * @param arr\n     * @return\n     */\n    public static int[] insertSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return arr;\n        }\n        // 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的\n        for (int i = 1; i < arr.length; i++) {\n            // 从已经排序的序列最右边的开始比较，找到比其小的数\n            int j = i;\n            // 记录要插入的数据\n            int tmp = arr[i];\n            while (j > 0 && tmp < arr[j - 1]) {\n                arr[j] = arr[j - 1];\n                j--;\n            }\n            // 存在比其小的数，插入\n            if (j != i) {\n                arr[j] = tmp;\n            }\n\n        }\n        return arr;\n    }\n    \n```\n\n--------------\n### 基数排序：\n基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。\n`基本思想`\n1. 基数排序：通过序列中各个元素的值，对排序的N个元素进行若干趟的“分配”与“收集”来实现排序；\n2. 分配：我们将L[i]中的元素取出，首先确定其个位上的数字，根据该数字分配到与之序号相同的桶中；\n3. 收集：当序列中所有的元素都分配到对应的桶中，再按照顺序依次将桶中的元素收集形成新的一个待排序列L[]；\n对新形成的序列L[]重复执行分配和收集元素中的十位、百位...直到分配完该序列中的最高位，则排序结束；\n4. 根据上述“基数排序”的展示，我们可以清楚的看到整个实现的过程\n\n`LSD基数排序遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/radixSort.gif)\n\n`代码实现`\n```java\n private static int[] radixSort(int[] arr) {\n\n        if (null == arr || arr.length == 0) {\n            return arr;\n        }\n\n        int maxDigit = getMaxDigit(arr);\n\n        return radixSort(arr, maxDigit);\n    }\n    /**\n     * 获取最高位数\n     */\n    private static int getMaxDigit(int[] arr) {\n        int maxValue = getMaxValue(arr);\n        return getNumLenght(maxValue);\n    }\n\n    private static int getNumLenght(long num) {\n        if (num == 0) {\n            return 1;\n        }\n        int lenght = 0;\n        for (long temp = num; temp != 0; temp /= 10) {\n            lenght++;\n        }\n        return lenght;\n    }\n\n\n    private static int[] radixSort(int[] arr, int maxDigit) {\n        int mod = 10;\n        int dev = 1;\n\n        for (int i = 0; i < maxDigit; i++, dev *= 10, mod *= 10) {\n            // 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)\n            int[][] counter = new int[mod * 2][0];\n\n            for (int j = 0; j < arr.length; j++) {\n                int bucket = ((arr[j] % mod) / dev) + mod;\n                counter[bucket] = arrayAppend(counter[bucket], arr[j]);\n            }\n\n            int pos = 0;\n            for (int[] bucket : counter) {\n                for (int value : bucket) {\n                    arr[pos++] = value;\n                }\n            }\n        }\n        return arr;\n    }\n\n    /**\n     * 自动扩容，并保存数据\n     *\n     * @param arr\n     * @param value\n     */\n    private static int[] arrayAppend(int[] arr, int value) {\n        arr = Arrays.copyOf(arr, arr.length + 1);\n        arr[arr.length - 1] = value;\n        return arr;\n    }\n\n\n    private static int getMaxValue(int[] arr) {\n        int maxValue = arr[0];\n        for (int value : arr) {\n            if (maxValue < value) {\n                maxValue = value;\n            }\n        }\n        return maxValue;\n    }\n    \n```\n\n\n--------------\n\n\n\n","slug":"SortAlogrithms/linear","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbng002u9l8ixb49utub","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"线性排序：\"><a href=\"#线性排序：\" class=\"headerlink\" title=\"线性排序：\"></a>线性排序：</h2><p><strong><em>计数排序 </em></strong>、<strong><em>桶排序 </em></strong>、<strong><em>基数排序 </em></strong><br>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p>\n<blockquote>\n<p>基数排序：根据键值的每位数字来分配桶；<br>计数排序：每个桶只存储单一键值；<br>桶排序：每个桶存储一定范围的数值； </p>\n</blockquote>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h3 id=\"计数排序：\"><a href=\"#计数排序：\" class=\"headerlink\" title=\"计数排序：\"></a>计数排序：</h3><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。<br><code>基本思想</code></p>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/countingSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] counterSort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxValue = getMaxValue(arr);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> countingSort(arr, maxValue);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] countingSort(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> maxValue) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> bucketLen = maxValue + <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span>[] bucket = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[bucketLen];</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">           bucket[value]++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> sortedIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (bucket[j] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               arr[sortedIndex++] = j;</span><br><span class=\"line\">               bucket[j]--;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaxValue</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxValue = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (maxValue &lt; value) &#123;</span><br><span class=\"line\">               maxValue = value;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> maxValue;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"桶排序：\"><a href=\"#桶排序：\" class=\"headerlink\" title=\"桶排序：\"></a>桶排序：</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p>\n<blockquote>\n<ol>\n<li>在额外空间充足的情况下，尽量增大桶的数量</li>\n<li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中<br>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</li>\n</ol>\n</blockquote>\n<p><code>基本思想</code><br> 类似计数排序</p>\n<p><code>遍历流程图例</code></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//桶值大小</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> BUCKET_SIZE = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] bucketSort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> minValue = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">int</span> maxValue = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (value &lt; minValue) &#123;</span><br><span class=\"line\">              minValue = value;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt; maxValue) &#123;</span><br><span class=\"line\">              maxValue = value;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> bucketCount = (<span class=\"keyword\">int</span>) Math.floor((maxValue - minValue) / BUCKET_SIZE) + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[][] buckets = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[bucketCount][<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"comment\">// 利用映射函数将数据分配到各个桶中</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> index = (<span class=\"keyword\">int</span>) Math.floor((arr[i] - minValue) / BUCKET_SIZE);</span><br><span class=\"line\">          buckets[index] = arrAppend(buckets[index], arr[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> arrIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] bucket : buckets) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (bucket.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 对每个桶进行排序，这里使用了插入排序</span></span><br><span class=\"line\">          bucket = insertSort(bucket);</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : bucket) &#123;</span><br><span class=\"line\">              arr[arrIndex++] = value;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自动扩容，并保存数据</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] arrAppend(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> value) &#123;</span><br><span class=\"line\">      arr = Arrays.copyOf(arr, arr.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">      arr[arr.length - <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 插入排序</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] insertSort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 从已经排序的序列最右边的开始比较，找到比其小的数</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">          <span class=\"comment\">// 记录要插入的数据</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> tmp = arr[i];</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; tmp &lt; arr[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">              arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">              j--;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 存在比其小的数，插入</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j != i) &#123;</span><br><span class=\"line\">              arr[j] = tmp;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"基数排序：\"><a href=\"#基数排序：\" class=\"headerlink\" title=\"基数排序：\"></a>基数排序：</h3><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。<br><code>基本思想</code></p>\n<ol>\n<li>基数排序：通过序列中各个元素的值，对排序的N个元素进行若干趟的“分配”与“收集”来实现排序；</li>\n<li>分配：我们将L[i]中的元素取出，首先确定其个位上的数字，根据该数字分配到与之序号相同的桶中；</li>\n<li>收集：当序列中所有的元素都分配到对应的桶中，再按照顺序依次将桶中的元素收集形成新的一个待排序列L[]；<br>对新形成的序列L[]重复执行分配和收集元素中的十位、百位…直到分配完该序列中的最高位，则排序结束；</li>\n<li>根据上述“基数排序”的展示，我们可以清楚的看到整个实现的过程</li>\n</ol>\n<p><code>LSD基数排序遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/radixSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] radixSort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxDigit = getMaxDigit(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> radixSort(arr, maxDigit);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取最高位数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaxDigit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxValue = getMaxValue(arr);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> getNumLenght(maxValue);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumLenght</span><span class=\"params\">(<span class=\"keyword\">long</span> num)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> lenght = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> temp = num; temp != <span class=\"number\">0</span>; temp /= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">           lenght++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> lenght;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] radixSort(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> maxDigit) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> mod = <span class=\"number\">10</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> dev = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxDigit; i++, dev *= <span class=\"number\">10</span>, mod *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)</span></span><br><span class=\"line\">           <span class=\"keyword\">int</span>[][] counter = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[mod * <span class=\"number\">2</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> bucket = ((arr[j] % mod) / dev) + mod;</span><br><span class=\"line\">               counter[bucket] = arrayAppend(counter[bucket], arr[j]);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] bucket : counter) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : bucket) &#123;</span><br><span class=\"line\">                   arr[pos++] = value;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 自动扩容，并保存数据</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] arrayAppend(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> value) &#123;</span><br><span class=\"line\">       arr = Arrays.copyOf(arr, arr.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">       arr[arr.length - <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaxValue</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxValue = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (maxValue &lt; value) &#123;</span><br><span class=\"line\">               maxValue = value;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> maxValue;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"线性排序：\"><a href=\"#线性排序：\" class=\"headerlink\" title=\"线性排序：\"></a>线性排序：</h2><p><strong><em>计数排序 </em></strong>、<strong><em>桶排序 </em></strong>、<strong><em>基数排序 </em></strong><br>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p>\n<blockquote>\n<p>基数排序：根据键值的每位数字来分配桶；<br>计数排序：每个桶只存储单一键值；<br>桶排序：每个桶存储一定范围的数值； </p>\n</blockquote>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","more":"<h3 id=\"计数排序：\"><a href=\"#计数排序：\" class=\"headerlink\" title=\"计数排序：\"></a>计数排序：</h3><p>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。<br><code>基本思想</code></p>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/countingSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] counterSort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxValue = getMaxValue(arr);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> countingSort(arr, maxValue);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] countingSort(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> maxValue) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> bucketLen = maxValue + <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span>[] bucket = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[bucketLen];</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">           bucket[value]++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> sortedIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (bucket[j] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               arr[sortedIndex++] = j;</span><br><span class=\"line\">               bucket[j]--;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaxValue</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxValue = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (maxValue &lt; value) &#123;</span><br><span class=\"line\">               maxValue = value;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> maxValue;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"桶排序：\"><a href=\"#桶排序：\" class=\"headerlink\" title=\"桶排序：\"></a>桶排序：</h3><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点：</p>\n<blockquote>\n<ol>\n<li>在额外空间充足的情况下，尽量增大桶的数量</li>\n<li>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中<br>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</li>\n</ol>\n</blockquote>\n<p><code>基本思想</code><br> 类似计数排序</p>\n<p><code>遍历流程图例</code></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//桶值大小</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> BUCKET_SIZE = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] bucketSort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> minValue = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">int</span> maxValue = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (value &lt; minValue) &#123;</span><br><span class=\"line\">              minValue = value;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value &gt; maxValue) &#123;</span><br><span class=\"line\">              maxValue = value;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> bucketCount = (<span class=\"keyword\">int</span>) Math.floor((maxValue - minValue) / BUCKET_SIZE) + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">int</span>[][] buckets = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[bucketCount][<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"comment\">// 利用映射函数将数据分配到各个桶中</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> index = (<span class=\"keyword\">int</span>) Math.floor((arr[i] - minValue) / BUCKET_SIZE);</span><br><span class=\"line\">          buckets[index] = arrAppend(buckets[index], arr[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> arrIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] bucket : buckets) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (bucket.length &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 对每个桶进行排序，这里使用了插入排序</span></span><br><span class=\"line\">          bucket = insertSort(bucket);</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : bucket) &#123;</span><br><span class=\"line\">              arr[arrIndex++] = value;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 自动扩容，并保存数据</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] arrAppend(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> value) &#123;</span><br><span class=\"line\">      arr = Arrays.copyOf(arr, arr.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">      arr[arr.length - <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 插入排序</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] insertSort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 从下标为1的元素开始选择合适的位置插入，因为下标为0的只有一个元素，默认是有序的</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 从已经排序的序列最右边的开始比较，找到比其小的数</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">          <span class=\"comment\">// 记录要插入的数据</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> tmp = arr[i];</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; tmp &lt; arr[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">              arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">              j--;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"comment\">// 存在比其小的数，插入</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (j != i) &#123;</span><br><span class=\"line\">              arr[j] = tmp;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"基数排序：\"><a href=\"#基数排序：\" class=\"headerlink\" title=\"基数排序：\"></a>基数排序：</h3><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。<br><code>基本思想</code></p>\n<ol>\n<li>基数排序：通过序列中各个元素的值，对排序的N个元素进行若干趟的“分配”与“收集”来实现排序；</li>\n<li>分配：我们将L[i]中的元素取出，首先确定其个位上的数字，根据该数字分配到与之序号相同的桶中；</li>\n<li>收集：当序列中所有的元素都分配到对应的桶中，再按照顺序依次将桶中的元素收集形成新的一个待排序列L[]；<br>对新形成的序列L[]重复执行分配和收集元素中的十位、百位…直到分配完该序列中的最高位，则排序结束；</li>\n<li>根据上述“基数排序”的展示，我们可以清楚的看到整个实现的过程</li>\n</ol>\n<p><code>LSD基数排序遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/radixSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] radixSort(<span class=\"keyword\">int</span>[] arr) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxDigit = getMaxDigit(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">return</span> radixSort(arr, maxDigit);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 获取最高位数</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaxDigit</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxValue = getMaxValue(arr);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> getNumLenght(maxValue);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumLenght</span><span class=\"params\">(<span class=\"keyword\">long</span> num)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> lenght = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> temp = num; temp != <span class=\"number\">0</span>; temp /= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">           lenght++;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> lenght;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] radixSort(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> maxDigit) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> mod = <span class=\"number\">10</span>;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> dev = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maxDigit; i++, dev *= <span class=\"number\">10</span>, mod *= <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// 考虑负数的情况，这里扩展一倍队列数，其中 [0-9]对应负数，[10-19]对应正数 (bucket + 10)</span></span><br><span class=\"line\">           <span class=\"keyword\">int</span>[][] counter = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[mod * <span class=\"number\">2</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> bucket = ((arr[j] % mod) / dev) + mod;</span><br><span class=\"line\">               counter[bucket] = arrayAppend(counter[bucket], arr[j]);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span>[] bucket : counter) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : bucket) &#123;</span><br><span class=\"line\">                   arr[pos++] = value;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 自动扩容，并保存数据</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> arr</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> value</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] arrayAppend(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> value) &#123;</span><br><span class=\"line\">       arr = Arrays.copyOf(arr, arr.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">       arr[arr.length - <span class=\"number\">1</span>] = value;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getMaxValue</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> maxValue = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> value : arr) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (maxValue &lt; value) &#123;</span><br><span class=\"line\">               maxValue = value;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> maxValue;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<hr>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Mon Mar 23 2015 21:29:00 GMT+0800 (CST)","title":"排序算法之线性排序","path":"2015/03/22/SortAlogrithms/linear/","eyeCatchImage":null,"excerpt":"<h2 id=\"线性排序：\"><a href=\"#线性排序：\" class=\"headerlink\" title=\"线性排序：\"></a>线性排序：</h2><p><strong><em>计数排序 </em></strong>、<strong><em>桶排序 </em></strong>、<strong><em>基数排序 </em></strong><br>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p>\n<blockquote>\n<p>基数排序：根据键值的每位数字来分配桶；<br>计数排序：每个桶只存储单一键值；<br>桶排序：每个桶存储一定范围的数值； </p>\n</blockquote>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","date":"2015-03-22T11:20:31.000Z","pv":0,"totalPV":0,"categories":"Algorithms","tags":["Algorithms","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"乐观锁和悲观锁(OCC和PCC)","date":"2016-10-01T11:20:43.000Z","updated":"2016-10-01T12:19:21.000Z","copyright":true,"mathjax":true,"_content":"&emsp;&emsp;本文在介乐观锁和悲观锁之前请先了解[事务相关知识点](http://edgeowner.com/2016/10/01/tranaction/)乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。\n&emsp;&emsp;无论是悲观锁还是乐观锁，都是人们定义出来的概念，可以认为是一种思想。其实不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像memcache、hibernate、tair等都有类似的概念。\n&emsp;&emsp;针对于不同的业务场景，应该选用不同的并发控制方式。所以，不要把乐观并发控制和悲观并发控制狭义的理解为DBMS中的概念，更不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。\n\n-------\n        \n### 乐观锁和悲观锁\n#### 乐观锁（Optimistic Concurrency Control，OCC）：\n##### 乐观锁的定义：\n* 1.在关系数据库管理系统里，乐观锁指的是一种并发控制的方法，又名“乐观锁”(Optimistic Concurrency Control)，缩写“OCC”，它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。\n* 2.乐观锁(Optimistic Locking)相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。\n* 3.相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。\n\n##### 乐观锁的流程：\n* 1.数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。\n* 2.对于并发间操作产生的线程安全问题持乐观状态，乐观锁认为竞争不总是会发生，因此它不需要持有锁，将比较和替换这两个动作作为一个原子操作尝试去修改内存中的变量，若失败则表示发生冲突，那么就应该有相应的重试逻辑。\n\n##### 悲观锁Demo演示：\n* 1.实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。使用版本号实现乐观锁：使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行$+1$操作。并判断当前版本号是不是该数据的最新的版本号。\n  ```sql\n#Demo 1.0\n1.查询出商品信息\nselect (status,status,version) from t_goods where id=#{id}\n2.根据商品信息生成订单\n3.修改商品status为2\nupdate t_goods \nset status=2,version=version+1\nwhere id=#{id} and version=#{version};\n  ```\n * 2.对于并发间操作产生的线程安全问题持悲状态，悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，直接上了锁就操作资源\n \n##### 悲观锁的优点和不足：\n&emsp;&emsp;乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。但如果直接简单这么做，还是有可能会遇到不可预期的结果，例如两个事务都读取了数据库的某一行，经过修改以后写回数据库，这时就遇到了问题。\n\n-------\n\n#### 悲观锁（Pessimistic Concurrency Control，PCC）：\n##### 悲观锁的定义：\n* 1.悲观锁指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度(悲观)，因此，在整个数据处理过程中，将数据处于锁定状态。 悲观锁的实现，往往依靠数据库提供的锁机制 （也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）；\n* 2.关系型数据库里，**悲观并发控制**是一种并发控制的方法。它可以阻止一个事物以影响其他用户的方式来修改数据。如果一个事物执行的操作都某行数据应用了锁，那只有当这个事物把锁释放，其他事物才能执行与该锁冲突的操作。\n\n##### 悲观锁的流程：\n* 1.悲观锁的流程：在对任意记录进行修改前，先尝试为该记录加上[排他锁(exclusive locking)](http://www.hollischuang.com/archives/923)，如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁，期间若有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。\n\n##### 悲观锁Demo演示：\n* 1.Mysql InnoDB使用悲观锁：要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;\n  ```sql\n#Demo 1.0\n//0.开始事务\nbegin;/begin work;/start transaction; (三者选一就可以)\n//1.查询出商品信息\nselect status from t_goods where id=1 for update;\n//2.根据商品信息生成订单\ninsert into t_orders (id,goods_id) values (null,1);\n//3.修改商品status为2\nupdate t_goods set status=2;\n//4.提交事务\ncommit;/commit work;\n  ```\n&emsp;&emsp;上面的查询语句中，我们使用了select…for update的方式，这样就通过开启排他锁的方式实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。\n  ***使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意 ***。\n  简单理解下悲观锁：当一个事务锁定了一些数据之后，只有当当前锁提交了事务，释放了锁，其他事务才能获得锁并执行操作。悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事物的成本环境中。\n  \n* 2.下面另外一个简单Demo使用方式如下： \n     首先要关闭MySQL的自动提交：set autocommit = 0;   \n    ```sql\n#Demo 2.0\nbegin --开启事务\nselect id, total, front, end from price where id=1 for update \ninsert into price values(?,?,?,?,?)\ncommit --提交事务\n    ```\n&emsp;&emsp;这里使用**select for update的方式**利用数据库开启了悲观锁，锁定了id=1的这条数据(***注意:这里除非是使用了索引会启用行级锁，不然是会使用表锁，将整张表都锁住。 ***)。之后使用commit提交事务并释放锁，这样下一个线程过来拿到的就是正确的数据。   \n悲观锁一般是用于并发不是很高，并且不允许脏读等情况。但是对数据库资源消耗较大。\n\n##### 悲观锁的优点和不足：\n&emsp;&emsp;悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；另外，在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数.\n\n-------\n\n#### 相关技术参考：\n1. [乐观锁与悲观锁的实际应用](https://juejin.im/post/5962e64c6fb9a06ba14b9cd9)(**推荐此文**)\n2. [MySQL乐观锁在分布式场景下的实践](https://segmentfault.com/a/1190000008935924)(**推荐此文**)\n3. [乐观锁与悲观锁](http://www.digpage.com/lock.html)\n4. [深入理解乐观锁与悲观锁](http://www.hollischuang.com/archives/934)\n5. [深入理解乐观锁与悲观锁](http://www.importnew.com/21037.html)\n6. [mysql的锁--行锁，表锁，乐观锁，悲观锁](https://www.cnblogs.com/deliver/p/5730616.html)\n7. [数据库的锁机制](http://www.hollischuang.com/archives/909)\n\n#### 本文代码Demo：\nGithub地址：[参见Price相关代码](git@github.com:edgeowner/saber.git)\n\n\n\n\n\n\n\n","source":"_posts/SortAlogrithms/optimistic-pessimistic-locking.md","raw":"---\ntitle: 乐观锁和悲观锁(OCC和PCC) \ndate: 2016-10-01 19:20:43\nupdated: 2016-10-01 20:19:21\ncategories: 并发控制相关知识点\ntags: [并发控制, 锁]\ncopyright: true\nmathjax: true\n---\n&emsp;&emsp;本文在介乐观锁和悲观锁之前请先了解[事务相关知识点](http://edgeowner.com/2016/10/01/tranaction/)乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。\n&emsp;&emsp;无论是悲观锁还是乐观锁，都是人们定义出来的概念，可以认为是一种思想。其实不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像memcache、hibernate、tair等都有类似的概念。\n&emsp;&emsp;针对于不同的业务场景，应该选用不同的并发控制方式。所以，不要把乐观并发控制和悲观并发控制狭义的理解为DBMS中的概念，更不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。\n\n-------\n        \n### 乐观锁和悲观锁\n#### 乐观锁（Optimistic Concurrency Control，OCC）：\n##### 乐观锁的定义：\n* 1.在关系数据库管理系统里，乐观锁指的是一种并发控制的方法，又名“乐观锁”(Optimistic Concurrency Control)，缩写“OCC”，它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。\n* 2.乐观锁(Optimistic Locking)相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。\n* 3.相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。\n\n##### 乐观锁的流程：\n* 1.数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。\n* 2.对于并发间操作产生的线程安全问题持乐观状态，乐观锁认为竞争不总是会发生，因此它不需要持有锁，将比较和替换这两个动作作为一个原子操作尝试去修改内存中的变量，若失败则表示发生冲突，那么就应该有相应的重试逻辑。\n\n##### 悲观锁Demo演示：\n* 1.实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。使用版本号实现乐观锁：使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行$+1$操作。并判断当前版本号是不是该数据的最新的版本号。\n  ```sql\n#Demo 1.0\n1.查询出商品信息\nselect (status,status,version) from t_goods where id=#{id}\n2.根据商品信息生成订单\n3.修改商品status为2\nupdate t_goods \nset status=2,version=version+1\nwhere id=#{id} and version=#{version};\n  ```\n * 2.对于并发间操作产生的线程安全问题持悲状态，悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，直接上了锁就操作资源\n \n##### 悲观锁的优点和不足：\n&emsp;&emsp;乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。但如果直接简单这么做，还是有可能会遇到不可预期的结果，例如两个事务都读取了数据库的某一行，经过修改以后写回数据库，这时就遇到了问题。\n\n-------\n\n#### 悲观锁（Pessimistic Concurrency Control，PCC）：\n##### 悲观锁的定义：\n* 1.悲观锁指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度(悲观)，因此，在整个数据处理过程中，将数据处于锁定状态。 悲观锁的实现，往往依靠数据库提供的锁机制 （也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）；\n* 2.关系型数据库里，**悲观并发控制**是一种并发控制的方法。它可以阻止一个事物以影响其他用户的方式来修改数据。如果一个事物执行的操作都某行数据应用了锁，那只有当这个事物把锁释放，其他事物才能执行与该锁冲突的操作。\n\n##### 悲观锁的流程：\n* 1.悲观锁的流程：在对任意记录进行修改前，先尝试为该记录加上[排他锁(exclusive locking)](http://www.hollischuang.com/archives/923)，如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁，期间若有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。\n\n##### 悲观锁Demo演示：\n* 1.Mysql InnoDB使用悲观锁：要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;\n  ```sql\n#Demo 1.0\n//0.开始事务\nbegin;/begin work;/start transaction; (三者选一就可以)\n//1.查询出商品信息\nselect status from t_goods where id=1 for update;\n//2.根据商品信息生成订单\ninsert into t_orders (id,goods_id) values (null,1);\n//3.修改商品status为2\nupdate t_goods set status=2;\n//4.提交事务\ncommit;/commit work;\n  ```\n&emsp;&emsp;上面的查询语句中，我们使用了select…for update的方式，这样就通过开启排他锁的方式实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。\n  ***使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意 ***。\n  简单理解下悲观锁：当一个事务锁定了一些数据之后，只有当当前锁提交了事务，释放了锁，其他事务才能获得锁并执行操作。悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事物的成本环境中。\n  \n* 2.下面另外一个简单Demo使用方式如下： \n     首先要关闭MySQL的自动提交：set autocommit = 0;   \n    ```sql\n#Demo 2.0\nbegin --开启事务\nselect id, total, front, end from price where id=1 for update \ninsert into price values(?,?,?,?,?)\ncommit --提交事务\n    ```\n&emsp;&emsp;这里使用**select for update的方式**利用数据库开启了悲观锁，锁定了id=1的这条数据(***注意:这里除非是使用了索引会启用行级锁，不然是会使用表锁，将整张表都锁住。 ***)。之后使用commit提交事务并释放锁，这样下一个线程过来拿到的就是正确的数据。   \n悲观锁一般是用于并发不是很高，并且不允许脏读等情况。但是对数据库资源消耗较大。\n\n##### 悲观锁的优点和不足：\n&emsp;&emsp;悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；另外，在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数.\n\n-------\n\n#### 相关技术参考：\n1. [乐观锁与悲观锁的实际应用](https://juejin.im/post/5962e64c6fb9a06ba14b9cd9)(**推荐此文**)\n2. [MySQL乐观锁在分布式场景下的实践](https://segmentfault.com/a/1190000008935924)(**推荐此文**)\n3. [乐观锁与悲观锁](http://www.digpage.com/lock.html)\n4. [深入理解乐观锁与悲观锁](http://www.hollischuang.com/archives/934)\n5. [深入理解乐观锁与悲观锁](http://www.importnew.com/21037.html)\n6. [mysql的锁--行锁，表锁，乐观锁，悲观锁](https://www.cnblogs.com/deliver/p/5730616.html)\n7. [数据库的锁机制](http://www.hollischuang.com/archives/909)\n\n#### 本文代码Demo：\nGithub地址：[参见Price相关代码](git@github.com:edgeowner/saber.git)\n\n\n\n\n\n\n\n","slug":"SortAlogrithms/optimistic-pessimistic-locking","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbni002w9l8igm8o15w9","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><p>&emsp;&emsp;本文在介乐观锁和悲观锁之前请先了解<a href=\"http://edgeowner.com/2016/10/01/tranaction/\">事务相关知识点</a>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。<br>&emsp;&emsp;无论是悲观锁还是乐观锁，都是人们定义出来的概念，可以认为是一种思想。其实不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像memcache、hibernate、tair等都有类似的概念。<br>&emsp;&emsp;针对于不同的业务场景，应该选用不同的并发控制方式。所以，不要把乐观并发控制和悲观并发控制狭义的理解为DBMS中的概念，更不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。</p>\n<hr>\n<h3 id=\"乐观锁和悲观锁\"><a href=\"#乐观锁和悲观锁\" class=\"headerlink\" title=\"乐观锁和悲观锁\"></a>乐观锁和悲观锁</h3><h4 id=\"乐观锁（Optimistic-Concurrency-Control，OCC）：\"><a href=\"#乐观锁（Optimistic-Concurrency-Control，OCC）：\" class=\"headerlink\" title=\"乐观锁（Optimistic Concurrency Control，OCC）：\"></a>乐观锁（Optimistic Concurrency Control，OCC）：</h4><h5 id=\"乐观锁的定义：\"><a href=\"#乐观锁的定义：\" class=\"headerlink\" title=\"乐观锁的定义：\"></a>乐观锁的定义：</h5><ul>\n<li>1.在关系数据库管理系统里，乐观锁指的是一种并发控制的方法，又名“乐观锁”(Optimistic Concurrency Control)，缩写“OCC”，它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。</li>\n<li>2.乐观锁(Optimistic Locking)相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</li>\n<li>3.相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</li>\n</ul>\n<h5 id=\"乐观锁的流程：\"><a href=\"#乐观锁的流程：\" class=\"headerlink\" title=\"乐观锁的流程：\"></a>乐观锁的流程：</h5><ul>\n<li>1.数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。</li>\n<li>2.对于并发间操作产生的线程安全问题持乐观状态，乐观锁认为竞争不总是会发生，因此它不需要持有锁，将比较和替换这两个动作作为一个原子操作尝试去修改内存中的变量，若失败则表示发生冲突，那么就应该有相应的重试逻辑。</li>\n</ul>\n<h5 id=\"悲观锁Demo演示：\"><a href=\"#悲观锁Demo演示：\" class=\"headerlink\" title=\"悲观锁Demo演示：\"></a>悲观锁Demo演示：</h5><ul>\n<li><p>1.实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。使用版本号实现乐观锁：使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行$+1$操作。并判断当前版本号是不是该数据的最新的版本号。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Demo 1.0</span><br><span class=\"line\">1.查询出商品信息</span><br><span class=\"line\"><span class=\"keyword\">select</span> (<span class=\"keyword\">status</span>,<span class=\"keyword\">status</span>,<span class=\"keyword\">version</span>) <span class=\"keyword\">from</span> t_goods <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=#&#123;<span class=\"keyword\">id</span>&#125;</span><br><span class=\"line\"><span class=\"number\">2.</span>根据商品信息生成订单</span><br><span class=\"line\"><span class=\"number\">3.</span>修改商品<span class=\"keyword\">status</span>为<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> t_goods </span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">status</span>=<span class=\"number\">2</span>,<span class=\"keyword\">version</span>=<span class=\"keyword\">version</span>+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=#&#123;<span class=\"keyword\">id</span>&#125; <span class=\"keyword\">and</span> <span class=\"keyword\">version</span>=#&#123;<span class=\"keyword\">version</span>&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.对于并发间操作产生的线程安全问题持悲状态，悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，直接上了锁就操作资源</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"悲观锁的优点和不足：\"><a href=\"#悲观锁的优点和不足：\" class=\"headerlink\" title=\"悲观锁的优点和不足：\"></a>悲观锁的优点和不足：</h5><p>&emsp;&emsp;乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。但如果直接简单这么做，还是有可能会遇到不可预期的结果，例如两个事务都读取了数据库的某一行，经过修改以后写回数据库，这时就遇到了问题。</p>\n<hr>\n<h4 id=\"悲观锁（Pessimistic-Concurrency-Control，PCC）：\"><a href=\"#悲观锁（Pessimistic-Concurrency-Control，PCC）：\" class=\"headerlink\" title=\"悲观锁（Pessimistic Concurrency Control，PCC）：\"></a>悲观锁（Pessimistic Concurrency Control，PCC）：</h4><h5 id=\"悲观锁的定义：\"><a href=\"#悲观锁的定义：\" class=\"headerlink\" title=\"悲观锁的定义：\"></a>悲观锁的定义：</h5><ul>\n<li>1.悲观锁指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度(悲观)，因此，在整个数据处理过程中，将数据处于锁定状态。 悲观锁的实现，往往依靠数据库提供的锁机制 （也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）；</li>\n<li>2.关系型数据库里，<strong>悲观并发控制</strong>是一种并发控制的方法。它可以阻止一个事物以影响其他用户的方式来修改数据。如果一个事物执行的操作都某行数据应用了锁，那只有当这个事物把锁释放，其他事物才能执行与该锁冲突的操作。</li>\n</ul>\n<h5 id=\"悲观锁的流程：\"><a href=\"#悲观锁的流程：\" class=\"headerlink\" title=\"悲观锁的流程：\"></a>悲观锁的流程：</h5><ul>\n<li>1.悲观锁的流程：在对任意记录进行修改前，先尝试为该记录加上<a href=\"http://www.hollischuang.com/archives/923\" target=\"_blank\" rel=\"noopener\">排他锁(exclusive locking)</a>，如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁，期间若有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</li>\n</ul>\n<h5 id=\"悲观锁Demo演示：-1\"><a href=\"#悲观锁Demo演示：-1\" class=\"headerlink\" title=\"悲观锁Demo演示：\"></a>悲观锁Demo演示：</h5><ul>\n<li>1.Mysql InnoDB使用悲观锁：要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Demo 1.0</span><br><span class=\"line\">//0.开始事务</span><br><span class=\"line\"><span class=\"keyword\">begin</span>;/<span class=\"keyword\">begin</span> <span class=\"keyword\">work</span>;/<span class=\"keyword\">start</span> <span class=\"keyword\">transaction</span>; (三者选一就可以)</span><br><span class=\"line\">//1.查询出商品信息</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">status</span> <span class=\"keyword\">from</span> t_goods <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>;</span><br><span class=\"line\">//2.根据商品信息生成订单</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_orders (<span class=\"keyword\">id</span>,goods_id) <span class=\"keyword\">values</span> (<span class=\"literal\">null</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">//3.修改商品status为2</span><br><span class=\"line\"><span class=\"keyword\">update</span> t_goods <span class=\"keyword\">set</span> <span class=\"keyword\">status</span>=<span class=\"number\">2</span>;</span><br><span class=\"line\">//4.提交事务</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;/<span class=\"keyword\">commit</span> <span class=\"keyword\">work</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>&emsp;&emsp;上面的查询语句中，我们使用了select…for update的方式，这样就通过开启排他锁的方式实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。<br>  <strong><em>使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意 </em></strong>。<br>  简单理解下悲观锁：当一个事务锁定了一些数据之后，只有当当前锁提交了事务，释放了锁，其他事务才能获得锁并执行操作。悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事物的成本环境中。</p>\n<ul>\n<li>2.下面另外一个简单Demo使用方式如下：<br>   首先要关闭MySQL的自动提交：set autocommit = 0;     <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Demo 2.0</span><br><span class=\"line\"><span class=\"keyword\">begin</span> <span class=\"comment\">--开启事务</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, total, front, <span class=\"keyword\">end</span> <span class=\"keyword\">from</span> price <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span> </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> price <span class=\"keyword\">values</span>(?,?,?,?,?)</span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"comment\">--提交事务</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>&emsp;&emsp;这里使用<strong>select for update的方式</strong>利用数据库开启了悲观锁，锁定了id=1的这条数据(<strong><em>注意:这里除非是使用了索引会启用行级锁，不然是会使用表锁，将整张表都锁住。 </em></strong>)。之后使用commit提交事务并释放锁，这样下一个线程过来拿到的就是正确的数据。<br>悲观锁一般是用于并发不是很高，并且不允许脏读等情况。但是对数据库资源消耗较大。</p>\n<h5 id=\"悲观锁的优点和不足：-1\"><a href=\"#悲观锁的优点和不足：-1\" class=\"headerlink\" title=\"悲观锁的优点和不足：\"></a>悲观锁的优点和不足：</h5><p>&emsp;&emsp;悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；另外，在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数.</p>\n<hr>\n<h4 id=\"相关技术参考：\"><a href=\"#相关技术参考：\" class=\"headerlink\" title=\"相关技术参考：\"></a>相关技术参考：</h4><ol>\n<li><a href=\"https://juejin.im/post/5962e64c6fb9a06ba14b9cd9\" target=\"_blank\" rel=\"noopener\">乐观锁与悲观锁的实际应用</a>(<strong>推荐此文</strong>)</li>\n<li><a href=\"https://segmentfault.com/a/1190000008935924\" target=\"_blank\" rel=\"noopener\">MySQL乐观锁在分布式场景下的实践</a>(<strong>推荐此文</strong>)</li>\n<li><a href=\"http://www.digpage.com/lock.html\" target=\"_blank\" rel=\"noopener\">乐观锁与悲观锁</a></li>\n<li><a href=\"http://www.hollischuang.com/archives/934\" target=\"_blank\" rel=\"noopener\">深入理解乐观锁与悲观锁</a></li>\n<li><a href=\"http://www.importnew.com/21037.html\" target=\"_blank\" rel=\"noopener\">深入理解乐观锁与悲观锁</a></li>\n<li><a href=\"https://www.cnblogs.com/deliver/p/5730616.html\" target=\"_blank\" rel=\"noopener\">mysql的锁—行锁，表锁，乐观锁，悲观锁</a></li>\n<li><a href=\"http://www.hollischuang.com/archives/909\" target=\"_blank\" rel=\"noopener\">数据库的锁机制</a></li>\n</ol>\n<h4 id=\"本文代码Demo：\"><a href=\"#本文代码Demo：\" class=\"headerlink\" title=\"本文代码Demo：\"></a>本文代码Demo：</h4><p>Github地址：<a href=\"git@github.com:edgeowner/saber.git\">参见Price相关代码</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp;&emsp;本文在介乐观锁和悲观锁之前请先了解<a href=\"http://edgeowner.com/2016/10/01/tranaction/\">事务相关知识点</a>乐观并发控制(乐观锁)和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。<br>&emsp;&emsp;无论是悲观锁还是乐观锁，都是人们定义出来的概念，可以认为是一种思想。其实不仅仅是关系型数据库系统中有乐观锁和悲观锁的概念，像memcache、hibernate、tair等都有类似的概念。<br>&emsp;&emsp;针对于不同的业务场景，应该选用不同的并发控制方式。所以，不要把乐观并发控制和悲观并发控制狭义的理解为DBMS中的概念，更不要把他们和数据中提供的锁机制（行锁、表锁、排他锁、共享锁）混为一谈。其实，在DBMS中，悲观锁正是利用数据库本身提供的锁机制来实现的。</p>\n<hr>\n<h3 id=\"乐观锁和悲观锁\"><a href=\"#乐观锁和悲观锁\" class=\"headerlink\" title=\"乐观锁和悲观锁\"></a>乐观锁和悲观锁</h3><h4 id=\"乐观锁（Optimistic-Concurrency-Control，OCC）：\"><a href=\"#乐观锁（Optimistic-Concurrency-Control，OCC）：\" class=\"headerlink\" title=\"乐观锁（Optimistic Concurrency Control，OCC）：\"></a>乐观锁（Optimistic Concurrency Control，OCC）：</h4><h5 id=\"乐观锁的定义：\"><a href=\"#乐观锁的定义：\" class=\"headerlink\" title=\"乐观锁的定义：\"></a>乐观锁的定义：</h5><ul>\n<li>1.在关系数据库管理系统里，乐观锁指的是一种并发控制的方法，又名“乐观锁”(Optimistic Concurrency Control)，缩写“OCC”，它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。在提交数据更新之前，每个事务会先检查在该事务读取数据后，有没有其他事务又修改了该数据。如果其他事务有更新的话，正在提交的事务会进行回滚。</li>\n<li>2.乐观锁(Optimistic Locking)相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</li>\n<li>3.相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</li>\n</ul>\n<h5 id=\"乐观锁的流程：\"><a href=\"#乐观锁的流程：\" class=\"headerlink\" title=\"乐观锁的流程：\"></a>乐观锁的流程：</h5><ul>\n<li>1.数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。</li>\n<li>2.对于并发间操作产生的线程安全问题持乐观状态，乐观锁认为竞争不总是会发生，因此它不需要持有锁，将比较和替换这两个动作作为一个原子操作尝试去修改内存中的变量，若失败则表示发生冲突，那么就应该有相应的重试逻辑。</li>\n</ul>\n<h5 id=\"悲观锁Demo演示：\"><a href=\"#悲观锁Demo演示：\" class=\"headerlink\" title=\"悲观锁Demo演示：\"></a>悲观锁Demo演示：</h5><ul>\n<li><p>1.实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。使用版本号实现乐观锁：使用版本号时，可以在数据初始化时指定一个版本号，每次对数据的更新操作都对版本号执行$+1$操作。并判断当前版本号是不是该数据的最新的版本号。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Demo 1.0</span><br><span class=\"line\">1.查询出商品信息</span><br><span class=\"line\"><span class=\"keyword\">select</span> (<span class=\"keyword\">status</span>,<span class=\"keyword\">status</span>,<span class=\"keyword\">version</span>) <span class=\"keyword\">from</span> t_goods <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=#&#123;<span class=\"keyword\">id</span>&#125;</span><br><span class=\"line\"><span class=\"number\">2.</span>根据商品信息生成订单</span><br><span class=\"line\"><span class=\"number\">3.</span>修改商品<span class=\"keyword\">status</span>为<span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> t_goods </span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">status</span>=<span class=\"number\">2</span>,<span class=\"keyword\">version</span>=<span class=\"keyword\">version</span>+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=#&#123;<span class=\"keyword\">id</span>&#125; <span class=\"keyword\">and</span> <span class=\"keyword\">version</span>=#&#123;<span class=\"keyword\">version</span>&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.对于并发间操作产生的线程安全问题持悲状态，悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，直接上了锁就操作资源</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"悲观锁的优点和不足：\"><a href=\"#悲观锁的优点和不足：\" class=\"headerlink\" title=\"悲观锁的优点和不足：\"></a>悲观锁的优点和不足：</h5><p>&emsp;&emsp;乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。但如果直接简单这么做，还是有可能会遇到不可预期的结果，例如两个事务都读取了数据库的某一行，经过修改以后写回数据库，这时就遇到了问题。</p>\n<hr>\n<h4 id=\"悲观锁（Pessimistic-Concurrency-Control，PCC）：\"><a href=\"#悲观锁（Pessimistic-Concurrency-Control，PCC）：\" class=\"headerlink\" title=\"悲观锁（Pessimistic Concurrency Control，PCC）：\"></a>悲观锁（Pessimistic Concurrency Control，PCC）：</h4><h5 id=\"悲观锁的定义：\"><a href=\"#悲观锁的定义：\" class=\"headerlink\" title=\"悲观锁的定义：\"></a>悲观锁的定义：</h5><ul>\n<li>1.悲观锁指的是对数据被外界（包括本系统当前的其他事务，以及来自外部系统的事务处理）修改持保守态度(悲观)，因此，在整个数据处理过程中，将数据处于锁定状态。 悲观锁的实现，往往依靠数据库提供的锁机制 （也只有数据库层提供的锁机制才能真正保证数据访问的排他性，否则，即使在本系统中实现了加锁机制，也无法保证外部系统不会修改数据）；</li>\n<li>2.关系型数据库里，<strong>悲观并发控制</strong>是一种并发控制的方法。它可以阻止一个事物以影响其他用户的方式来修改数据。如果一个事物执行的操作都某行数据应用了锁，那只有当这个事物把锁释放，其他事物才能执行与该锁冲突的操作。</li>\n</ul>\n<h5 id=\"悲观锁的流程：\"><a href=\"#悲观锁的流程：\" class=\"headerlink\" title=\"悲观锁的流程：\"></a>悲观锁的流程：</h5><ul>\n<li>1.悲观锁的流程：在对任意记录进行修改前，先尝试为该记录加上<a href=\"http://www.hollischuang.com/archives/923\" target=\"_blank\" rel=\"noopener\">排他锁(exclusive locking)</a>，如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁，期间若有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常。</li>\n</ul>\n<h5 id=\"悲观锁Demo演示：-1\"><a href=\"#悲观锁Demo演示：-1\" class=\"headerlink\" title=\"悲观锁Demo演示：\"></a>悲观锁Demo演示：</h5><ul>\n<li>1.Mysql InnoDB使用悲观锁：要使用悲观锁，我们必须关闭mysql数据库的自动提交属性，因为MySQL默认使用autocommit模式，也就是说，当你执行一个更新操作后，MySQL会立刻将结果进行提交。set autocommit=0;<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Demo 1.0</span><br><span class=\"line\">//0.开始事务</span><br><span class=\"line\"><span class=\"keyword\">begin</span>;/<span class=\"keyword\">begin</span> <span class=\"keyword\">work</span>;/<span class=\"keyword\">start</span> <span class=\"keyword\">transaction</span>; (三者选一就可以)</span><br><span class=\"line\">//1.查询出商品信息</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">status</span> <span class=\"keyword\">from</span> t_goods <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>;</span><br><span class=\"line\">//2.根据商品信息生成订单</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> t_orders (<span class=\"keyword\">id</span>,goods_id) <span class=\"keyword\">values</span> (<span class=\"literal\">null</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">//3.修改商品status为2</span><br><span class=\"line\"><span class=\"keyword\">update</span> t_goods <span class=\"keyword\">set</span> <span class=\"keyword\">status</span>=<span class=\"number\">2</span>;</span><br><span class=\"line\">//4.提交事务</span><br><span class=\"line\"><span class=\"keyword\">commit</span>;/<span class=\"keyword\">commit</span> <span class=\"keyword\">work</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>&emsp;&emsp;上面的查询语句中，我们使用了select…for update的方式，这样就通过开启排他锁的方式实现了悲观锁。此时在t_goods表中，id为1的 那条数据就被我们锁定了，其它的事务必须等本次事务提交之后才能执行。这样我们可以保证当前的数据不会被其它事务修改。<br>  <strong><em>使用select…for update会把数据给锁住，不过我们需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意 </em></strong>。<br>  简单理解下悲观锁：当一个事务锁定了一些数据之后，只有当当前锁提交了事务，释放了锁，其他事务才能获得锁并执行操作。悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事物的成本环境中。</p>\n<ul>\n<li>2.下面另外一个简单Demo使用方式如下：<br>   首先要关闭MySQL的自动提交：set autocommit = 0;     <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Demo 2.0</span><br><span class=\"line\"><span class=\"keyword\">begin</span> <span class=\"comment\">--开启事务</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">id</span>, total, front, <span class=\"keyword\">end</span> <span class=\"keyword\">from</span> price <span class=\"keyword\">where</span> <span class=\"keyword\">id</span>=<span class=\"number\">1</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span> </span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> price <span class=\"keyword\">values</span>(?,?,?,?,?)</span><br><span class=\"line\"><span class=\"keyword\">commit</span> <span class=\"comment\">--提交事务</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>&emsp;&emsp;这里使用<strong>select for update的方式</strong>利用数据库开启了悲观锁，锁定了id=1的这条数据(<strong><em>注意:这里除非是使用了索引会启用行级锁，不然是会使用表锁，将整张表都锁住。 </em></strong>)。之后使用commit提交事务并释放锁，这样下一个线程过来拿到的就是正确的数据。<br>悲观锁一般是用于并发不是很高，并且不允许脏读等情况。但是对数据库资源消耗较大。</p>\n<h5 id=\"悲观锁的优点和不足：-1\"><a href=\"#悲观锁的优点和不足：-1\" class=\"headerlink\" title=\"悲观锁的优点和不足：\"></a>悲观锁的优点和不足：</h5><p>&emsp;&emsp;悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；另外，在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数.</p>\n<hr>\n<h4 id=\"相关技术参考：\"><a href=\"#相关技术参考：\" class=\"headerlink\" title=\"相关技术参考：\"></a>相关技术参考：</h4><ol>\n<li><a href=\"https://juejin.im/post/5962e64c6fb9a06ba14b9cd9\" target=\"_blank\" rel=\"noopener\">乐观锁与悲观锁的实际应用</a>(<strong>推荐此文</strong>)</li>\n<li><a href=\"https://segmentfault.com/a/1190000008935924\" target=\"_blank\" rel=\"noopener\">MySQL乐观锁在分布式场景下的实践</a>(<strong>推荐此文</strong>)</li>\n<li><a href=\"http://www.digpage.com/lock.html\" target=\"_blank\" rel=\"noopener\">乐观锁与悲观锁</a></li>\n<li><a href=\"http://www.hollischuang.com/archives/934\" target=\"_blank\" rel=\"noopener\">深入理解乐观锁与悲观锁</a></li>\n<li><a href=\"http://www.importnew.com/21037.html\" target=\"_blank\" rel=\"noopener\">深入理解乐观锁与悲观锁</a></li>\n<li><a href=\"https://www.cnblogs.com/deliver/p/5730616.html\" target=\"_blank\" rel=\"noopener\">mysql的锁—行锁，表锁，乐观锁，悲观锁</a></li>\n<li><a href=\"http://www.hollischuang.com/archives/909\" target=\"_blank\" rel=\"noopener\">数据库的锁机制</a></li>\n</ol>\n<h4 id=\"本文代码Demo：\"><a href=\"#本文代码Demo：\" class=\"headerlink\" title=\"本文代码Demo：\"></a>本文代码Demo：</h4><p>Github地址：<a href=\"git@github.com:edgeowner/saber.git\">参见Price相关代码</a></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Oct 01 2016 20:19:21 GMT+0800 (CST)","title":"乐观锁和悲观锁(OCC和PCC)","path":"2016/10/01/SortAlogrithms/optimistic-pessimistic-locking/","eyeCatchImage":null,"excerpt":null,"date":"2016-10-01T11:20:43.000Z","pv":0,"totalPV":0,"categories":"并发控制相关知识点","tags":["并发控制","锁"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"归并排序（Merge Sort）","copyright":true,"date":"2015-03-28T11:35:31.000Z","updated":"2015-03-28T12:17:23.000Z","mathjax":true,"_content":"\n### 归并排序\n归并排序（Merge Sort）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。\n\n归并过程为：比较$a[i]$和$b[j]$的大小，若$a[i]≤b[j]$，则将第一个有序表中的元素$a[i]$复制到$r[k]$中，并令$i$和$k$分别加上$1$；否则将第二个有序表中的元素$b[j]$复制到$r[k]$中，并令$j$和$k$分别加上$1$，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到$r$中从下标$k$到下标$t$的单元。归并排序的算法我们通常用递归实现，先把待排序区间$[s,t]$以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间$[s,t]$。\n  \n-------\n\n<!-- more -->\n\n#### 算法思路\nSelection Sort、Bubble Sort、Insertion Sort is $O(n^2)$ in average case , Merge Sort $O(n log(n))$ in worst case.\n1. In this sorting algorithm we use the idea of divide and conquer. We divide the array into two parts, sort them and then merge them to get the elements in ascending or descending order. Merge sorting is done recursively.\n2. We take an array and keep dividing from the middle till we get only one element in each halves(sub-array).\n3. The we sort the sub-arrays and join (merge) them back to get the final sorted array.\n\n> 1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；\n> 2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置；\n> 3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；\n> 4. 重复步骤3直到某一指针超出序列尾；\n> 5. 将另一序列剩下的所有元素直接复制到合并序列尾\n\n**总结**：\n* 将两个已排好序的数组合并成一个有序的数组,称之为归并排序；\n* 步骤：遍历两个数组，比较它们的值。谁比较小，谁先放入大数组中，直到数组遍历完成；\n\n算法动态展示\n1. [YouTube视频源地址](https://www.youtube.com/watch?v=7zuGmKfUt7s&t=15s) ;\n2. [Merge Sort - step by step guide](https://www.youtube.com/watch?v=e5ik2UGjHBk);     \n***In this video beg and end are pointing at array index not the value at the array index.﻿ ***\n3. [开课老师视频源](https://www.youtube.com/watch?v=qdv3i6X0PiQ); \n4. [MycodeSchool](https://www.youtube.com/watch?v=TzeBrDU-JaY&t=319s) \n5. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/mergeSort.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n \n-------\n\n#### 代码实现方式\n```java\n  /**\n     * 归并排序\n     *\n     * @param arrs\n     */\n    public static void mergeSort(int[] arrs) {\n        if (arrs == null || arrs.length == 0 || arrs.length == 0) {\n            return;\n        }\n        mergeSort(arrs, 0, arrs.length - 1);\n    }\n\n    /**\n     * 归并排序核心部分(递归调用)\n     *\n     * @param arrs\n     * @param left\n     * @param right\n     */\n    private static void mergeSort(int[] arrs, int left, int right) {\n        //如果只有一个元素就不用排序\n        if (left == right) {\n            return;\n        } else {\n            //取消中间数，进行拆分\n            int middle = (left + right) / 2;\n            //左边的数不断进行拆分\n            mergeSort(arrs, left, middle);\n            //右边的数不断进行拆分\n            mergeSort(arrs, middle + 1, right);\n            //合并\n            merge(arrs, left, middle + 1, right);\n        }\n    }\n\n    /**\n     * 合并数组\n     *\n     * @param arrs\n     * @param left   指向数组第一个元素\n     * @param middle 指向数组分隔的元素\n     * @param right  指向数组最后的元素\n     */\n    private static void merge(int[] arrs, int left, int middle, int right) {\n\n        //左边的数组大小\n        int[] leftArrs = new int[middle - left];\n\n        //右边的数组大小\n        int[] rightArrs = new int[right - middle + 1];\n\n        //往这两个数组填充数据\n        for (int i = left; i < middle; i++) {\n            leftArrs[i - left] = arrs[i];\n        }\n        for (int i = middle; i <= right; i++) {\n            rightArrs[i - middle] = arrs[i];\n        }\n\n        int i = 0, j = 0;\n        //arrs数组的第一个元素\n        int k = left;\n        //比较两个数组的值，哪个小，就往数组上放\n        while (i < leftArrs.length && j < rightArrs.length) {\n            //谁比较小，谁将元素放入大数组中，移动指针，继续比较下一个\n            if (leftArrs[i] < rightArrs[j]) {\n                arrs[k] = leftArrs[i];\n                i++;\n                k++;\n            } else {\n                arrs[k] = rightArrs[j];\n                j++;\n                k++;\n            }\n        }\n\n        //如果左边的数组还没比较完，右边的数都已经完了，那么将左边的数抄到大数组中(剩下的都是大数字)\n        while (i < leftArrs.length) {\n            arrs[k] = leftArrs[i];\n            i++;\n            k++;\n        }\n        //如果右边的数组还没比较晚，左边的数都已经完了，那么将右边的数抄到大数组中(剩下的都是大数字)\n        while (j < rightArrs.length) {\n            arrs[k] = rightArrs[j];\n            k++;\n            j++;\n        }\n    }\n```\n\n参考地址：[归并排序](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484058&idx=1&sn=432c2dd8e4bda662ce066c09f8e22bda&chksm=ebd7439bdca0ca8ded40d0f431db411928936db9b4b5f5595027c8acd2efdef5ba35348641d2&scene=21#wechat_redirect)\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n\n","source":"_posts/SortAlogrithms/mergeSort.md","raw":"---\ntitle: 归并排序（Merge Sort）\ntags: [Algorithms, Sort]\ncopyright: true\ndate: 2015-03-28 19:35:31\nupdated: 2015-03-28 20:17:23\ncategories: Algorithms \nmathjax: true\n---\n\n### 归并排序\n归并排序（Merge Sort）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。\n\n归并过程为：比较$a[i]$和$b[j]$的大小，若$a[i]≤b[j]$，则将第一个有序表中的元素$a[i]$复制到$r[k]$中，并令$i$和$k$分别加上$1$；否则将第二个有序表中的元素$b[j]$复制到$r[k]$中，并令$j$和$k$分别加上$1$，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到$r$中从下标$k$到下标$t$的单元。归并排序的算法我们通常用递归实现，先把待排序区间$[s,t]$以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间$[s,t]$。\n  \n-------\n\n<!-- more -->\n\n#### 算法思路\nSelection Sort、Bubble Sort、Insertion Sort is $O(n^2)$ in average case , Merge Sort $O(n log(n))$ in worst case.\n1. In this sorting algorithm we use the idea of divide and conquer. We divide the array into two parts, sort them and then merge them to get the elements in ascending or descending order. Merge sorting is done recursively.\n2. We take an array and keep dividing from the middle till we get only one element in each halves(sub-array).\n3. The we sort the sub-arrays and join (merge) them back to get the final sorted array.\n\n> 1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；\n> 2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置；\n> 3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；\n> 4. 重复步骤3直到某一指针超出序列尾；\n> 5. 将另一序列剩下的所有元素直接复制到合并序列尾\n\n**总结**：\n* 将两个已排好序的数组合并成一个有序的数组,称之为归并排序；\n* 步骤：遍历两个数组，比较它们的值。谁比较小，谁先放入大数组中，直到数组遍历完成；\n\n算法动态展示\n1. [YouTube视频源地址](https://www.youtube.com/watch?v=7zuGmKfUt7s&t=15s) ;\n2. [Merge Sort - step by step guide](https://www.youtube.com/watch?v=e5ik2UGjHBk);     \n***In this video beg and end are pointing at array index not the value at the array index.﻿ ***\n3. [开课老师视频源](https://www.youtube.com/watch?v=qdv3i6X0PiQ); \n4. [MycodeSchool](https://www.youtube.com/watch?v=TzeBrDU-JaY&t=319s) \n5. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/mergeSort.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n \n-------\n\n#### 代码实现方式\n```java\n  /**\n     * 归并排序\n     *\n     * @param arrs\n     */\n    public static void mergeSort(int[] arrs) {\n        if (arrs == null || arrs.length == 0 || arrs.length == 0) {\n            return;\n        }\n        mergeSort(arrs, 0, arrs.length - 1);\n    }\n\n    /**\n     * 归并排序核心部分(递归调用)\n     *\n     * @param arrs\n     * @param left\n     * @param right\n     */\n    private static void mergeSort(int[] arrs, int left, int right) {\n        //如果只有一个元素就不用排序\n        if (left == right) {\n            return;\n        } else {\n            //取消中间数，进行拆分\n            int middle = (left + right) / 2;\n            //左边的数不断进行拆分\n            mergeSort(arrs, left, middle);\n            //右边的数不断进行拆分\n            mergeSort(arrs, middle + 1, right);\n            //合并\n            merge(arrs, left, middle + 1, right);\n        }\n    }\n\n    /**\n     * 合并数组\n     *\n     * @param arrs\n     * @param left   指向数组第一个元素\n     * @param middle 指向数组分隔的元素\n     * @param right  指向数组最后的元素\n     */\n    private static void merge(int[] arrs, int left, int middle, int right) {\n\n        //左边的数组大小\n        int[] leftArrs = new int[middle - left];\n\n        //右边的数组大小\n        int[] rightArrs = new int[right - middle + 1];\n\n        //往这两个数组填充数据\n        for (int i = left; i < middle; i++) {\n            leftArrs[i - left] = arrs[i];\n        }\n        for (int i = middle; i <= right; i++) {\n            rightArrs[i - middle] = arrs[i];\n        }\n\n        int i = 0, j = 0;\n        //arrs数组的第一个元素\n        int k = left;\n        //比较两个数组的值，哪个小，就往数组上放\n        while (i < leftArrs.length && j < rightArrs.length) {\n            //谁比较小，谁将元素放入大数组中，移动指针，继续比较下一个\n            if (leftArrs[i] < rightArrs[j]) {\n                arrs[k] = leftArrs[i];\n                i++;\n                k++;\n            } else {\n                arrs[k] = rightArrs[j];\n                j++;\n                k++;\n            }\n        }\n\n        //如果左边的数组还没比较完，右边的数都已经完了，那么将左边的数抄到大数组中(剩下的都是大数字)\n        while (i < leftArrs.length) {\n            arrs[k] = leftArrs[i];\n            i++;\n            k++;\n        }\n        //如果右边的数组还没比较晚，左边的数都已经完了，那么将右边的数抄到大数组中(剩下的都是大数字)\n        while (j < rightArrs.length) {\n            arrs[k] = rightArrs[j];\n            k++;\n            j++;\n        }\n    }\n```\n\n参考地址：[归并排序](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484058&idx=1&sn=432c2dd8e4bda662ce066c09f8e22bda&chksm=ebd7439bdca0ca8ded40d0f431db411928936db9b4b5f5595027c8acd2efdef5ba35348641d2&scene=21#wechat_redirect)\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n\n","slug":"SortAlogrithms/mergeSort","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbnj00319l8ik1zjipwi","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p>归并排序（Merge Sort）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>\n<p>归并过程为：比较$a[i]$和$b[j]$的大小，若$a[i]≤b[j]$，则将第一个有序表中的元素$a[i]$复制到$r[k]$中，并令$i$和$k$分别加上$1$；否则将第二个有序表中的元素$b[j]$复制到$r[k]$中，并令$j$和$k$分别加上$1$，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到$r$中从下标$k$到下标$t$的单元。归并排序的算法我们通常用递归实现，先把待排序区间$[s,t]$以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间$[s,t]$。</p>\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>Selection Sort、Bubble Sort、Insertion Sort is $O(n^2)$ in average case , Merge Sort $O(n log(n))$ in worst case.</p>\n<ol>\n<li>In this sorting algorithm we use the idea of divide and conquer. We divide the array into two parts, sort them and then merge them to get the elements in ascending or descending order. Merge sorting is done recursively.</li>\n<li>We take an array and keep dividing from the middle till we get only one element in each halves(sub-array).</li>\n<li>The we sort the sub-arrays and join (merge) them back to get the final sorted array.</li>\n</ol>\n<blockquote>\n<ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\n<li>重复步骤3直到某一指针超出序列尾；</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>\n</ol>\n</blockquote>\n<p><strong>总结</strong>：</p>\n<ul>\n<li>将两个已排好序的数组合并成一个有序的数组,称之为归并排序；</li>\n<li>步骤：遍历两个数组，比较它们的值。谁比较小，谁先放入大数组中，直到数组遍历完成；</li>\n</ul>\n<p>算法动态展示</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=7zuGmKfUt7s&amp;t=15s\" target=\"_blank\" rel=\"noopener\">YouTube视频源地址</a> ;</li>\n<li><a href=\"https://www.youtube.com/watch?v=e5ik2UGjHBk\" target=\"_blank\" rel=\"noopener\">Merge Sort - step by step guide</a>;<br><strong><em>In this video beg and end are pointing at array index not the value at the array index.﻿ </em></strong></li>\n<li><a href=\"https://www.youtube.com/watch?v=qdv3i6X0PiQ\" target=\"_blank\" rel=\"noopener\">开课老师视频源</a>; </li>\n<li><a href=\"https://www.youtube.com/watch?v=TzeBrDU-JaY&amp;t=319s\" target=\"_blank\" rel=\"noopener\">MycodeSchool</a> </li>\n<li><div id=\"dplayer2\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer2\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/mergeSort.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n</li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式\"><a href=\"#代码实现方式\" class=\"headerlink\" title=\"代码实现方式\"></a>代码实现方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 归并排序</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arrs == <span class=\"keyword\">null</span> || arrs.length == <span class=\"number\">0</span> || arrs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      mergeSort(arrs, <span class=\"number\">0</span>, arrs.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 归并排序核心部分(递归调用)</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> left</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> right</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果只有一个元素就不用排序</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (left == right) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//取消中间数，进行拆分</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> middle = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">          <span class=\"comment\">//左边的数不断进行拆分</span></span><br><span class=\"line\">          mergeSort(arrs, left, middle);</span><br><span class=\"line\">          <span class=\"comment\">//右边的数不断进行拆分</span></span><br><span class=\"line\">          mergeSort(arrs, middle + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">          <span class=\"comment\">//合并</span></span><br><span class=\"line\">          merge(arrs, left, middle + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 合并数组</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> left   指向数组第一个元素</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> middle 指向数组分隔的元素</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> right  指向数组最后的元素</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> middle, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//左边的数组大小</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] leftArrs = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[middle - left];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//右边的数组大小</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] rightArrs = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[right - middle + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//往这两个数组填充数据</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left; i &lt; middle; i++) &#123;</span><br><span class=\"line\">          leftArrs[i - left] = arrs[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = middle; i &lt;= right; i++) &#123;</span><br><span class=\"line\">          rightArrs[i - middle] = arrs[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"comment\">//arrs数组的第一个元素</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> k = left;</span><br><span class=\"line\">      <span class=\"comment\">//比较两个数组的值，哪个小，就往数组上放</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &lt; leftArrs.length &amp;&amp; j &lt; rightArrs.length) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//谁比较小，谁将元素放入大数组中，移动指针，继续比较下一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (leftArrs[i] &lt; rightArrs[j]) &#123;</span><br><span class=\"line\">              arrs[k] = leftArrs[i];</span><br><span class=\"line\">              i++;</span><br><span class=\"line\">              k++;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              arrs[k] = rightArrs[j];</span><br><span class=\"line\">              j++;</span><br><span class=\"line\">              k++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//如果左边的数组还没比较完，右边的数都已经完了，那么将左边的数抄到大数组中(剩下的都是大数字)</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &lt; leftArrs.length) &#123;</span><br><span class=\"line\">          arrs[k] = leftArrs[i];</span><br><span class=\"line\">          i++;</span><br><span class=\"line\">          k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//如果右边的数组还没比较晚，左边的数都已经完了，那么将右边的数抄到大数组中(剩下的都是大数字)</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (j &lt; rightArrs.length) &#123;</span><br><span class=\"line\">          arrs[k] = rightArrs[j];</span><br><span class=\"line\">          k++;</span><br><span class=\"line\">          j++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>参考地址：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484058&amp;idx=1&amp;sn=432c2dd8e4bda662ce066c09f8e22bda&amp;chksm=ebd7439bdca0ca8ded40d0f431db411928936db9b4b5f5595027c8acd2efdef5ba35348641d2&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">归并排序</a><br>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p>归并排序（Merge Sort）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>\n<p>归并过程为：比较$a[i]$和$b[j]$的大小，若$a[i]≤b[j]$，则将第一个有序表中的元素$a[i]$复制到$r[k]$中，并令$i$和$k$分别加上$1$；否则将第二个有序表中的元素$b[j]$复制到$r[k]$中，并令$j$和$k$分别加上$1$，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到$r$中从下标$k$到下标$t$的单元。归并排序的算法我们通常用递归实现，先把待排序区间$[s,t]$以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间$[s,t]$。</p>\n<hr>","more":"<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>Selection Sort、Bubble Sort、Insertion Sort is $O(n^2)$ in average case , Merge Sort $O(n log(n))$ in worst case.</p>\n<ol>\n<li>In this sorting algorithm we use the idea of divide and conquer. We divide the array into two parts, sort them and then merge them to get the elements in ascending or descending order. Merge sorting is done recursively.</li>\n<li>We take an array and keep dividing from the middle till we get only one element in each halves(sub-array).</li>\n<li>The we sort the sub-arrays and join (merge) them back to get the final sorted array.</li>\n</ol>\n<blockquote>\n<ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\n<li>重复步骤3直到某一指针超出序列尾；</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>\n</ol>\n</blockquote>\n<p><strong>总结</strong>：</p>\n<ul>\n<li>将两个已排好序的数组合并成一个有序的数组,称之为归并排序；</li>\n<li>步骤：遍历两个数组，比较它们的值。谁比较小，谁先放入大数组中，直到数组遍历完成；</li>\n</ul>\n<p>算法动态展示</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=7zuGmKfUt7s&amp;t=15s\" target=\"_blank\" rel=\"noopener\">YouTube视频源地址</a> ;</li>\n<li><a href=\"https://www.youtube.com/watch?v=e5ik2UGjHBk\" target=\"_blank\" rel=\"noopener\">Merge Sort - step by step guide</a>;<br><strong><em>In this video beg and end are pointing at array index not the value at the array index.﻿ </em></strong></li>\n<li><a href=\"https://www.youtube.com/watch?v=qdv3i6X0PiQ\" target=\"_blank\" rel=\"noopener\">开课老师视频源</a>; </li>\n<li><a href=\"https://www.youtube.com/watch?v=TzeBrDU-JaY&amp;t=319s\" target=\"_blank\" rel=\"noopener\">MycodeSchool</a> </li>\n<li><div id=\"dplayer2\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer2\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/mergeSort.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n</li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式\"><a href=\"#代码实现方式\" class=\"headerlink\" title=\"代码实现方式\"></a>代码实现方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 归并排序</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (arrs == <span class=\"keyword\">null</span> || arrs.length == <span class=\"number\">0</span> || arrs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      mergeSort(arrs, <span class=\"number\">0</span>, arrs.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 归并排序核心部分(递归调用)</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> left</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> right</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//如果只有一个元素就不用排序</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (left == right) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//取消中间数，进行拆分</span></span><br><span class=\"line\">          <span class=\"keyword\">int</span> middle = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">          <span class=\"comment\">//左边的数不断进行拆分</span></span><br><span class=\"line\">          mergeSort(arrs, left, middle);</span><br><span class=\"line\">          <span class=\"comment\">//右边的数不断进行拆分</span></span><br><span class=\"line\">          mergeSort(arrs, middle + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">          <span class=\"comment\">//合并</span></span><br><span class=\"line\">          merge(arrs, left, middle + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 合并数组</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> left   指向数组第一个元素</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> middle 指向数组分隔的元素</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> right  指向数组最后的元素</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> middle, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//左边的数组大小</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] leftArrs = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[middle - left];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//右边的数组大小</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span>[] rightArrs = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[right - middle + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//往这两个数组填充数据</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left; i &lt; middle; i++) &#123;</span><br><span class=\"line\">          leftArrs[i - left] = arrs[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = middle; i &lt;= right; i++) &#123;</span><br><span class=\"line\">          rightArrs[i - middle] = arrs[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"comment\">//arrs数组的第一个元素</span></span><br><span class=\"line\">      <span class=\"keyword\">int</span> k = left;</span><br><span class=\"line\">      <span class=\"comment\">//比较两个数组的值，哪个小，就往数组上放</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &lt; leftArrs.length &amp;&amp; j &lt; rightArrs.length) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//谁比较小，谁将元素放入大数组中，移动指针，继续比较下一个</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (leftArrs[i] &lt; rightArrs[j]) &#123;</span><br><span class=\"line\">              arrs[k] = leftArrs[i];</span><br><span class=\"line\">              i++;</span><br><span class=\"line\">              k++;</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              arrs[k] = rightArrs[j];</span><br><span class=\"line\">              j++;</span><br><span class=\"line\">              k++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//如果左边的数组还没比较完，右边的数都已经完了，那么将左边的数抄到大数组中(剩下的都是大数字)</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &lt; leftArrs.length) &#123;</span><br><span class=\"line\">          arrs[k] = leftArrs[i];</span><br><span class=\"line\">          i++;</span><br><span class=\"line\">          k++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//如果右边的数组还没比较晚，左边的数都已经完了，那么将右边的数抄到大数组中(剩下的都是大数字)</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (j &lt; rightArrs.length) &#123;</span><br><span class=\"line\">          arrs[k] = rightArrs[j];</span><br><span class=\"line\">          k++;</span><br><span class=\"line\">          j++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>参考地址：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484058&amp;idx=1&amp;sn=432c2dd8e4bda662ce066c09f8e22bda&amp;chksm=ebd7439bdca0ca8ded40d0f431db411928936db9b4b5f5595027c8acd2efdef5ba35348641d2&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">归并排序</a><br>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 28 2015 20:17:23 GMT+0800 (CST)","title":"归并排序（Merge Sort）","path":"2015/03/28/SortAlogrithms/mergeSort/","eyeCatchImage":null,"excerpt":"<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p>归并排序（Merge Sort）是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p>\n<p>归并过程为：比较$a[i]$和$b[j]$的大小，若$a[i]≤b[j]$，则将第一个有序表中的元素$a[i]$复制到$r[k]$中，并令$i$和$k$分别加上$1$；否则将第二个有序表中的元素$b[j]$复制到$r[k]$中，并令$j$和$k$分别加上$1$，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到$r$中从下标$k$到下标$t$的单元。归并排序的算法我们通常用递归实现，先把待排序区间$[s,t]$以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间$[s,t]$。</p>\n<hr>","date":"2015-03-28T11:35:31.000Z","pv":0,"totalPV":0,"categories":"Algorithms","tags":["Algorithms","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"快速排序（Quick Sort）","copyright":true,"date":"2015-03-24T02:10:31.000Z","updated":"2015-03-24T14:19:00.000Z","_content":"\n### 快速排序\n快速排序是冒泡排序的改进版，是最好的一种内排序，面试会经常被问到，是程序员必须掌握的。\n\n-------\n#### 算法思路\n快速排一般基于递归实现：\n1. 选定一个合适的值（理想情况中值最好。实现中一般使用数组第一个值），称为“枢轴”（pivot）。\n2. 基于这个值，将数组分为两部分，较小的分在左边，较大的分在右边。\n3. 一轮下来，这个枢轴的位置一定在最终位置上。\n4. 对两个子数组分别重复上述过程，直到每个数组只有一个元素。\n5. 排序完成。\n\n<!-- more -->\n\n-------\n#### 快速排序示意图：\n![](http://p5vswdxl9.bkt.clouddn.com/Sorting_quicksort_anim.gif)\n图例过程演示（[中文原视频地址](https://www.bilibili.com/video/av12540893?from=search&seid=6178581465044594405)）：\n1. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180327-124320-HD.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n2. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180327-124538-HD.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n3. [超有趣的快速排序视频](https://www.youtube.com/watch?v=ywWBy6J5gz8)\n\n-------\n#### 代码实现方式（为了更直观的反映整个排序过程添加了标记代码）：\n```java\n private static void quickSort2(int arr[], int left, int right) {\n        //如果left不小于right ，需要排序的部分只有一个元素，方法返回\n        System.out.println(\"left:\" + left + \",right:\" + right);\n        if (left == 0 && right == 0) {\n            System.out.println(\"i=j=0\");\n        }\n        System.out.println(\"1.-------------------\");\n        if (left >= right) {\n            System.out.println(MessageFormat.format(\"return: left,{0}  | right,{1}\", left, right));\n            return;\n        }\n        //设置最左边元素为基准点：pivot\n        int pivot = arr[left];\n        System.out.println(\"pivot:\" + pivot);\n        int i = left;\n        int j = right;\n        //把要排序的序列中比p大的放到右边，比p小的放到左边，p的下标位置为i\n        while (i < j) {\n            System.out.println(\"2.-------start------------\");\n            while (i < j && arr[j] >= pivot) {\n                j--;\n                System.out.println(\"2.  j:\" + j);\n            }\n            System.out.println(\"========[j-- over, i++ start ]==========\");\n            while (i < j && arr[i] <= pivot) {\n                i++;\n                System.out.println(\"2.  i:\" + i);\n            }\n            System.out.println(\"2.-------end------------\");\n\n            if (i < j) {\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        //交换基准点\n        arr[left] = arr[i];\n        arr[i] = pivot;\n        //对序列中，i左边的元素实施快速排序\n        System.out.println(\"左边开始前， right为\" + right + \"值\");\n        quickSort2(arr, left, i - 1);\n        //对序列中，j右边边的元素实施快速排序\n        System.out.println(\"右块遍历开始...... \");\n        quickSort2(arr, i + 1, right);\n        System.out.println(\"left =:\" + (i + 1) + \",right = \" + right);\n        System.out.println(\"3.-------------------\");\n        System.out.println(\"4.---------all over----------\");\n```\n\n```Java\n public static void quickSort(int[] arr) {\n           //大数据量测试\n        int[] arr = new int[100000];\n        Random r = new Random();\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = r.nextInt(10000000);\n        }\n        long start = System.currentTimeMillis();\n        quickSort(nums);\n        long time = System.currentTimeMillis() - start;\n        System.out.println(\"-----------大数据量测试结果-----------\");\n        System.out.println(\"all time:\" + time + \"毫秒\");\n    }\n```\n\n参考地址：[](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484039&idx=1&sn=15aa43a3865daca394abae379c7a5383&chksm=ebd74386dca0ca90e3c3067515de1c3b3da7e0ea44a26d8dd96e8d7424f4e10227d9edac9bcf#rd)\n\n\n\n","source":"_posts/SortAlogrithms/quickSort.md","raw":"---\ntitle: 快速排序（Quick Sort）\ntags: [Algorithms, Sort]\ncopyright: true\ndate: 2015-03-24 10:10:31\nupdated: 2015-03-24 22:19:00\ncategories: Algorithms\n---\n\n### 快速排序\n快速排序是冒泡排序的改进版，是最好的一种内排序，面试会经常被问到，是程序员必须掌握的。\n\n-------\n#### 算法思路\n快速排一般基于递归实现：\n1. 选定一个合适的值（理想情况中值最好。实现中一般使用数组第一个值），称为“枢轴”（pivot）。\n2. 基于这个值，将数组分为两部分，较小的分在左边，较大的分在右边。\n3. 一轮下来，这个枢轴的位置一定在最终位置上。\n4. 对两个子数组分别重复上述过程，直到每个数组只有一个元素。\n5. 排序完成。\n\n<!-- more -->\n\n-------\n#### 快速排序示意图：\n![](http://p5vswdxl9.bkt.clouddn.com/Sorting_quicksort_anim.gif)\n图例过程演示（[中文原视频地址](https://www.bilibili.com/video/av12540893?from=search&seid=6178581465044594405)）：\n1. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180327-124320-HD.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n2. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180327-124538-HD.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n3. [超有趣的快速排序视频](https://www.youtube.com/watch?v=ywWBy6J5gz8)\n\n-------\n#### 代码实现方式（为了更直观的反映整个排序过程添加了标记代码）：\n```java\n private static void quickSort2(int arr[], int left, int right) {\n        //如果left不小于right ，需要排序的部分只有一个元素，方法返回\n        System.out.println(\"left:\" + left + \",right:\" + right);\n        if (left == 0 && right == 0) {\n            System.out.println(\"i=j=0\");\n        }\n        System.out.println(\"1.-------------------\");\n        if (left >= right) {\n            System.out.println(MessageFormat.format(\"return: left,{0}  | right,{1}\", left, right));\n            return;\n        }\n        //设置最左边元素为基准点：pivot\n        int pivot = arr[left];\n        System.out.println(\"pivot:\" + pivot);\n        int i = left;\n        int j = right;\n        //把要排序的序列中比p大的放到右边，比p小的放到左边，p的下标位置为i\n        while (i < j) {\n            System.out.println(\"2.-------start------------\");\n            while (i < j && arr[j] >= pivot) {\n                j--;\n                System.out.println(\"2.  j:\" + j);\n            }\n            System.out.println(\"========[j-- over, i++ start ]==========\");\n            while (i < j && arr[i] <= pivot) {\n                i++;\n                System.out.println(\"2.  i:\" + i);\n            }\n            System.out.println(\"2.-------end------------\");\n\n            if (i < j) {\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        //交换基准点\n        arr[left] = arr[i];\n        arr[i] = pivot;\n        //对序列中，i左边的元素实施快速排序\n        System.out.println(\"左边开始前， right为\" + right + \"值\");\n        quickSort2(arr, left, i - 1);\n        //对序列中，j右边边的元素实施快速排序\n        System.out.println(\"右块遍历开始...... \");\n        quickSort2(arr, i + 1, right);\n        System.out.println(\"left =:\" + (i + 1) + \",right = \" + right);\n        System.out.println(\"3.-------------------\");\n        System.out.println(\"4.---------all over----------\");\n```\n\n```Java\n public static void quickSort(int[] arr) {\n           //大数据量测试\n        int[] arr = new int[100000];\n        Random r = new Random();\n        for (int i = 0; i < arr.length; i++) {\n            arr[i] = r.nextInt(10000000);\n        }\n        long start = System.currentTimeMillis();\n        quickSort(nums);\n        long time = System.currentTimeMillis() - start;\n        System.out.println(\"-----------大数据量测试结果-----------\");\n        System.out.println(\"all time:\" + time + \"毫秒\");\n    }\n```\n\n参考地址：[](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484039&idx=1&sn=15aa43a3865daca394abae379c7a5383&chksm=ebd74386dca0ca90e3c3067515de1c3b3da7e0ea44a26d8dd96e8d7424f4e10227d9edac9bcf#rd)\n\n\n\n","slug":"SortAlogrithms/quickSort","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbnl00329l8i3dhgwya0","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>快速排序是冒泡排序的改进版，是最好的一种内排序，面试会经常被问到，是程序员必须掌握的。</p>\n<hr>\n<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>快速排一般基于递归实现：</p>\n<ol>\n<li>选定一个合适的值（理想情况中值最好。实现中一般使用数组第一个值），称为“枢轴”（pivot）。</li>\n<li>基于这个值，将数组分为两部分，较小的分在左边，较大的分在右边。</li>\n<li>一轮下来，这个枢轴的位置一定在最终位置上。</li>\n<li>对两个子数组分别重复上述过程，直到每个数组只有一个元素。</li>\n<li>排序完成。</li>\n</ol>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"快速排序示意图：\"><a href=\"#快速排序示意图：\" class=\"headerlink\" title=\"快速排序示意图：\"></a>快速排序示意图：</h4><p><img src=\"http://p5vswdxl9.bkt.clouddn.com/Sorting_quicksort_anim.gif\" alt=\"\"><br>图例过程演示（<a href=\"https://www.bilibili.com/video/av12540893?from=search&amp;seid=6178581465044594405\" target=\"_blank\" rel=\"noopener\">中文原视频地址</a>）：</p>\n<ol>\n<li><div id=\"dplayer3\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer3\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180327-124320-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></li>\n<li><div id=\"dplayer4\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer4\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180327-124538-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></li>\n<li><a href=\"https://www.youtube.com/watch?v=ywWBy6J5gz8\" target=\"_blank\" rel=\"noopener\">超有趣的快速排序视频</a></li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式（为了更直观的反映整个排序过程添加了标记代码）：\"><a href=\"#代码实现方式（为了更直观的反映整个排序过程添加了标记代码）：\" class=\"headerlink\" title=\"代码实现方式（为了更直观的反映整个排序过程添加了标记代码）：\"></a>代码实现方式（为了更直观的反映整个排序过程添加了标记代码）：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort2</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//如果left不小于right ，需要排序的部分只有一个元素，方法返回</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"left:\"</span> + left + <span class=\"string\">\",right:\"</span> + right);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (left == <span class=\"number\">0</span> &amp;&amp; right == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"i=j=0\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"1.-------------------\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (left &gt;= right) &#123;</span><br><span class=\"line\">           System.out.println(MessageFormat.format(<span class=\"string\">\"return: left,&#123;0&#125;  | right,&#123;1&#125;\"</span>, left, right));</span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//设置最左边元素为基准点：pivot</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> pivot = arr[left];</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"pivot:\"</span> + pivot);</span><br><span class=\"line\">       <span class=\"keyword\">int</span> i = left;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> j = right;</span><br><span class=\"line\">       <span class=\"comment\">//把要排序的序列中比p大的放到右边，比p小的放到左边，p的下标位置为i</span></span><br><span class=\"line\">       <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"2.-------start------------\"</span>);</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= pivot) &#123;</span><br><span class=\"line\">               j--;</span><br><span class=\"line\">               System.out.println(<span class=\"string\">\"2.  j:\"</span> + j);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"========[j-- over, i++ start ]==========\"</span>);</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivot) &#123;</span><br><span class=\"line\">               i++;</span><br><span class=\"line\">               System.out.println(<span class=\"string\">\"2.  i:\"</span> + i);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"2.-------end------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">               arr[i] = arr[j];</span><br><span class=\"line\">               arr[j] = temp;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//交换基准点</span></span><br><span class=\"line\">       arr[left] = arr[i];</span><br><span class=\"line\">       arr[i] = pivot;</span><br><span class=\"line\">       <span class=\"comment\">//对序列中，i左边的元素实施快速排序</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"左边开始前， right为\"</span> + right + <span class=\"string\">\"值\"</span>);</span><br><span class=\"line\">       quickSort2(arr, left, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"comment\">//对序列中，j右边边的元素实施快速排序</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"右块遍历开始...... \"</span>);</span><br><span class=\"line\">       quickSort2(arr, i + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"left =:\"</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">\",right = \"</span> + right);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"3.-------------------\"</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"4.---------all over----------\"</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//大数据量测试</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100000</span>];</span><br><span class=\"line\">       Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">           arr[i] = r.nextInt(<span class=\"number\">10000000</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">       quickSort(nums);</span><br><span class=\"line\">       <span class=\"keyword\">long</span> time = System.currentTimeMillis() - start;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"-----------大数据量测试结果-----------\"</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"all time:\"</span> + time + <span class=\"string\">\"毫秒\"</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>参考地址：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484039&amp;idx=1&amp;sn=15aa43a3865daca394abae379c7a5383&amp;chksm=ebd74386dca0ca90e3c3067515de1c3b3da7e0ea44a26d8dd96e8d7424f4e10227d9edac9bcf#rd\" target=\"_blank\" rel=\"noopener\"></a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>快速排序是冒泡排序的改进版，是最好的一种内排序，面试会经常被问到，是程序员必须掌握的。</p>\n<hr>\n<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>快速排一般基于递归实现：</p>\n<ol>\n<li>选定一个合适的值（理想情况中值最好。实现中一般使用数组第一个值），称为“枢轴”（pivot）。</li>\n<li>基于这个值，将数组分为两部分，较小的分在左边，较大的分在右边。</li>\n<li>一轮下来，这个枢轴的位置一定在最终位置上。</li>\n<li>对两个子数组分别重复上述过程，直到每个数组只有一个元素。</li>\n<li>排序完成。</li>\n</ol>","more":"<hr>\n<h4 id=\"快速排序示意图：\"><a href=\"#快速排序示意图：\" class=\"headerlink\" title=\"快速排序示意图：\"></a>快速排序示意图：</h4><p><img src=\"http://p5vswdxl9.bkt.clouddn.com/Sorting_quicksort_anim.gif\" alt=\"\"><br>图例过程演示（<a href=\"https://www.bilibili.com/video/av12540893?from=search&amp;seid=6178581465044594405\" target=\"_blank\" rel=\"noopener\">中文原视频地址</a>）：</p>\n<ol>\n<li><div id=\"dplayer3\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer3\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180327-124320-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></li>\n<li><div id=\"dplayer4\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer4\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180327-124538-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></li>\n<li><a href=\"https://www.youtube.com/watch?v=ywWBy6J5gz8\" target=\"_blank\" rel=\"noopener\">超有趣的快速排序视频</a></li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式（为了更直观的反映整个排序过程添加了标记代码）：\"><a href=\"#代码实现方式（为了更直观的反映整个排序过程添加了标记代码）：\" class=\"headerlink\" title=\"代码实现方式（为了更直观的反映整个排序过程添加了标记代码）：\"></a>代码实现方式（为了更直观的反映整个排序过程添加了标记代码）：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort2</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//如果left不小于right ，需要排序的部分只有一个元素，方法返回</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"left:\"</span> + left + <span class=\"string\">\",right:\"</span> + right);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (left == <span class=\"number\">0</span> &amp;&amp; right == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"i=j=0\"</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"1.-------------------\"</span>);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (left &gt;= right) &#123;</span><br><span class=\"line\">           System.out.println(MessageFormat.format(<span class=\"string\">\"return: left,&#123;0&#125;  | right,&#123;1&#125;\"</span>, left, right));</span><br><span class=\"line\">           <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//设置最左边元素为基准点：pivot</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span> pivot = arr[left];</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"pivot:\"</span> + pivot);</span><br><span class=\"line\">       <span class=\"keyword\">int</span> i = left;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> j = right;</span><br><span class=\"line\">       <span class=\"comment\">//把要排序的序列中比p大的放到右边，比p小的放到左边，p的下标位置为i</span></span><br><span class=\"line\">       <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"2.-------start------------\"</span>);</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= pivot) &#123;</span><br><span class=\"line\">               j--;</span><br><span class=\"line\">               System.out.println(<span class=\"string\">\"2.  j:\"</span> + j);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"========[j-- over, i++ start ]==========\"</span>);</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[i] &lt;= pivot) &#123;</span><br><span class=\"line\">               i++;</span><br><span class=\"line\">               System.out.println(<span class=\"string\">\"2.  i:\"</span> + i);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           System.out.println(<span class=\"string\">\"2.-------end------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">               arr[i] = arr[j];</span><br><span class=\"line\">               arr[j] = temp;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"comment\">//交换基准点</span></span><br><span class=\"line\">       arr[left] = arr[i];</span><br><span class=\"line\">       arr[i] = pivot;</span><br><span class=\"line\">       <span class=\"comment\">//对序列中，i左边的元素实施快速排序</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"左边开始前， right为\"</span> + right + <span class=\"string\">\"值\"</span>);</span><br><span class=\"line\">       quickSort2(arr, left, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">       <span class=\"comment\">//对序列中，j右边边的元素实施快速排序</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"右块遍历开始...... \"</span>);</span><br><span class=\"line\">       quickSort2(arr, i + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"left =:\"</span> + (i + <span class=\"number\">1</span>) + <span class=\"string\">\",right = \"</span> + right);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"3.-------------------\"</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"4.---------all over----------\"</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">//大数据量测试</span></span><br><span class=\"line\">       <span class=\"keyword\">int</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">100000</span>];</span><br><span class=\"line\">       Random r = <span class=\"keyword\">new</span> Random();</span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">           arr[i] = r.nextInt(<span class=\"number\">10000000</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">long</span> start = System.currentTimeMillis();</span><br><span class=\"line\">       quickSort(nums);</span><br><span class=\"line\">       <span class=\"keyword\">long</span> time = System.currentTimeMillis() - start;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"-----------大数据量测试结果-----------\"</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"all time:\"</span> + time + <span class=\"string\">\"毫秒\"</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>参考地址：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484039&amp;idx=1&amp;sn=15aa43a3865daca394abae379c7a5383&amp;chksm=ebd74386dca0ca90e3c3067515de1c3b3da7e0ea44a26d8dd96e8d7424f4e10227d9edac9bcf#rd\" target=\"_blank\" rel=\"noopener\"></a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 24 2015 22:19:00 GMT+0800 (CST)","title":"快速排序（Quick Sort）","path":"2015/03/24/SortAlogrithms/quickSort/","eyeCatchImage":null,"excerpt":"<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>快速排序是冒泡排序的改进版，是最好的一种内排序，面试会经常被问到，是程序员必须掌握的。</p>\n<hr>\n<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>快速排一般基于递归实现：</p>\n<ol>\n<li>选定一个合适的值（理想情况中值最好。实现中一般使用数组第一个值），称为“枢轴”（pivot）。</li>\n<li>基于这个值，将数组分为两部分，较小的分在左边，较大的分在右边。</li>\n<li>一轮下来，这个枢轴的位置一定在最终位置上。</li>\n<li>对两个子数组分别重复上述过程，直到每个数组只有一个元素。</li>\n<li>排序完成。</li>\n</ol>","date":"2015-03-24T02:10:31.000Z","pv":0,"totalPV":0,"categories":"Algorithms","tags":["Algorithms","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"基数排序（Radix Sort）","copyright":true,"date":"2015-03-27T02:35:31.000Z","updated":"2015-03-27T12:17:23.000Z","mathjax":true,"_content":"\n### 基数排序\n基数排序(radix sort)属于\"分配式排序\"(distribution sort)，又称\"桶子法\"(bucket sort)或bin sort，将要排序的元素分配至某些\"桶\"中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为$O(n log(r)m)$，其中$r$为所采取的基数，而$m$为堆数，空间复杂度$O(N)$，在某些时候，基数排序法的效率高于其它的稳定性排序法。\n``基数排序是按照分配，回收（分配到不同的位置上，然后回收）...不断分配...回收来进行排序，直到有序...。``\n\n-------\n\n<!-- more -->\n\n#### 算法思路\nIt is a sorting algorithm that is used to sort numbers. We sort the numbers from least significant digit to the most significant digit.\n\n1. When we are sorting the numbers we will first find the number of digits in the biggest number.\n2. If there are N digits in the biggest number then we will need to perform N number of pass.\n3. We will pad the remaining numbers with leading zeros so they all have N digits.\n4. Then we will take 10 buckets labeled 0 to 9 and sort the numbers.\n5. After the sorting is complete we will remove the leading zeros.\n\n基数排序的要点就两个：\n> 1. 分配：按照元素的大小来放入不同的桶子里；\n> 2. 回收：将桶子里的元素按桶子顺序重新放到数组中；\n> 3. 重复…..两个步骤；\n*** 基数排序对有负数和0的数列难以进行排序 ***\n\n\n算法动态展示\n1. [YouTube视频源地址](https://www.youtube.com/watch?v=nu4gDuFabIM) ;\n2. [Radix Sort - step by step guide](https://www.youtube.com/watch?v=YXFI4osELGU);\n3. [开课老师视频源](https://www.youtube.com/watch?v=xhr26ia4k38); \n4. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180403-113850-HD.mp4\n\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n\n-------\n\n#### 代码实现方式\n```java\n   /**\n     * 基数排序\n     *\n     * @param arrs\n     */\n    public static void radixSort(int[] arrs) {\n        int max = findMax(arrs, 0, arrs.length - 1);\n        //需要遍历的次数由数组最大的位数来决定\n        for (int i = 1; max / i > 0; i = i * 10) {\n            int[][] buckets = new int[arrs.length][10];\n            //获取每一个数字（个、十、百、千位...分配到桶子里）\n            for (int j = 0; j < arrs.length; j++) {\n                int num = (arrs[j] / i) % 10;\n                //将其放入桶子里\n                buckets[j][num] = arrs[j];\n            }\n            //回收桶子里的元素\n            int k = 0;\n            //有10个桶子\n            for (int j = 0; j < 10; j++) {\n                //对每个桶子里的元素进行回收\n                for (int l = 0; l < arrs.length; l++) {\n                    //如果桶子里有元素就回收(数据会初始化为0)\n                    if (buckets[l][j] != 0) {\n                        arrs[k++] = buckets[l][j];\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 递归找出数组最大值\n     *\n     * @param arrs  数组\n     * @param left  左边界，第一个数\n     * @param right 右边界，数组长度\n     * @return\n     */\n    public static int findMax(int[] arrs, int left, int right) {\n        //若该数组只有一个数，那么最大的就是该数组第一个值\n        if (left == right) {\n            return arrs[left];\n        } else {\n\n            int leftValue = arrs[left];\n            //找出所有元素中的最大值\n            int rightvalue = findMax(arrs, left + 1, right);\n\n            if (leftValue > rightvalue) {\n                return leftValue;\n            } else {\n                return rightvalue;\n            }\n        }\n    }\n```\n\n-------\n\n参考地址：[基数排序](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484071&idx=2&sn=5195363e7a5c5e3e7cac2a733c2695e9&chksm=ebd743a6dca0cab0b79aec38ff835116af9079114c9266ef673c6c1009b32b2abf262bf35e0c&scene=21#wechat_redirect)\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n","source":"_posts/SortAlogrithms/radixSort.md","raw":"---\ntitle: 基数排序（Radix Sort）\ntags: [Algorithms, Sort]\ncopyright: true\ndate: 2015-03-27 10:35:31\nupdated: 2015-03-27 20:17:23\ncategories: Algorithms \nmathjax: true\n---\n\n### 基数排序\n基数排序(radix sort)属于\"分配式排序\"(distribution sort)，又称\"桶子法\"(bucket sort)或bin sort，将要排序的元素分配至某些\"桶\"中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为$O(n log(r)m)$，其中$r$为所采取的基数，而$m$为堆数，空间复杂度$O(N)$，在某些时候，基数排序法的效率高于其它的稳定性排序法。\n``基数排序是按照分配，回收（分配到不同的位置上，然后回收）...不断分配...回收来进行排序，直到有序...。``\n\n-------\n\n<!-- more -->\n\n#### 算法思路\nIt is a sorting algorithm that is used to sort numbers. We sort the numbers from least significant digit to the most significant digit.\n\n1. When we are sorting the numbers we will first find the number of digits in the biggest number.\n2. If there are N digits in the biggest number then we will need to perform N number of pass.\n3. We will pad the remaining numbers with leading zeros so they all have N digits.\n4. Then we will take 10 buckets labeled 0 to 9 and sort the numbers.\n5. After the sorting is complete we will remove the leading zeros.\n\n基数排序的要点就两个：\n> 1. 分配：按照元素的大小来放入不同的桶子里；\n> 2. 回收：将桶子里的元素按桶子顺序重新放到数组中；\n> 3. 重复…..两个步骤；\n*** 基数排序对有负数和0的数列难以进行排序 ***\n\n\n算法动态展示\n1. [YouTube视频源地址](https://www.youtube.com/watch?v=nu4gDuFabIM) ;\n2. [Radix Sort - step by step guide](https://www.youtube.com/watch?v=YXFI4osELGU);\n3. [开课老师视频源](https://www.youtube.com/watch?v=xhr26ia4k38); \n4. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180403-113850-HD.mp4\n\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n\n-------\n\n#### 代码实现方式\n```java\n   /**\n     * 基数排序\n     *\n     * @param arrs\n     */\n    public static void radixSort(int[] arrs) {\n        int max = findMax(arrs, 0, arrs.length - 1);\n        //需要遍历的次数由数组最大的位数来决定\n        for (int i = 1; max / i > 0; i = i * 10) {\n            int[][] buckets = new int[arrs.length][10];\n            //获取每一个数字（个、十、百、千位...分配到桶子里）\n            for (int j = 0; j < arrs.length; j++) {\n                int num = (arrs[j] / i) % 10;\n                //将其放入桶子里\n                buckets[j][num] = arrs[j];\n            }\n            //回收桶子里的元素\n            int k = 0;\n            //有10个桶子\n            for (int j = 0; j < 10; j++) {\n                //对每个桶子里的元素进行回收\n                for (int l = 0; l < arrs.length; l++) {\n                    //如果桶子里有元素就回收(数据会初始化为0)\n                    if (buckets[l][j] != 0) {\n                        arrs[k++] = buckets[l][j];\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * 递归找出数组最大值\n     *\n     * @param arrs  数组\n     * @param left  左边界，第一个数\n     * @param right 右边界，数组长度\n     * @return\n     */\n    public static int findMax(int[] arrs, int left, int right) {\n        //若该数组只有一个数，那么最大的就是该数组第一个值\n        if (left == right) {\n            return arrs[left];\n        } else {\n\n            int leftValue = arrs[left];\n            //找出所有元素中的最大值\n            int rightvalue = findMax(arrs, left + 1, right);\n\n            if (leftValue > rightvalue) {\n                return leftValue;\n            } else {\n                return rightvalue;\n            }\n        }\n    }\n```\n\n-------\n\n参考地址：[基数排序](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484071&idx=2&sn=5195363e7a5c5e3e7cac2a733c2695e9&chksm=ebd743a6dca0cab0b79aec38ff835116af9079114c9266ef673c6c1009b32b2abf262bf35e0c&scene=21#wechat_redirect)\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n","slug":"SortAlogrithms/radixSort","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbnm00369l8iq397inx4","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><p>基数排序(radix sort)属于”分配式排序”(distribution sort)，又称”桶子法”(bucket sort)或bin sort，将要排序的元素分配至某些”桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为$O(n log(r)m)$，其中$r$为所采取的基数，而$m$为堆数，空间复杂度$O(N)$，在某些时候，基数排序法的效率高于其它的稳定性排序法。<br><code>基数排序是按照分配，回收（分配到不同的位置上，然后回收）...不断分配...回收来进行排序，直到有序...。</code></p>\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>It is a sorting algorithm that is used to sort numbers. We sort the numbers from least significant digit to the most significant digit.</p>\n<ol>\n<li>When we are sorting the numbers we will first find the number of digits in the biggest number.</li>\n<li>If there are N digits in the biggest number then we will need to perform N number of pass.</li>\n<li>We will pad the remaining numbers with leading zeros so they all have N digits.</li>\n<li>Then we will take 10 buckets labeled 0 to 9 and sort the numbers.</li>\n<li>After the sorting is complete we will remove the leading zeros.</li>\n</ol>\n<p>基数排序的要点就两个：</p>\n<blockquote>\n<ol>\n<li>分配：按照元素的大小来放入不同的桶子里；</li>\n<li>回收：将桶子里的元素按桶子顺序重新放到数组中；</li>\n<li>重复…..两个步骤；<br><strong><em> 基数排序对有负数和0的数列难以进行排序 </em></strong></li>\n</ol>\n</blockquote>\n<p>算法动态展示</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=nu4gDuFabIM\" target=\"_blank\" rel=\"noopener\">YouTube视频源地址</a> ;</li>\n<li><a href=\"https://www.youtube.com/watch?v=YXFI4osELGU\" target=\"_blank\" rel=\"noopener\">Radix Sort - step by step guide</a>;</li>\n<li><a href=\"https://www.youtube.com/watch?v=xhr26ia4k38\" target=\"_blank\" rel=\"noopener\">开课老师视频源</a>; </li>\n<li><div id=\"dplayer5\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer5\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180403-113850-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n</li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式\"><a href=\"#代码实现方式\" class=\"headerlink\" title=\"代码实现方式\"></a>代码实现方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 基数排序</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">radixSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> max = findMax(arrs, <span class=\"number\">0</span>, arrs.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">     <span class=\"comment\">//需要遍历的次数由数组最大的位数来决定</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; max / i &gt; <span class=\"number\">0</span>; i = i * <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span>[][] buckets = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arrs.length][<span class=\"number\">10</span>];</span><br><span class=\"line\">         <span class=\"comment\">//获取每一个数字（个、十、百、千位...分配到桶子里）</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arrs.length; j++) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">int</span> num = (arrs[j] / i) % <span class=\"number\">10</span>;</span><br><span class=\"line\">             <span class=\"comment\">//将其放入桶子里</span></span><br><span class=\"line\">             buckets[j][num] = arrs[j];</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">//回收桶子里的元素</span></span><br><span class=\"line\">         <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">         <span class=\"comment\">//有10个桶子</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">             <span class=\"comment\">//对每个桶子里的元素进行回收</span></span><br><span class=\"line\">             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; arrs.length; l++) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//如果桶子里有元素就回收(数据会初始化为0)</span></span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (buckets[l][j] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                     arrs[k++] = buckets[l][j];</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 递归找出数组最大值</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> arrs  数组</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> left  左边界，第一个数</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> right 右边界，数组长度</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findMax</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//若该数组只有一个数，那么最大的就是该数组第一个值</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (left == right) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> arrs[left];</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">int</span> leftValue = arrs[left];</span><br><span class=\"line\">         <span class=\"comment\">//找出所有元素中的最大值</span></span><br><span class=\"line\">         <span class=\"keyword\">int</span> rightvalue = findMax(arrs, left + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (leftValue &gt; rightvalue) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> leftValue;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> rightvalue;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考地址：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484071&amp;idx=2&amp;sn=5195363e7a5c5e3e7cac2a733c2695e9&amp;chksm=ebd743a6dca0cab0b79aec38ff835116af9079114c9266ef673c6c1009b32b2abf262bf35e0c&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">基数排序</a><br>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><p>基数排序(radix sort)属于”分配式排序”(distribution sort)，又称”桶子法”(bucket sort)或bin sort，将要排序的元素分配至某些”桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为$O(n log(r)m)$，其中$r$为所采取的基数，而$m$为堆数，空间复杂度$O(N)$，在某些时候，基数排序法的效率高于其它的稳定性排序法。<br><code>基数排序是按照分配，回收（分配到不同的位置上，然后回收）...不断分配...回收来进行排序，直到有序...。</code></p>\n<hr>","more":"<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>It is a sorting algorithm that is used to sort numbers. We sort the numbers from least significant digit to the most significant digit.</p>\n<ol>\n<li>When we are sorting the numbers we will first find the number of digits in the biggest number.</li>\n<li>If there are N digits in the biggest number then we will need to perform N number of pass.</li>\n<li>We will pad the remaining numbers with leading zeros so they all have N digits.</li>\n<li>Then we will take 10 buckets labeled 0 to 9 and sort the numbers.</li>\n<li>After the sorting is complete we will remove the leading zeros.</li>\n</ol>\n<p>基数排序的要点就两个：</p>\n<blockquote>\n<ol>\n<li>分配：按照元素的大小来放入不同的桶子里；</li>\n<li>回收：将桶子里的元素按桶子顺序重新放到数组中；</li>\n<li>重复…..两个步骤；<br><strong><em> 基数排序对有负数和0的数列难以进行排序 </em></strong></li>\n</ol>\n</blockquote>\n<p>算法动态展示</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=nu4gDuFabIM\" target=\"_blank\" rel=\"noopener\">YouTube视频源地址</a> ;</li>\n<li><a href=\"https://www.youtube.com/watch?v=YXFI4osELGU\" target=\"_blank\" rel=\"noopener\">Radix Sort - step by step guide</a>;</li>\n<li><a href=\"https://www.youtube.com/watch?v=xhr26ia4k38\" target=\"_blank\" rel=\"noopener\">开课老师视频源</a>; </li>\n<li><div id=\"dplayer5\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer5\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180403-113850-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n</li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式\"><a href=\"#代码实现方式\" class=\"headerlink\" title=\"代码实现方式\"></a>代码实现方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 基数排序</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">radixSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> max = findMax(arrs, <span class=\"number\">0</span>, arrs.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">     <span class=\"comment\">//需要遍历的次数由数组最大的位数来决定</span></span><br><span class=\"line\">     <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; max / i &gt; <span class=\"number\">0</span>; i = i * <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span>[][] buckets = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[arrs.length][<span class=\"number\">10</span>];</span><br><span class=\"line\">         <span class=\"comment\">//获取每一个数字（个、十、百、千位...分配到桶子里）</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arrs.length; j++) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">int</span> num = (arrs[j] / i) % <span class=\"number\">10</span>;</span><br><span class=\"line\">             <span class=\"comment\">//将其放入桶子里</span></span><br><span class=\"line\">             buckets[j][num] = arrs[j];</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">//回收桶子里的元素</span></span><br><span class=\"line\">         <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">         <span class=\"comment\">//有10个桶子</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">             <span class=\"comment\">//对每个桶子里的元素进行回收</span></span><br><span class=\"line\">             <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>; l &lt; arrs.length; l++) &#123;</span><br><span class=\"line\">                 <span class=\"comment\">//如果桶子里有元素就回收(数据会初始化为0)</span></span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (buckets[l][j] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                     arrs[k++] = buckets[l][j];</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * 递归找出数组最大值</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> arrs  数组</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> left  左边界，第一个数</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@param</span> right 右边界，数组长度</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">findMax</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//若该数组只有一个数，那么最大的就是该数组第一个值</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (left == right) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> arrs[left];</span><br><span class=\"line\">     &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">int</span> leftValue = arrs[left];</span><br><span class=\"line\">         <span class=\"comment\">//找出所有元素中的最大值</span></span><br><span class=\"line\">         <span class=\"keyword\">int</span> rightvalue = findMax(arrs, left + <span class=\"number\">1</span>, right);</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"keyword\">if</span> (leftValue &gt; rightvalue) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> leftValue;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span> rightvalue;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考地址：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484071&amp;idx=2&amp;sn=5195363e7a5c5e3e7cac2a733c2695e9&amp;chksm=ebd743a6dca0cab0b79aec38ff835116af9079114c9266ef673c6c1009b32b2abf262bf35e0c&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">基数排序</a><br>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Mar 27 2015 20:17:23 GMT+0800 (CST)","title":"基数排序（Radix Sort）","path":"2015/03/27/SortAlogrithms/radixSort/","eyeCatchImage":null,"excerpt":"<h3 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h3><p>基数排序(radix sort)属于”分配式排序”(distribution sort)，又称”桶子法”(bucket sort)或bin sort，将要排序的元素分配至某些”桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为$O(n log(r)m)$，其中$r$为所采取的基数，而$m$为堆数，空间复杂度$O(N)$，在某些时候，基数排序法的效率高于其它的稳定性排序法。<br><code>基数排序是按照分配，回收（分配到不同的位置上，然后回收）...不断分配...回收来进行排序，直到有序...。</code></p>\n<hr>","date":"2015-03-27T02:35:31.000Z","pv":0,"totalPV":0,"categories":"Algorithms","tags":["Algorithms","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"希尔排序（Shell Sort）","copyright":true,"date":"2015-03-25T01:15:31.000Z","updated":"2015-03-25T12:17:23.000Z","mathjax":true,"_content":"\n### 希尔排序\n希尔排序也称为递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是基于插入排序的一下两点性质而提出改进方法的：\n* 插入排序在对几乎已经安排好序的数据操作时，效率高，即可达到线性排序的效率\n* 插入排序一般来说是抵消的，因为插入排序每次只能将数据移动一位\n从专业的角度上讲，将一个序列分成好几个序列，用一个数来表示：那个数称为增量。显然的是，增量是不断递减的(直到增量为$1$)\n\n希尔排序的平均复杂度是$O(N*logN)~O(N^2)$，最好的情况$O(N^1.3)$，最坏的情况$O(N^2)$；空间复杂度$O(1)$;不稳定算法\n\n-------\n<!-- more -->\n#### 算法思路\nIn this sorting algorithm we compare elements that are distant apart rather than adjacent. Shell sort is like insertion sort.\n1. We start by comparing elements that are at a certain distance apart.So if there are **N** elements then we start with a value **gap < N**\n2. In each pass we keep reducing the value of gap till we reach the last pass when gap is 1\n3. **Note!**, when gap = 1,shell sort is like insertion sort and we will have sorted elements at the end of this pass;\n\n算法动态展示\n 1. [YouTube视频源地址](https://www.youtube.com/watch?v=SHcPqUe2GZM) ;\n 2. [Shell Sort - step by step guide](https://www.youtube.com/watch?v=SCBf7aqKQEY&t=36s);\n 3. [开课老师视频源](https://www.youtube.com/watch?v=ddeLSDsYVp8);\n 4. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180328-201843-HD.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n\n\n-------\n\n#### 代码实现方式\n```java\n/**\n     * 希尔排序\n     *\n     * @param arrs\n     */\n    public static void shellSort(int[] arrs) {\n        if (arrs == null || arrs.length == 0) {\n            return;\n        }\n        //增量 每次都 gap/2   gap为每次外循环的步长\n        //当 步长为 1 即增量为1 时， 希尔排序蜕化为 简单插入排序\n        int counterFrequency = 0;\n        for (int gap = (int) Math.floor(arrs.length / 2); gap > 0; gap /= 2) {\n            counterFrequency++;\n            System.out.println(\"------------------1.Outerloop  start---------------------\");\n            System.out.println(MessageFormat.format(\"--------1.Increment:{0}, outerloop frequency:{1}---------\", gap, counterFrequency));\n\n            for (int i = gap; i < arrs.length; i++) {\n                int j = i;\n                int temp = arrs[j];\n\n                // j - step 就是代表与它同组隔壁的元素 内层增量 gap通过 j-gap确定左边\n                int counterSwapJGap = 0;\n                while (j - gap >= 0 && arrs[j - gap] > temp) {\n                    arrs[j] = arrs[j - gap];\n                    j = j - gap;\n                    counterSwapJGap++;\n                    printArr(\"--------------1. arrs:{0}---------------\",arrs);\n                }\n                printArr(\"--------------2. arrs:{0}---------------\",arrs);\n                System.out.println(MessageFormat.format(\"------------------3.Whileloop counter:{0}---------------------\", counterSwapJGap));\n                arrs[j] = temp;\n                System.out.println(MessageFormat.format(\"--------2.Innerloop: i:{0}, j:{1} , temp:{2} ---------\", i, j, temp));\n            }\n            System.out.println(\"------------------1.Outerloop  over---------------------\");\n\n        }\n    }\n    //对比简单插入排序\n\n    /**\n     * 简单插入排序\n     *\n     * @param arrs\n     */\n    public static void insertSortDemo(int arrs[]) {\n        int len = arrs.length;\n        for (int i = 1; i < len; i++) {\n            for (int j = i; j < len - 1; j--) {\n                if (arrs[j] < arrs[j - 1]) {\n                    int temp = arrs[j];\n                    arrs[j] = arrs[j - 1];\n                    arrs[j - 1] = temp;\n                }\n            }\n        }\n\n    }\n    \n    /\n    \n    \n    /**\n     * 打印数组\n     *\n     * @param str\n     * @param arrs\n     */\n    private static void printArr(String str, int[] arrs) {\n        String result = \"\";\n        StringBuilder sb = new StringBuilder();\n        if (str != null) {\n            sb.append(\"[\");\n            for (int i = 0; i < arrs.length; i++) {\n                sb.append(\",\" + arrs[i]);\n            }\n            sb.append(\"]\");\n            result = sb.toString().replaceFirst(\",\", \"\");\n            result = MessageFormat.format(str, result);\n        } else {\n            sb.append(\"[\");\n            for (int i = 0; i < arrs.length; i++) {\n                sb.append(\",\" + arrs[i]);\n            }\n            sb.append(\"]\");\n            result = sb.toString().replaceFirst(\",\", \"\");\n        }\n        System.out.println(\"result:\" + result);\n    }\n    \n```\n\n-------\n\n参考地址：[希尔排序](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484071&idx=1&sn=c372ab46daf1ccdf27398951172c4443&chksm=ebd743a6dca0cab03a55772a6f64be89f9dee504a9e00f96b36e685698722ade9855d8bd3c21#rd)\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n\n","source":"_posts/SortAlogrithms/shellSort.md","raw":"---\ntitle: 希尔排序（Shell Sort）\ntags: [Algorithms, Sort]\ncopyright: true\ndate: 2015-03-25 09:15:31\nupdated: 2015-03-25 20:17:23\ncategories: Algorithms\nmathjax: true\n---\n\n### 希尔排序\n希尔排序也称为递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是基于插入排序的一下两点性质而提出改进方法的：\n* 插入排序在对几乎已经安排好序的数据操作时，效率高，即可达到线性排序的效率\n* 插入排序一般来说是抵消的，因为插入排序每次只能将数据移动一位\n从专业的角度上讲，将一个序列分成好几个序列，用一个数来表示：那个数称为增量。显然的是，增量是不断递减的(直到增量为$1$)\n\n希尔排序的平均复杂度是$O(N*logN)~O(N^2)$，最好的情况$O(N^1.3)$，最坏的情况$O(N^2)$；空间复杂度$O(1)$;不稳定算法\n\n-------\n<!-- more -->\n#### 算法思路\nIn this sorting algorithm we compare elements that are distant apart rather than adjacent. Shell sort is like insertion sort.\n1. We start by comparing elements that are at a certain distance apart.So if there are **N** elements then we start with a value **gap < N**\n2. In each pass we keep reducing the value of gap till we reach the last pass when gap is 1\n3. **Note!**, when gap = 1,shell sort is like insertion sort and we will have sorted elements at the end of this pass;\n\n算法动态展示\n 1. [YouTube视频源地址](https://www.youtube.com/watch?v=SHcPqUe2GZM) ;\n 2. [Shell Sort - step by step guide](https://www.youtube.com/watch?v=SCBf7aqKQEY&t=36s);\n 3. [开课老师视频源](https://www.youtube.com/watch?v=ddeLSDsYVp8);\n 4. {% dplayer \"url=http://p5vswdxl9.bkt.clouddn.com/QQ20180328-201843-HD.mp4\"   \"loop=yes\" \"theme=#FADFA3\" \"autoplay=false\" \"token=quickDemo1\" %}\n\n\n-------\n\n#### 代码实现方式\n```java\n/**\n     * 希尔排序\n     *\n     * @param arrs\n     */\n    public static void shellSort(int[] arrs) {\n        if (arrs == null || arrs.length == 0) {\n            return;\n        }\n        //增量 每次都 gap/2   gap为每次外循环的步长\n        //当 步长为 1 即增量为1 时， 希尔排序蜕化为 简单插入排序\n        int counterFrequency = 0;\n        for (int gap = (int) Math.floor(arrs.length / 2); gap > 0; gap /= 2) {\n            counterFrequency++;\n            System.out.println(\"------------------1.Outerloop  start---------------------\");\n            System.out.println(MessageFormat.format(\"--------1.Increment:{0}, outerloop frequency:{1}---------\", gap, counterFrequency));\n\n            for (int i = gap; i < arrs.length; i++) {\n                int j = i;\n                int temp = arrs[j];\n\n                // j - step 就是代表与它同组隔壁的元素 内层增量 gap通过 j-gap确定左边\n                int counterSwapJGap = 0;\n                while (j - gap >= 0 && arrs[j - gap] > temp) {\n                    arrs[j] = arrs[j - gap];\n                    j = j - gap;\n                    counterSwapJGap++;\n                    printArr(\"--------------1. arrs:{0}---------------\",arrs);\n                }\n                printArr(\"--------------2. arrs:{0}---------------\",arrs);\n                System.out.println(MessageFormat.format(\"------------------3.Whileloop counter:{0}---------------------\", counterSwapJGap));\n                arrs[j] = temp;\n                System.out.println(MessageFormat.format(\"--------2.Innerloop: i:{0}, j:{1} , temp:{2} ---------\", i, j, temp));\n            }\n            System.out.println(\"------------------1.Outerloop  over---------------------\");\n\n        }\n    }\n    //对比简单插入排序\n\n    /**\n     * 简单插入排序\n     *\n     * @param arrs\n     */\n    public static void insertSortDemo(int arrs[]) {\n        int len = arrs.length;\n        for (int i = 1; i < len; i++) {\n            for (int j = i; j < len - 1; j--) {\n                if (arrs[j] < arrs[j - 1]) {\n                    int temp = arrs[j];\n                    arrs[j] = arrs[j - 1];\n                    arrs[j - 1] = temp;\n                }\n            }\n        }\n\n    }\n    \n    /\n    \n    \n    /**\n     * 打印数组\n     *\n     * @param str\n     * @param arrs\n     */\n    private static void printArr(String str, int[] arrs) {\n        String result = \"\";\n        StringBuilder sb = new StringBuilder();\n        if (str != null) {\n            sb.append(\"[\");\n            for (int i = 0; i < arrs.length; i++) {\n                sb.append(\",\" + arrs[i]);\n            }\n            sb.append(\"]\");\n            result = sb.toString().replaceFirst(\",\", \"\");\n            result = MessageFormat.format(str, result);\n        } else {\n            sb.append(\"[\");\n            for (int i = 0; i < arrs.length; i++) {\n                sb.append(\",\" + arrs[i]);\n            }\n            sb.append(\"]\");\n            result = sb.toString().replaceFirst(\",\", \"\");\n        }\n        System.out.println(\"result:\" + result);\n    }\n    \n```\n\n-------\n\n参考地址：[希尔排序](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484071&idx=1&sn=c372ab46daf1ccdf27398951172c4443&chksm=ebd743a6dca0cab03a55772a6f64be89f9dee504a9e00f96b36e685698722ade9855d8bd3c21#rd)\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n\n","slug":"SortAlogrithms/shellSort","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbnn00389l8i3sp06j8s","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><p>希尔排序也称为递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是基于插入排序的一下两点性质而提出改进方法的：</p>\n<ul>\n<li>插入排序在对几乎已经安排好序的数据操作时，效率高，即可达到线性排序的效率</li>\n<li>插入排序一般来说是抵消的，因为插入排序每次只能将数据移动一位<br>从专业的角度上讲，将一个序列分成好几个序列，用一个数来表示：那个数称为增量。显然的是，增量是不断递减的(直到增量为$1$)</li>\n</ul>\n<p>希尔排序的平均复杂度是$O(N*logN)~O(N^2)$，最好的情况$O(N^1.3)$，最坏的情况$O(N^2)$；空间复杂度$O(1)$;不稳定算法</p>\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>In this sorting algorithm we compare elements that are distant apart rather than adjacent. Shell sort is like insertion sort.</p>\n<ol>\n<li>We start by comparing elements that are at a certain distance apart.So if there are <strong>N</strong> elements then we start with a value <strong>gap &lt; N</strong></li>\n<li>In each pass we keep reducing the value of gap till we reach the last pass when gap is 1</li>\n<li><strong>Note!</strong>, when gap = 1,shell sort is like insertion sort and we will have sorted elements at the end of this pass;</li>\n</ol>\n<p>算法动态展示</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=SHcPqUe2GZM\" target=\"_blank\" rel=\"noopener\">YouTube视频源地址</a> ;</li>\n<li><a href=\"https://www.youtube.com/watch?v=SCBf7aqKQEY&amp;t=36s\" target=\"_blank\" rel=\"noopener\">Shell Sort - step by step guide</a>;</li>\n<li><a href=\"https://www.youtube.com/watch?v=ddeLSDsYVp8\" target=\"_blank\" rel=\"noopener\">开课老师视频源</a>;</li>\n<li><div id=\"dplayer6\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer6\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180328-201843-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n</li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式\"><a href=\"#代码实现方式\" class=\"headerlink\" title=\"代码实现方式\"></a>代码实现方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 希尔排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arrs == <span class=\"keyword\">null</span> || arrs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//增量 每次都 gap/2   gap为每次外循环的步长</span></span><br><span class=\"line\">        <span class=\"comment\">//当 步长为 1 即增量为1 时， 希尔排序蜕化为 简单插入排序</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> counterFrequency = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> gap = (<span class=\"keyword\">int</span>) Math.floor(arrs.length / <span class=\"number\">2</span>); gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            counterFrequency++;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"------------------1.Outerloop  start---------------------\"</span>);</span><br><span class=\"line\">            System.out.println(MessageFormat.format(<span class=\"string\">\"--------1.Increment:&#123;0&#125;, outerloop frequency:&#123;1&#125;---------\"</span>, gap, counterFrequency));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = gap; i &lt; arrs.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arrs[j];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// j - step 就是代表与它同组隔壁的元素 内层增量 gap通过 j-gap确定左边</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> counterSwapJGap = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (j - gap &gt;= <span class=\"number\">0</span> &amp;&amp; arrs[j - gap] &gt; temp) &#123;</span><br><span class=\"line\">                    arrs[j] = arrs[j - gap];</span><br><span class=\"line\">                    j = j - gap;</span><br><span class=\"line\">                    counterSwapJGap++;</span><br><span class=\"line\">                    printArr(<span class=\"string\">\"--------------1. arrs:&#123;0&#125;---------------\"</span>,arrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                printArr(<span class=\"string\">\"--------------2. arrs:&#123;0&#125;---------------\"</span>,arrs);</span><br><span class=\"line\">                System.out.println(MessageFormat.format(<span class=\"string\">\"------------------3.Whileloop counter:&#123;0&#125;---------------------\"</span>, counterSwapJGap));</span><br><span class=\"line\">                arrs[j] = temp;</span><br><span class=\"line\">                System.out.println(MessageFormat.format(<span class=\"string\">\"--------2.Innerloop: i:&#123;0&#125;, j:&#123;1&#125; , temp:&#123;2&#125; ---------\"</span>, i, j, temp));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"------------------1.Outerloop  over---------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//对比简单插入排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 简单插入排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSortDemo</span><span class=\"params\">(<span class=\"keyword\">int</span> arrs[])</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = arrs.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; len - <span class=\"number\">1</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arrs[j] &lt; arrs[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> temp = arrs[j];</span><br><span class=\"line\">                    arrs[j] = arrs[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arrs[j - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 打印数组</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(String str, <span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">        String result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrs.length; i++) &#123;</span><br><span class=\"line\">                sb.append(<span class=\"string\">\",\"</span> + arrs[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">            result = sb.toString().replaceFirst(<span class=\"string\">\",\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            result = MessageFormat.format(str, result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrs.length; i++) &#123;</span><br><span class=\"line\">                sb.append(<span class=\"string\">\",\"</span> + arrs[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">            result = sb.toString().replaceFirst(<span class=\"string\">\",\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"result:\"</span> + result);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考地址：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484071&amp;idx=1&amp;sn=c372ab46daf1ccdf27398951172c4443&amp;chksm=ebd743a6dca0cab03a55772a6f64be89f9dee504a9e00f96b36e685698722ade9855d8bd3c21#rd\" target=\"_blank\" rel=\"noopener\">希尔排序</a><br>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><p>希尔排序也称为递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是基于插入排序的一下两点性质而提出改进方法的：</p>\n<ul>\n<li>插入排序在对几乎已经安排好序的数据操作时，效率高，即可达到线性排序的效率</li>\n<li>插入排序一般来说是抵消的，因为插入排序每次只能将数据移动一位<br>从专业的角度上讲，将一个序列分成好几个序列，用一个数来表示：那个数称为增量。显然的是，增量是不断递减的(直到增量为$1$)</li>\n</ul>\n<p>希尔排序的平均复杂度是$O(N*logN)~O(N^2)$，最好的情况$O(N^1.3)$，最坏的情况$O(N^2)$；空间复杂度$O(1)$;不稳定算法</p>\n<hr>","more":"<h4 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h4><p>In this sorting algorithm we compare elements that are distant apart rather than adjacent. Shell sort is like insertion sort.</p>\n<ol>\n<li>We start by comparing elements that are at a certain distance apart.So if there are <strong>N</strong> elements then we start with a value <strong>gap &lt; N</strong></li>\n<li>In each pass we keep reducing the value of gap till we reach the last pass when gap is 1</li>\n<li><strong>Note!</strong>, when gap = 1,shell sort is like insertion sort and we will have sorted elements at the end of this pass;</li>\n</ol>\n<p>算法动态展示</p>\n<ol>\n<li><a href=\"https://www.youtube.com/watch?v=SHcPqUe2GZM\" target=\"_blank\" rel=\"noopener\">YouTube视频源地址</a> ;</li>\n<li><a href=\"https://www.youtube.com/watch?v=SCBf7aqKQEY&amp;t=36s\" target=\"_blank\" rel=\"noopener\">Shell Sort - step by step guide</a>;</li>\n<li><a href=\"https://www.youtube.com/watch?v=ddeLSDsYVp8\" target=\"_blank\" rel=\"noopener\">开课老师视频源</a>;</li>\n<li><div id=\"dplayer6\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer6\"),\"theme\":\"#FADFA3\",\"loop\":true,\"video\":{\"url\":\"http://p5vswdxl9.bkt.clouddn.com/QQ20180328-201843-HD.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>\n</li>\n</ol>\n<hr>\n<h4 id=\"代码实现方式\"><a href=\"#代码实现方式\" class=\"headerlink\" title=\"代码实现方式\"></a>代码实现方式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 希尔排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arrs == <span class=\"keyword\">null</span> || arrs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//增量 每次都 gap/2   gap为每次外循环的步长</span></span><br><span class=\"line\">        <span class=\"comment\">//当 步长为 1 即增量为1 时， 希尔排序蜕化为 简单插入排序</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> counterFrequency = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> gap = (<span class=\"keyword\">int</span>) Math.floor(arrs.length / <span class=\"number\">2</span>); gap &gt; <span class=\"number\">0</span>; gap /= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            counterFrequency++;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"------------------1.Outerloop  start---------------------\"</span>);</span><br><span class=\"line\">            System.out.println(MessageFormat.format(<span class=\"string\">\"--------1.Increment:&#123;0&#125;, outerloop frequency:&#123;1&#125;---------\"</span>, gap, counterFrequency));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = gap; i &lt; arrs.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> temp = arrs[j];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// j - step 就是代表与它同组隔壁的元素 内层增量 gap通过 j-gap确定左边</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> counterSwapJGap = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (j - gap &gt;= <span class=\"number\">0</span> &amp;&amp; arrs[j - gap] &gt; temp) &#123;</span><br><span class=\"line\">                    arrs[j] = arrs[j - gap];</span><br><span class=\"line\">                    j = j - gap;</span><br><span class=\"line\">                    counterSwapJGap++;</span><br><span class=\"line\">                    printArr(<span class=\"string\">\"--------------1. arrs:&#123;0&#125;---------------\"</span>,arrs);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                printArr(<span class=\"string\">\"--------------2. arrs:&#123;0&#125;---------------\"</span>,arrs);</span><br><span class=\"line\">                System.out.println(MessageFormat.format(<span class=\"string\">\"------------------3.Whileloop counter:&#123;0&#125;---------------------\"</span>, counterSwapJGap));</span><br><span class=\"line\">                arrs[j] = temp;</span><br><span class=\"line\">                System.out.println(MessageFormat.format(<span class=\"string\">\"--------2.Innerloop: i:&#123;0&#125;, j:&#123;1&#125; , temp:&#123;2&#125; ---------\"</span>, i, j, temp));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"------------------1.Outerloop  over---------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//对比简单插入排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 简单插入排序</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSortDemo</span><span class=\"params\">(<span class=\"keyword\">int</span> arrs[])</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = arrs.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i; j &lt; len - <span class=\"number\">1</span>; j--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arrs[j] &lt; arrs[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> temp = arrs[j];</span><br><span class=\"line\">                    arrs[j] = arrs[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arrs[j - <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 打印数组</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> str</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> arrs</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArr</span><span class=\"params\">(String str, <span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">        String result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrs.length; i++) &#123;</span><br><span class=\"line\">                sb.append(<span class=\"string\">\",\"</span> + arrs[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">            result = sb.toString().replaceFirst(<span class=\"string\">\",\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            result = MessageFormat.format(str, result);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrs.length; i++) &#123;</span><br><span class=\"line\">                sb.append(<span class=\"string\">\",\"</span> + arrs[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">            result = sb.toString().replaceFirst(<span class=\"string\">\",\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"result:\"</span> + result);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>参考地址：<a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484071&amp;idx=1&amp;sn=c372ab46daf1ccdf27398951172c4443&amp;chksm=ebd743a6dca0cab03a55772a6f64be89f9dee504a9e00f96b36e685698722ade9855d8bd3c21#rd\" target=\"_blank\" rel=\"noopener\">希尔排序</a><br>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 25 2015 20:17:23 GMT+0800 (CST)","title":"希尔排序（Shell Sort）","path":"2015/03/25/SortAlogrithms/shellSort/","eyeCatchImage":null,"excerpt":"<h3 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h3><p>希尔排序也称为递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是基于插入排序的一下两点性质而提出改进方法的：</p>\n<ul>\n<li>插入排序在对几乎已经安排好序的数据操作时，效率高，即可达到线性排序的效率</li>\n<li>插入排序一般来说是抵消的，因为插入排序每次只能将数据移动一位<br>从专业的角度上讲，将一个序列分成好几个序列，用一个数来表示：那个数称为增量。显然的是，增量是不断递减的(直到增量为$1$)</li>\n</ul>\n<p>希尔排序的平均复杂度是$O(N*logN)~O(N^2)$，最好的情况$O(N^1.3)$，最坏的情况$O(N^2)$；空间复杂度$O(1)$;不稳定算法</p>\n<hr>","date":"2015-03-25T01:15:31.000Z","pv":0,"totalPV":0,"categories":"Algorithms","tags":["Algorithms","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"排序算法","copyright":true,"date":"2015-03-13T13:02:31.000Z","updated":"2015-03-14T12:29:00.000Z","_content":"## 排序算法分类\n##### &emsp;&emsp;&emsp;排序算法从排序的效率上分类，主要分四类：\n>   1. `简单排序`：***冒泡排序 ***、***(直接)选择排序 ***、***(直接)插入排序 ***；\n>   2. `高效排序`：***快速排序 ***、***堆排序 ***、***希尔排序 ***；\n>   3. `分治递归思想实现的排序`：***递归排序 ***；\n>   4. `线性排序`：***计数排序 ***、***桶排序 ***、***基数排序 ***；\n##### &emsp;&emsp;&emsp;排序算法从排序的方式分类，主要分为五类：\n>   1. `插入排序`：***直接插入排序 ***、***希尔排序 ***；\n>   2. `选择排序`：***直接选择排序 ***、***堆排序 ***；\n>   3. `交换排序`：***冒泡排序 ***、***快速排序 ***；\n>   4. `线性排序`：***计数排序 ***、***基数排序 ***、***桶排序 ***；\n>   5. `递归排序`：***归并排序 ***；\n<!-- more -->\n-------\n\n> **关于时间复杂度：**\n1. 平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。\n2. 线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；\n3. O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序\n4. 线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。\n\n> ***关于稳定性 ***：\n1. 稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。\n2. 不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。\n\n> ***名词解释 ***：\n1. n：数据规模\n2. k：“桶”的个数\n3. In-place：占用常数内存，不占用额外内存\n4. Out-place：占用额外内存\n5. 稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同\n\n\n`排序的10种算法如下图例`：\n![](http://p5vswdxl9.bkt.clouddn.com/all_sort_sumary.png)\n\n> &emsp;&emsp;&emsp;后续有关博文主要从排序效率上讲解以上4类排序中共10种排序算法思以及使用Java语言的算法实现。\n1. [简单排序](http://edgeowner.com/2015/03/14/simple-sort/)\n2. [高效排序](http://edgeowner.com/2015/03/16/high-efficiency/)\n3. [归并排序](http://edgeowner.com/2015/03/18/division-recursion/)\n4. [线性排序](http://edgeowner.com/2015/03/22/linear/)\n\n---------------------\n参考：\n* [八大基础排序总结](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484058&idx=1&sn=432c2dd8e4bda662ce066c09f8e22bda&chksm=ebd7439bdca0ca8ded40d0f431db411928936db9b4b5f5595027c8acd2efdef5ba35348641d2&scene=21#wechat_redirect)\n* [十大经典排序算法](https://github.com/hustcc/JS-Sorting-Algorithm)\n\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n \n   \n\n\n\n","source":"_posts/SortAlogrithms/sort-algorithm.md","raw":"---\ntitle: 排序算法\ntags: [Algorithms, Sort]\ncopyright: true\ndate: 2015-03-13 21:02:31\nupdated: 2015-03-14 20:29:00\ncategories: Algorithms\n---\n## 排序算法分类\n##### &emsp;&emsp;&emsp;排序算法从排序的效率上分类，主要分四类：\n>   1. `简单排序`：***冒泡排序 ***、***(直接)选择排序 ***、***(直接)插入排序 ***；\n>   2. `高效排序`：***快速排序 ***、***堆排序 ***、***希尔排序 ***；\n>   3. `分治递归思想实现的排序`：***递归排序 ***；\n>   4. `线性排序`：***计数排序 ***、***桶排序 ***、***基数排序 ***；\n##### &emsp;&emsp;&emsp;排序算法从排序的方式分类，主要分为五类：\n>   1. `插入排序`：***直接插入排序 ***、***希尔排序 ***；\n>   2. `选择排序`：***直接选择排序 ***、***堆排序 ***；\n>   3. `交换排序`：***冒泡排序 ***、***快速排序 ***；\n>   4. `线性排序`：***计数排序 ***、***基数排序 ***、***桶排序 ***；\n>   5. `递归排序`：***归并排序 ***；\n<!-- more -->\n-------\n\n> **关于时间复杂度：**\n1. 平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。\n2. 线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；\n3. O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序\n4. 线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。\n\n> ***关于稳定性 ***：\n1. 稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。\n2. 不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。\n\n> ***名词解释 ***：\n1. n：数据规模\n2. k：“桶”的个数\n3. In-place：占用常数内存，不占用额外内存\n4. Out-place：占用额外内存\n5. 稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同\n\n\n`排序的10种算法如下图例`：\n![](http://p5vswdxl9.bkt.clouddn.com/all_sort_sumary.png)\n\n> &emsp;&emsp;&emsp;后续有关博文主要从排序效率上讲解以上4类排序中共10种排序算法思以及使用Java语言的算法实现。\n1. [简单排序](http://edgeowner.com/2015/03/14/simple-sort/)\n2. [高效排序](http://edgeowner.com/2015/03/16/high-efficiency/)\n3. [归并排序](http://edgeowner.com/2015/03/18/division-recursion/)\n4. [线性排序](http://edgeowner.com/2015/03/22/linear/)\n\n---------------------\n参考：\n* [八大基础排序总结](https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247484058&idx=1&sn=432c2dd8e4bda662ce066c09f8e22bda&chksm=ebd7439bdca0ca8ded40d0f431db411928936db9b4b5f5595027c8acd2efdef5ba35348641d2&scene=21#wechat_redirect)\n* [十大经典排序算法](https://github.com/hustcc/JS-Sorting-Algorithm)\n\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n \n   \n\n\n\n","slug":"SortAlogrithms/sort-algorithm","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbnp003c9l8ike0mzqiy","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"排序算法分类\"><a href=\"#排序算法分类\" class=\"headerlink\" title=\"排序算法分类\"></a>排序算法分类</h2><h5 id=\"emsp-emsp-emsp-排序算法从排序的效率上分类，主要分四类：\"><a href=\"#emsp-emsp-emsp-排序算法从排序的效率上分类，主要分四类：\" class=\"headerlink\" title=\"&emsp;&emsp;&emsp;排序算法从排序的效率上分类，主要分四类：\"></a>&emsp;&emsp;&emsp;排序算法从排序的效率上分类，主要分四类：</h5><blockquote>\n<ol>\n<li><code>简单排序</code>：<strong><em>冒泡排序 </em></strong>、<strong><em>(直接)选择排序 </em></strong>、<strong><em>(直接)插入排序 </em></strong>；</li>\n<li><code>高效排序</code>：<strong><em>快速排序 </em></strong>、<strong><em>堆排序 </em></strong>、<strong><em>希尔排序 </em></strong>；</li>\n<li><code>分治递归思想实现的排序</code>：<strong><em>递归排序 </em></strong>；</li>\n<li><code>线性排序</code>：<strong><em>计数排序 </em></strong>、<strong><em>桶排序 </em></strong>、<strong><em>基数排序 </em></strong>；<h5 id=\"emsp-emsp-emsp-排序算法从排序的方式分类，主要分为五类：\"><a href=\"#emsp-emsp-emsp-排序算法从排序的方式分类，主要分为五类：\" class=\"headerlink\" title=\"&emsp;&emsp;&emsp;排序算法从排序的方式分类，主要分为五类：\"></a>&emsp;&emsp;&emsp;排序算法从排序的方式分类，主要分为五类：</h5></li>\n<li><code>插入排序</code>：<strong><em>直接插入排序 </em></strong>、<strong><em>希尔排序 </em></strong>；</li>\n<li><code>选择排序</code>：<strong><em>直接选择排序 </em></strong>、<strong><em>堆排序 </em></strong>；</li>\n<li><code>交换排序</code>：<strong><em>冒泡排序 </em></strong>、<strong><em>快速排序 </em></strong>；</li>\n<li><code>线性排序</code>：<strong><em>计数排序 </em></strong>、<strong><em>基数排序 </em></strong>、<strong><em>桶排序 </em></strong>；</li>\n<li><code>递归排序</code>：<strong><em>归并排序 </em></strong>；<a id=\"more\"></a>\n</li>\n</ol>\n<hr>\n<p><strong>关于时间复杂度：</strong></p>\n<ol>\n<li>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</li>\n<li>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；</li>\n<li>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序</li>\n<li>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</li>\n</ol>\n<p><strong><em>关于稳定性 </em></strong>：</p>\n<ol>\n<li>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</li>\n<li>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</li>\n</ol>\n<p><strong><em>名词解释 </em></strong>：</p>\n<ol>\n<li>n：数据规模</li>\n<li>k：“桶”的个数</li>\n<li>In-place：占用常数内存，不占用额外内存</li>\n<li>Out-place：占用额外内存</li>\n<li>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</li>\n</ol>\n</blockquote>\n<p><code>排序的10种算法如下图例</code>：<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/all_sort_sumary.png\" alt=\"\"></p>\n<blockquote>\n<p>&emsp;&emsp;&emsp;后续有关博文主要从排序效率上讲解以上4类排序中共10种排序算法思以及使用Java语言的算法实现。</p>\n<ol>\n<li><a href=\"http://edgeowner.com/2015/03/14/simple-sort/\">简单排序</a></li>\n<li><a href=\"http://edgeowner.com/2015/03/16/high-efficiency/\">高效排序</a></li>\n<li><a href=\"http://edgeowner.com/2015/03/18/division-recursion/\">归并排序</a></li>\n<li><a href=\"http://edgeowner.com/2015/03/22/linear/\">线性排序</a></li>\n</ol>\n</blockquote>\n<hr>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484058&amp;idx=1&amp;sn=432c2dd8e4bda662ce066c09f8e22bda&amp;chksm=ebd7439bdca0ca8ded40d0f431db411928936db9b4b5f5595027c8acd2efdef5ba35348641d2&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">八大基础排序总结</a></li>\n<li><a href=\"https://github.com/hustcc/JS-Sorting-Algorithm\" target=\"_blank\" rel=\"noopener\">十大经典排序算法</a></li>\n</ul>\n<p>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"排序算法分类\"><a href=\"#排序算法分类\" class=\"headerlink\" title=\"排序算法分类\"></a>排序算法分类</h2><h5 id=\"emsp-emsp-emsp-排序算法从排序的效率上分类，主要分四类：\"><a href=\"#emsp-emsp-emsp-排序算法从排序的效率上分类，主要分四类：\" class=\"headerlink\" title=\"&emsp;&emsp;&emsp;排序算法从排序的效率上分类，主要分四类：\"></a>&emsp;&emsp;&emsp;排序算法从排序的效率上分类，主要分四类：</h5><blockquote>\n<ol>\n<li><code>简单排序</code>：<strong><em>冒泡排序 </em></strong>、<strong><em>(直接)选择排序 </em></strong>、<strong><em>(直接)插入排序 </em></strong>；</li>\n<li><code>高效排序</code>：<strong><em>快速排序 </em></strong>、<strong><em>堆排序 </em></strong>、<strong><em>希尔排序 </em></strong>；</li>\n<li><code>分治递归思想实现的排序</code>：<strong><em>递归排序 </em></strong>；</li>\n<li><code>线性排序</code>：<strong><em>计数排序 </em></strong>、<strong><em>桶排序 </em></strong>、<strong><em>基数排序 </em></strong>；<h5 id=\"emsp-emsp-emsp-排序算法从排序的方式分类，主要分为五类：\"><a href=\"#emsp-emsp-emsp-排序算法从排序的方式分类，主要分为五类：\" class=\"headerlink\" title=\"&emsp;&emsp;&emsp;排序算法从排序的方式分类，主要分为五类：\"></a>&emsp;&emsp;&emsp;排序算法从排序的方式分类，主要分为五类：</h5></li>\n<li><code>插入排序</code>：<strong><em>直接插入排序 </em></strong>、<strong><em>希尔排序 </em></strong>；</li>\n<li><code>选择排序</code>：<strong><em>直接选择排序 </em></strong>、<strong><em>堆排序 </em></strong>；</li>\n<li><code>交换排序</code>：<strong><em>冒泡排序 </em></strong>、<strong><em>快速排序 </em></strong>；</li>\n<li><code>线性排序</code>：<strong><em>计数排序 </em></strong>、<strong><em>基数排序 </em></strong>、<strong><em>桶排序 </em></strong>；</li>\n<li><code>递归排序</code>：<strong><em>归并排序 </em></strong>；</li></ol></blockquote>","more":"\n\n<hr>\n<p><strong>关于时间复杂度：</strong></p>\n<ol>\n<li>平方阶 (O(n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</li>\n<li>线性对数阶 (O(nlog2n)) 排序 快速排序、堆排序和归并排序；</li>\n<li>O(n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序</li>\n<li>线性阶 (O(n)) 排序 基数排序，此外还有桶、箱排序。</li>\n</ol>\n<p><strong><em>关于稳定性 </em></strong>：</p>\n<ol>\n<li>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</li>\n<li>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</li>\n</ol>\n<p><strong><em>名词解释 </em></strong>：</p>\n<ol>\n<li>n：数据规模</li>\n<li>k：“桶”的个数</li>\n<li>In-place：占用常数内存，不占用额外内存</li>\n<li>Out-place：占用额外内存</li>\n<li>稳定性：排序后 2 个相等键值的顺序和排序之前它们的顺序相同</li>\n</ol>\n\n<p><code>排序的10种算法如下图例</code>：<br><img src=\"http://p5vswdxl9.bkt.clouddn.com/all_sort_sumary.png\" alt=\"\"></p>\n<blockquote>\n<p>&emsp;&emsp;&emsp;后续有关博文主要从排序效率上讲解以上4类排序中共10种排序算法思以及使用Java语言的算法实现。</p>\n<ol>\n<li><a href=\"http://edgeowner.com/2015/03/14/simple-sort/\">简单排序</a></li>\n<li><a href=\"http://edgeowner.com/2015/03/16/high-efficiency/\">高效排序</a></li>\n<li><a href=\"http://edgeowner.com/2015/03/18/division-recursion/\">归并排序</a></li>\n<li><a href=\"http://edgeowner.com/2015/03/22/linear/\">线性排序</a></li>\n</ol>\n</blockquote>\n<hr>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484058&amp;idx=1&amp;sn=432c2dd8e4bda662ce066c09f8e22bda&amp;chksm=ebd7439bdca0ca8ded40d0f431db411928936db9b4b5f5595027c8acd2efdef5ba35348641d2&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener\">八大基础排序总结</a></li>\n<li><a href=\"https://github.com/hustcc/JS-Sorting-Algorithm\" target=\"_blank\" rel=\"noopener\">十大经典排序算法</a></li>\n</ul>\n<p>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Mar 14 2015 20:29:00 GMT+0800 (CST)","title":"排序算法","path":"2015/03/13/SortAlogrithms/sort-algorithm/","eyeCatchImage":null,"excerpt":"<h2 id=\"排序算法分类\"><a href=\"#排序算法分类\" class=\"headerlink\" title=\"排序算法分类\"></a>排序算法分类</h2><h5 id=\"emsp-emsp-emsp-排序算法从排序的效率上分类，主要分四类：\"><a href=\"#emsp-emsp-emsp-排序算法从排序的效率上分类，主要分四类：\" class=\"headerlink\" title=\"&emsp;&emsp;&emsp;排序算法从排序的效率上分类，主要分四类：\"></a>&emsp;&emsp;&emsp;排序算法从排序的效率上分类，主要分四类：</h5><blockquote>\n<ol>\n<li><code>简单排序</code>：<strong><em>冒泡排序 </em></strong>、<strong><em>(直接)选择排序 </em></strong>、<strong><em>(直接)插入排序 </em></strong>；</li>\n<li><code>高效排序</code>：<strong><em>快速排序 </em></strong>、<strong><em>堆排序 </em></strong>、<strong><em>希尔排序 </em></strong>；</li>\n<li><code>分治递归思想实现的排序</code>：<strong><em>递归排序 </em></strong>；</li>\n<li><code>线性排序</code>：<strong><em>计数排序 </em></strong>、<strong><em>桶排序 </em></strong>、<strong><em>基数排序 </em></strong>；<h5 id=\"emsp-emsp-emsp-排序算法从排序的方式分类，主要分为五类：\"><a href=\"#emsp-emsp-emsp-排序算法从排序的方式分类，主要分为五类：\" class=\"headerlink\" title=\"&emsp;&emsp;&emsp;排序算法从排序的方式分类，主要分为五类：\"></a>&emsp;&emsp;&emsp;排序算法从排序的方式分类，主要分为五类：</h5></li>\n<li><code>插入排序</code>：<strong><em>直接插入排序 </em></strong>、<strong><em>希尔排序 </em></strong>；</li>\n<li><code>选择排序</code>：<strong><em>直接选择排序 </em></strong>、<strong><em>堆排序 </em></strong>；</li>\n<li><code>交换排序</code>：<strong><em>冒泡排序 </em></strong>、<strong><em>快速排序 </em></strong>；</li>\n<li><code>线性排序</code>：<strong><em>计数排序 </em></strong>、<strong><em>基数排序 </em></strong>、<strong><em>桶排序 </em></strong>；</li>\n<li><code>递归排序</code>：<strong><em>归并排序 </em></strong>；</li></ol></blockquote>","date":"2015-03-13T13:02:31.000Z","pv":0,"totalPV":0,"categories":"Algorithms","tags":["Algorithms","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"排序算法之简单排序","copyright":true,"date":"2015-03-14T12:10:31.000Z","updated":"2015-03-15T12:29:00.000Z","_content":"\n## 简单排序\n***冒泡排序 ***、***选择排序 ***、***插入排序 ***\n```java  公共代码部分\npublic class SwapUtils {\n\n    public static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n\n    }\n\n    public static void printArrays(int[] arrs) {\n        StringBuilder sb = new StringBuilder();\n        if (null == arrs || arrs.length == 0) {\n            System.out.println(\"Is Empty!\");\n            return;\n        }\n        for (int i = 0; i < arrs.length; i++) {\n            sb.append(\",\" + arrs[i]);\n        }\n        String toPring = sb.append(\" ]\").toString().replaceFirst(\",\", \"\");\n        System.out.println(toPring);\n\n    }\n}\n```\n<!-- more -->\n\n---------------------\n### 冒泡排序：\n冒泡排序（Bubble Sort）是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n`基本思想`\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个；\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对进行循环遍历。最后的元素会是最大的数；\n3. 针对所有的元素重复以上的步骤，除了最后一个；\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/bubbleSort.gif)\n\n`代码实现`\n``` java\n    public static void bubbleSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        //i控制外循环即总共需要将多少个数字进行排序，\n        //j控制内循环即每次循环都会将最大的数排到右边\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = 0; j < arr.length - i - 1; j++) {\n                //如果前面的数字大于后面的数字就将前面的数字和后面的数字进行交换，直接最大的数字被排到最右侧\n                if (arr[j] > arr[j + 1]) {\n                    SwapUtils.swap(arr, j + 1, j);\n                }\n            }\n        }\n    }\n   ```\n   \n ** 冒泡排序的时间复杂度为O(n²) **\n> 最快：当输入的数据已经是正序时（都已经是正序了，冒泡排序有何用）。\n> 最慢：当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗）。\n \n--------------\n\n### 选择排序：\n选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处不占用额外的内存空间。\n`基本思想`\n1. 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置；\n2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾；\n3. 重复第二步，直到遍历完所有元素，且均排序完毕为止。\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/selectionSort.gif)\n\n`代码实现`\n```java\n  public static void selectSort(int[] arr) {\n\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        // 每一趟循环比较时，min用于存放较小元素的数组下标，\n        // 这样当前批次比较完毕最终存放的就是此趟内最小的元素的下标，避免每次遇到较小元素都要进行交换。\n        for (int i = 0; i < arr.length - 1; i++) {\n            int min = i;\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[j] < arr[min]) {\n                    min = j;\n                }\n            }\n            if (min != i) {\n                SwapUtils.swap(arr, min, i);\n            }\n\n        }\n    }\n\n```\n\n**选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间。 **\n\n--------------\n\n### 插入排序：\n插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于**未排序数据**，在已排序序列中从后向前扫描，找到相应位置并插入。     \n`基本思想`\n1. 将第一待排序序列的第一个元素作为一个有序序列，把第二个元素到最后一个元素当成是未排序序列；\n2. 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面）\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/insertionSort.gif)\n\n`代码实现`\n```java\npublic static void insertSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        // 从下标为1的元素开始选择合适的位置插入，\n        // 因为下标为0的只有一个元素，默认是有序的\n        for (int i = 1; i < arr.length; i++) {\n            // 记录要插入的数据\n            int tmp = arr[i];\n            int j = i;\n            // 从已经排序的序列最右边的开始比较，找到比其小的数\n            while (j > 0 && tmp < arr[j - 1]) {\n                arr[j] = arr[j - 1];\n                j--;\n            }\n            // 存在比其小的数，插入\n            if (j != i) {\n                arr[j] = tmp;\n            }\n        }\n    }\n```\n** 插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。时间复杂度为O(n²)，是稳定的排序。 **\n\n-------\n\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n","source":"_posts/SortAlogrithms/simple-sort.md","raw":"---\ntitle: 排序算法之简单排序\ntags: [Algorithms, Sort]\ncopyright: true\ndate: 2015-03-14 20:10:31\nupdated: 2015-03-15 20:29:00\ncategories: Algorithms\n---\n\n## 简单排序\n***冒泡排序 ***、***选择排序 ***、***插入排序 ***\n```java  公共代码部分\npublic class SwapUtils {\n\n    public static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n\n    }\n\n    public static void printArrays(int[] arrs) {\n        StringBuilder sb = new StringBuilder();\n        if (null == arrs || arrs.length == 0) {\n            System.out.println(\"Is Empty!\");\n            return;\n        }\n        for (int i = 0; i < arrs.length; i++) {\n            sb.append(\",\" + arrs[i]);\n        }\n        String toPring = sb.append(\" ]\").toString().replaceFirst(\",\", \"\");\n        System.out.println(toPring);\n\n    }\n}\n```\n<!-- more -->\n\n---------------------\n### 冒泡排序：\n冒泡排序（Bubble Sort）是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n`基本思想`\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个；\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对进行循环遍历。最后的元素会是最大的数；\n3. 针对所有的元素重复以上的步骤，除了最后一个；\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/bubbleSort.gif)\n\n`代码实现`\n``` java\n    public static void bubbleSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        //i控制外循环即总共需要将多少个数字进行排序，\n        //j控制内循环即每次循环都会将最大的数排到右边\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = 0; j < arr.length - i - 1; j++) {\n                //如果前面的数字大于后面的数字就将前面的数字和后面的数字进行交换，直接最大的数字被排到最右侧\n                if (arr[j] > arr[j + 1]) {\n                    SwapUtils.swap(arr, j + 1, j);\n                }\n            }\n        }\n    }\n   ```\n   \n ** 冒泡排序的时间复杂度为O(n²) **\n> 最快：当输入的数据已经是正序时（都已经是正序了，冒泡排序有何用）。\n> 最慢：当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗）。\n \n--------------\n\n### 选择排序：\n选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处不占用额外的内存空间。\n`基本思想`\n1. 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置；\n2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾；\n3. 重复第二步，直到遍历完所有元素，且均排序完毕为止。\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/selectionSort.gif)\n\n`代码实现`\n```java\n  public static void selectSort(int[] arr) {\n\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        // 每一趟循环比较时，min用于存放较小元素的数组下标，\n        // 这样当前批次比较完毕最终存放的就是此趟内最小的元素的下标，避免每次遇到较小元素都要进行交换。\n        for (int i = 0; i < arr.length - 1; i++) {\n            int min = i;\n            for (int j = i + 1; j < arr.length; j++) {\n                if (arr[j] < arr[min]) {\n                    min = j;\n                }\n            }\n            if (min != i) {\n                SwapUtils.swap(arr, min, i);\n            }\n\n        }\n    }\n\n```\n\n**选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间。 **\n\n--------------\n\n### 插入排序：\n插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于**未排序数据**，在已排序序列中从后向前扫描，找到相应位置并插入。     \n`基本思想`\n1. 将第一待排序序列的第一个元素作为一个有序序列，把第二个元素到最后一个元素当成是未排序序列；\n2. 从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面）\n\n`遍历流程图例`\n![](http://p5vswdxl9.bkt.clouddn.com/insertionSort.gif)\n\n`代码实现`\n```java\npublic static void insertSort(int[] arr) {\n        if (null == arr || arr.length == 0) {\n            return;\n        }\n        // 从下标为1的元素开始选择合适的位置插入，\n        // 因为下标为0的只有一个元素，默认是有序的\n        for (int i = 1; i < arr.length; i++) {\n            // 记录要插入的数据\n            int tmp = arr[i];\n            int j = i;\n            // 从已经排序的序列最右边的开始比较，找到比其小的数\n            while (j > 0 && tmp < arr[j - 1]) {\n                arr[j] = arr[j - 1];\n                j--;\n            }\n            // 存在比其小的数，插入\n            if (j != i) {\n                arr[j] = tmp;\n            }\n        }\n    }\n```\n** 插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。时间复杂度为O(n²)，是稳定的排序。 **\n\n-------\n\nDemo代码地址：[Github](git@github.com:edgeowner/JavaCoreDemo.git)\n\n","slug":"SortAlogrithms/simple-sort","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbnr003f9l8i1uic9c23","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h2 id=\"简单排序\"><a href=\"#简单排序\" class=\"headerlink\" title=\"简单排序\"></a>简单排序</h2><p><strong><em>冒泡排序 </em></strong>、<strong><em>选择排序 </em></strong>、<strong><em>插入排序 </em></strong><br><figure class=\"highlight java\"><figcaption><span>公共代码部分</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwapUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArrays</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arrs || arrs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Is Empty!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrs.length; i++) &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\",\"</span> + arrs[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String toPring = sb.append(<span class=\"string\">\" ]\"</span>).toString().replaceFirst(<span class=\"string\">\",\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        System.out.println(toPring);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"冒泡排序：\"><a href=\"#冒泡排序：\" class=\"headerlink\" title=\"冒泡排序：\"></a>冒泡排序：</h3><p>冒泡排序（Bubble Sort）是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br><code>基本思想</code></p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个；</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对进行循环遍历。最后的元素会是最大的数；</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个；</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/bubbleSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//i控制外循环即总共需要将多少个数字进行排序，</span></span><br><span class=\"line\">    <span class=\"comment\">//j控制内循环即每次循环都会将最大的数排到右边</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果前面的数字大于后面的数字就将前面的数字和后面的数字进行交换，直接最大的数字被排到最右侧</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                SwapUtils.swap(arr, j + <span class=\"number\">1</span>, j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> <strong> 冒泡排序的时间复杂度为O(n²) </strong></p>\n<blockquote>\n<p>最快：当输入的数据已经是正序时（都已经是正序了，冒泡排序有何用）。<br>最慢：当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗）。</p>\n</blockquote>\n<hr>\n<h3 id=\"选择排序：\"><a href=\"#选择排序：\" class=\"headerlink\" title=\"选择排序：\"></a>选择排序：</h3><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处不占用额外的内存空间。<br><code>基本思想</code></p>\n<ol>\n<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置；</li>\n<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾；</li>\n<li>重复第二步，直到遍历完所有元素，且均排序完毕为止。</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/selectionSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 每一趟循环比较时，min用于存放较小元素的数组下标，</span></span><br><span class=\"line\">      <span class=\"comment\">// 这样当前批次比较完毕最终存放的就是此趟内最小的元素的下标，避免每次遇到较小元素都要进行交换。</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> min = i;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class=\"line\">                  min = j;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (min != i) &#123;</span><br><span class=\"line\">              SwapUtils.swap(arr, min, i);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间。 </strong></p>\n<hr>\n<h3 id=\"插入排序：\"><a href=\"#插入排序：\" class=\"headerlink\" title=\"插入排序：\"></a>插入排序：</h3><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于<strong>未排序数据</strong>，在已排序序列中从后向前扫描，找到相应位置并插入。<br><code>基本思想</code></p>\n<ol>\n<li>将第一待排序序列的第一个元素作为一个有序序列，把第二个元素到最后一个元素当成是未排序序列；</li>\n<li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面）</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/insertionSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 从下标为1的元素开始选择合适的位置插入，</span></span><br><span class=\"line\">        <span class=\"comment\">// 因为下标为0的只有一个元素，默认是有序的</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 记录要插入的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">            <span class=\"comment\">// 从已经排序的序列最右边的开始比较，找到比其小的数</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; tmp &lt; arr[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 存在比其小的数，插入</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j != i) &#123;</span><br><span class=\"line\">                arr[j] = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。时间复杂度为O(n²)，是稳定的排序。 </strong></p>\n<hr>\n<p>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"简单排序\"><a href=\"#简单排序\" class=\"headerlink\" title=\"简单排序\"></a>简单排序</h2><p><strong><em>冒泡排序 </em></strong>、<strong><em>选择排序 </em></strong>、<strong><em>插入排序 </em></strong><br><figure class=\"highlight java\"><figcaption><span>公共代码部分</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwapUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArrays</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arrs || arrs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Is Empty!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrs.length; i++) &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\",\"</span> + arrs[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String toPring = sb.append(<span class=\"string\">\" ]\"</span>).toString().replaceFirst(<span class=\"string\">\",\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        System.out.println(toPring);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","more":"<hr>\n<h3 id=\"冒泡排序：\"><a href=\"#冒泡排序：\" class=\"headerlink\" title=\"冒泡排序：\"></a>冒泡排序：</h3><p>冒泡排序（Bubble Sort）是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br><code>基本思想</code></p>\n<ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个；</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对进行循环遍历。最后的元素会是最大的数；</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个；</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/bubbleSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//i控制外循环即总共需要将多少个数字进行排序，</span></span><br><span class=\"line\">    <span class=\"comment\">//j控制内循环即每次循环都会将最大的数排到右边</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; arr.length - i - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果前面的数字大于后面的数字就将前面的数字和后面的数字进行交换，直接最大的数字被排到最右侧</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                SwapUtils.swap(arr, j + <span class=\"number\">1</span>, j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p> <strong> 冒泡排序的时间复杂度为O(n²) </strong></p>\n<blockquote>\n<p>最快：当输入的数据已经是正序时（都已经是正序了，冒泡排序有何用）。<br>最慢：当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗）。</p>\n</blockquote>\n<hr>\n<h3 id=\"选择排序：\"><a href=\"#选择排序：\" class=\"headerlink\" title=\"选择排序：\"></a>选择排序：</h3><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处不占用额外的内存空间。<br><code>基本思想</code></p>\n<ol>\n<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置；</li>\n<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾；</li>\n<li>重复第二步，直到遍历完所有元素，且均排序完毕为止。</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/selectionSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 每一趟循环比较时，min用于存放较小元素的数组下标，</span></span><br><span class=\"line\">      <span class=\"comment\">// 这样当前批次比较完毕最终存放的就是此趟内最小的元素的下标，避免每次遇到较小元素都要进行交换。</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> min = i;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class=\"line\">                  min = j;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (min != i) &#123;</span><br><span class=\"line\">              SwapUtils.swap(arr, min, i);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间。 </strong></p>\n<hr>\n<h3 id=\"插入排序：\"><a href=\"#插入排序：\" class=\"headerlink\" title=\"插入排序：\"></a>插入排序：</h3><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于<strong>未排序数据</strong>，在已排序序列中从后向前扫描，找到相应位置并插入。<br><code>基本思想</code></p>\n<ol>\n<li>将第一待排序序列的第一个元素作为一个有序序列，把第二个元素到最后一个元素当成是未排序序列；</li>\n<li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面）</li>\n</ol>\n<p><code>遍历流程图例</code><br><img src=\"http://p5vswdxl9.bkt.clouddn.com/insertionSort.gif\" alt=\"\"></p>\n<p><code>代码实现</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arr || arr.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 从下标为1的元素开始选择合适的位置插入，</span></span><br><span class=\"line\">        <span class=\"comment\">// 因为下标为0的只有一个元素，默认是有序的</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 记录要插入的数据</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">            <span class=\"comment\">// 从已经排序的序列最右边的开始比较，找到比其小的数</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (j &gt; <span class=\"number\">0</span> &amp;&amp; tmp &lt; arr[j - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                arr[j] = arr[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 存在比其小的数，插入</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j != i) &#123;</span><br><span class=\"line\">                arr[j] = tmp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong> 插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。时间复杂度为O(n²)，是稳定的排序。 </strong></p>\n<hr>\n<p>Demo代码地址：<a href=\"git@github.com:edgeowner/JavaCoreDemo.git\">Github</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sun Mar 15 2015 20:29:00 GMT+0800 (CST)","title":"排序算法之简单排序","path":"2015/03/14/SortAlogrithms/simple-sort/","eyeCatchImage":null,"excerpt":"<h2 id=\"简单排序\"><a href=\"#简单排序\" class=\"headerlink\" title=\"简单排序\"></a>简单排序</h2><p><strong><em>冒泡排序 </em></strong>、<strong><em>选择排序 </em></strong>、<strong><em>插入排序 </em></strong><br><figure class=\"highlight java\"><figcaption><span>公共代码部分</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwapUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[j];</span><br><span class=\"line\">        arr[j] = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printArrays</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arrs)</span> </span>&#123;</span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == arrs || arrs.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"Is Empty!\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; arrs.length; i++) &#123;</span><br><span class=\"line\">            sb.append(<span class=\"string\">\",\"</span> + arrs[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String toPring = sb.append(<span class=\"string\">\" ]\"</span>).toString().replaceFirst(<span class=\"string\">\",\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        System.out.println(toPring);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","date":"2015-03-14T12:10:31.000Z","pv":0,"totalPV":0,"categories":"Algorithms","tags":["Algorithms","Sort"],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"Spring source code read","copyright":true,"date":"2018-04-18T09:14:21.000Z","updated":"2018-04-18T09:14:21.072Z","_content":"\n\n","source":"_posts/SpringSourceCodeRead/spring-source-code-read.md","raw":"---\ntitle: Spring source code read\ntags: []\ncopyright: true\ndate: 2018-04-18 17:14:21\ncategories:\nupdated:\n---\n\n\n","slug":"SpringSourceCodeRead/spring-source-code-read","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbns003i9l8ils97d13m","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\">","site":{"data":{}},"excerpt":"","more":"","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Apr 18 2018 17:14:21 GMT+0800 (CST)","title":"Spring source code read","path":"2018/04/18/SpringSourceCodeRead/spring-source-code-read/","eyeCatchImage":null,"excerpt":null,"date":"2018-04-18T09:14:21.000Z","pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0}},{"title":"事务知识点","date":"2016-10-01T11:20:43.000Z","updated":"2016-10-01T12:19:21.000Z","copyright":true,"mathjax":true,"_content":"\n### 事务\n&emsp;&emsp;本文主要介绍事务的相关知识点，同时也为后续讲解乐观锁和悲观锁作铺垫，先对以下事务相关的知识点：``ACID``、``事物的常见问题``以及``事务的隔离级别``先做介绍，至于``锁``后续会有专题详细介绍。\n事务就是一组原子性的sql，或者一个独立的工作单元，事务可以就Mysql引擎来说的话就是要么全部执行这一组sql语句（CURD组合），要么全部都不执行（比如其中一条语句失败会导致这一组语句全部失败）。 \n事务是并发控制的单元，是用户定义的一个操作序列。这些操作要么都做，要么都不做，是一个不可分割的工作单位，说白了就是为了保证系统始终处于一个完整且正确的状态。\n\n<!--more-->\n\n-------\n\n#### 事务特性：ACID  \n事务的ACID特性：\n##### A：Atomiciy(原子性)：\n一个事物必须保证其中的操作要么全部执行，要么全部回滚，不可能存在只执行了一部分这种情况出现。简单说就是事务是一个不可分隔的工作单位，事务中的操作要么都发生，要么都不发生；\n\n事务包含的全部操作是一个不可分割的整体，要么全部执行，要么全部都不执行。\n##### C：Consistency(一致性)：\n数据必须保证从一种一致性的状态转换为另一种一致性状态。也就是事务开始到结束的时间段内，事务前后数据的完整性必须保证一致；  \n\n例如：事务之前A,B两个账户的总和是10万(A:4W,B:6W),现在A转账B2万(A:2W,B:8W),A,B账户总和依旧应该是10万，如果不是10万的话，则事务前后对于账户总和这种资源是不一致的。\n##### I：Isolation(隔离性)：\n在一个事物未执行完毕时，通常会保证其他Session无法看到这个事务的执行结果。也就是说多个用户并发访问数据库时，一个用户的事物不能被其他用户的事物所干扰，多个并发事务之间数据要相互隔离。数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的\"独立\"环境执行；\n\n主要规定了各个事务之间相互影响的程度，主要用于规定多个事务访问同一数据资源，各个事务对该数据资源访问的行为。\n##### D：Durability(持久性)：\n事务一旦commit，则数据就会保存下来，即使提交完之后系统崩溃，数据也不会丢失。\n\n事务一旦完成，要将数据所做的变更记录下来(冗余存储或多数据网络备份)。\n\n--------------\n\n#### 事务常见问题\n##### ``更新丢失(Lost Update)``：\n1. 场景：假定两个事物有$A$和$B$，事务$A$和事物$B$同时获得相同的数据，然后在各自的事物中修改数据M，事先$A$先提交事物，数据M假如为$M+$，事务$B$后提交事物，数据$M$变成了$M++$，最终结果变成$M++$，覆盖了事物$A$的更新。  \n2. 原因：当多个事务选择同一行操作，并且都是基于最初选定的值，由于每个事务都不知道其他事务的存在，就会发生更新覆盖的问题。类比Github提交冲突。  \n3. 例子：   \n\n| 事物$A$ | 事物$B$ |\n| --- | --- |\n| 读取 $X=100$ | 读取 $X=100$ |\n| 写入 $X=X+100$  |   |\n| 事物结束 $X = 200$ |  |\n|   | 写入 $X =X+100$ |\n|   | 事物结束 $X=300$(事物A的数据更新丢失) |\n    \n    \n#####  ``脏读(Dirty Reads)``：\n1. 场景：**允许事物B可以读到事物A修改而未提交的数据**，**可能**会造成脏读（脏读本质就是无效数据，只有当事物$A$回滚，那么事物B读到的数据才为无效的，所以这里只是**可能**造成脏读，当事物$A$不回滚的时候，事物$B$读到的数据就不为脏数据，也就是有效的数据，脏数据会导致以后的操作都会发生错误，一定要避免，不能凭借侥幸，事物$A$不能百分之百保证不回滚，所以**这种隔离级别很少用于实际应用**，并且它的性能也不比其他借笔好）。\n2. 原因：事物B读取了事物$A$已经修改但尚未提交的数据。若事物$A$回滚数据，事物$A$的数据存在不一致性的问题。\n3. 例子：\n    \n|  事物$A$  | 事物$B$ |\n| --- | --- |\n| 写入 $X=X+100(x=200)$ |  |\n|  | 读取 $X=200$(无效数据，脏读) |\n| 事务回滚 $X=100$ |  |\n| 事务结束 $X=100$ |  |\n|  | 事务结束 |\n\n#####  ``不可重复读(Non-Repeatable Reads)``：\n1. 场景：不可重复读是指在一个事务范围中$2$次或者多次查询同一数据$M$返回了不同的数据，例如：事务$B$读取某一数据，事务$A$修改了该数据$M$并且提交，事务$B$又读取该数据$M$(可能是再次校验)，在同一个事务$B$中，读取同一个数据$M$的结果集不同。\n2.  原因：事物$B$第一次读取最初数据，第二次读取事物A已经提交的修改或删除数据。导致两次读取数据不一致。不符合事物的隔离性。\n3.  例子：\n    \n| 事物$A$ | 事物$B$ |\n| --- | --- |\n| 读取 $X=100$ | 读取 $X=100$ |\n| 写入 $X=X+100$ | 读取 $X=100$ |\n| 事务结束，$X=200$ |  |\n|  | 读取 $X=200$(在一个事务B中读X的值发生了变化) |\n|  | 事物结束 |\n\n##### ``幻读(Phantom Reads)``：\n1. 当用户读取某一个范围的数据行时，另一个事物又在该范围内查询了新行，当用户再读取该范围的数据行时，会发现会有新的“幻影行”，例如：事物$B$读到某一个数据$M$，事物$A$对数据$M$增加了一行并提交，事物$B$又读数据$M$，发生多出了一行造成的结果不一致(如果行数相同，则是不可重复读)。   \n2. 原因：事物$B$根据相同的条件第二次查询到事物$A$提交的新增数据，两次数据结果集不一致。不符合事物的隔离性。\n3. 例子：在事物$B$里，同一个数据集$M$，读到的条数不一致(新增，删除)。\n    \n| 事务$A$ | 事务$B$ |\n| --- | --- |\n|     | 读取数据集$M$(3行) |\n| 在数据集$M$插入一行(4行)  |  |\n| 事务结束 |  |\n|  | 读取数据$M$(4行) |\n|  | 事务结束 |\n\n\n-------\n\n#### 事务的隔离级别\n数据库的事物隔离越严格，并发副作用越小，但付出的代价也就越大。因为事务隔离实质上是将事务在一定程度上“串行”进行，这显然与“并发”是矛盾的。实际业务中处理的话，根据自己的业务逻辑，权衡能接受的最大副作用，从而平衡了***“隔离” ***和***“并发” ***的问题。Mysql默认隔离级别是可重复读的。\n事务的隔离级别通常有四种（RU, RC, RR，Serializable）：\n\n| 隔离级别 | 读数据一致性 | 脏读可能性 | 不可重复读可能性 | 幻读可能性 | 加锁读 |\n| --- | --- | --- | --- | --- | --- |\n| 未提交读(Read uncommitted) | 最低级别 | Y | Y | Y  | N | \n| 已提交读(Read committed) | 语句级别 | N | Y | Y | N |\n| 可重复读(Repeatable read) | 事务级别 | N | N | Y | N | \n| 可序列化(Serializable)  | 最高级别，事务级别 | N | N | N | Y |\n\n-------\n\n#### MySql常用命令\n\n##### 查询隔离级别\nselect @@tx_isolation;\n\n##### 设置手动提交\nset autocommit=0 ;\n\n##### 查看当前事务自动提交模式\nselect @@autocommit;\n\n##### 设置隔离级别\nset tx_isolation = 'READ-COMMITTED';\n\n##### 查询表的状态\nshow table status like 'test1';\n\n##### 修改表的存储引擎\nalter table test1 engine = INNODB\n\n##### 查看是否开启日志\nshow variables like 'log_bin';\n\n##### 查看日志状态\nshow master status;\n\n-------\n\n#### 相关技术参考：\n[深入浅出事务（1）](https://segmentfault.com/a/1190000004437223)\n[深入浅出事务（2）](https://segmentfault.com/a/1190000004437275)\n[深入浅出事务（3）](https://segmentfault.com/a/1190000004469395)\n[MySQL表锁和行锁机制](https://segmentfault.com/a/1190000012773157)\n[Mysql之锁与事务](https://juejin.im/post/5ab5e44a6fb9a028c97a013d)\n[数据库 - 事务管理（ACID）、隔离级别、事务传播行为](https://segmentfault.com/a/1190000013122242)\n\n\n\n\n","source":"_posts/Transaction/transaction.md","raw":"---\ntitle:  事务知识点 \ndate: 2016-10-01 19:20:43\nupdated: 2016-10-01 20:19:21\ncategories: 并发控制相关知识点\ntags: [事务]\ncopyright: true\nmathjax: true\n---\n\n### 事务\n&emsp;&emsp;本文主要介绍事务的相关知识点，同时也为后续讲解乐观锁和悲观锁作铺垫，先对以下事务相关的知识点：``ACID``、``事物的常见问题``以及``事务的隔离级别``先做介绍，至于``锁``后续会有专题详细介绍。\n事务就是一组原子性的sql，或者一个独立的工作单元，事务可以就Mysql引擎来说的话就是要么全部执行这一组sql语句（CURD组合），要么全部都不执行（比如其中一条语句失败会导致这一组语句全部失败）。 \n事务是并发控制的单元，是用户定义的一个操作序列。这些操作要么都做，要么都不做，是一个不可分割的工作单位，说白了就是为了保证系统始终处于一个完整且正确的状态。\n\n<!--more-->\n\n-------\n\n#### 事务特性：ACID  \n事务的ACID特性：\n##### A：Atomiciy(原子性)：\n一个事物必须保证其中的操作要么全部执行，要么全部回滚，不可能存在只执行了一部分这种情况出现。简单说就是事务是一个不可分隔的工作单位，事务中的操作要么都发生，要么都不发生；\n\n事务包含的全部操作是一个不可分割的整体，要么全部执行，要么全部都不执行。\n##### C：Consistency(一致性)：\n数据必须保证从一种一致性的状态转换为另一种一致性状态。也就是事务开始到结束的时间段内，事务前后数据的完整性必须保证一致；  \n\n例如：事务之前A,B两个账户的总和是10万(A:4W,B:6W),现在A转账B2万(A:2W,B:8W),A,B账户总和依旧应该是10万，如果不是10万的话，则事务前后对于账户总和这种资源是不一致的。\n##### I：Isolation(隔离性)：\n在一个事物未执行完毕时，通常会保证其他Session无法看到这个事务的执行结果。也就是说多个用户并发访问数据库时，一个用户的事物不能被其他用户的事物所干扰，多个并发事务之间数据要相互隔离。数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的\"独立\"环境执行；\n\n主要规定了各个事务之间相互影响的程度，主要用于规定多个事务访问同一数据资源，各个事务对该数据资源访问的行为。\n##### D：Durability(持久性)：\n事务一旦commit，则数据就会保存下来，即使提交完之后系统崩溃，数据也不会丢失。\n\n事务一旦完成，要将数据所做的变更记录下来(冗余存储或多数据网络备份)。\n\n--------------\n\n#### 事务常见问题\n##### ``更新丢失(Lost Update)``：\n1. 场景：假定两个事物有$A$和$B$，事务$A$和事物$B$同时获得相同的数据，然后在各自的事物中修改数据M，事先$A$先提交事物，数据M假如为$M+$，事务$B$后提交事物，数据$M$变成了$M++$，最终结果变成$M++$，覆盖了事物$A$的更新。  \n2. 原因：当多个事务选择同一行操作，并且都是基于最初选定的值，由于每个事务都不知道其他事务的存在，就会发生更新覆盖的问题。类比Github提交冲突。  \n3. 例子：   \n\n| 事物$A$ | 事物$B$ |\n| --- | --- |\n| 读取 $X=100$ | 读取 $X=100$ |\n| 写入 $X=X+100$  |   |\n| 事物结束 $X = 200$ |  |\n|   | 写入 $X =X+100$ |\n|   | 事物结束 $X=300$(事物A的数据更新丢失) |\n    \n    \n#####  ``脏读(Dirty Reads)``：\n1. 场景：**允许事物B可以读到事物A修改而未提交的数据**，**可能**会造成脏读（脏读本质就是无效数据，只有当事物$A$回滚，那么事物B读到的数据才为无效的，所以这里只是**可能**造成脏读，当事物$A$不回滚的时候，事物$B$读到的数据就不为脏数据，也就是有效的数据，脏数据会导致以后的操作都会发生错误，一定要避免，不能凭借侥幸，事物$A$不能百分之百保证不回滚，所以**这种隔离级别很少用于实际应用**，并且它的性能也不比其他借笔好）。\n2. 原因：事物B读取了事物$A$已经修改但尚未提交的数据。若事物$A$回滚数据，事物$A$的数据存在不一致性的问题。\n3. 例子：\n    \n|  事物$A$  | 事物$B$ |\n| --- | --- |\n| 写入 $X=X+100(x=200)$ |  |\n|  | 读取 $X=200$(无效数据，脏读) |\n| 事务回滚 $X=100$ |  |\n| 事务结束 $X=100$ |  |\n|  | 事务结束 |\n\n#####  ``不可重复读(Non-Repeatable Reads)``：\n1. 场景：不可重复读是指在一个事务范围中$2$次或者多次查询同一数据$M$返回了不同的数据，例如：事务$B$读取某一数据，事务$A$修改了该数据$M$并且提交，事务$B$又读取该数据$M$(可能是再次校验)，在同一个事务$B$中，读取同一个数据$M$的结果集不同。\n2.  原因：事物$B$第一次读取最初数据，第二次读取事物A已经提交的修改或删除数据。导致两次读取数据不一致。不符合事物的隔离性。\n3.  例子：\n    \n| 事物$A$ | 事物$B$ |\n| --- | --- |\n| 读取 $X=100$ | 读取 $X=100$ |\n| 写入 $X=X+100$ | 读取 $X=100$ |\n| 事务结束，$X=200$ |  |\n|  | 读取 $X=200$(在一个事务B中读X的值发生了变化) |\n|  | 事物结束 |\n\n##### ``幻读(Phantom Reads)``：\n1. 当用户读取某一个范围的数据行时，另一个事物又在该范围内查询了新行，当用户再读取该范围的数据行时，会发现会有新的“幻影行”，例如：事物$B$读到某一个数据$M$，事物$A$对数据$M$增加了一行并提交，事物$B$又读数据$M$，发生多出了一行造成的结果不一致(如果行数相同，则是不可重复读)。   \n2. 原因：事物$B$根据相同的条件第二次查询到事物$A$提交的新增数据，两次数据结果集不一致。不符合事物的隔离性。\n3. 例子：在事物$B$里，同一个数据集$M$，读到的条数不一致(新增，删除)。\n    \n| 事务$A$ | 事务$B$ |\n| --- | --- |\n|     | 读取数据集$M$(3行) |\n| 在数据集$M$插入一行(4行)  |  |\n| 事务结束 |  |\n|  | 读取数据$M$(4行) |\n|  | 事务结束 |\n\n\n-------\n\n#### 事务的隔离级别\n数据库的事物隔离越严格，并发副作用越小，但付出的代价也就越大。因为事务隔离实质上是将事务在一定程度上“串行”进行，这显然与“并发”是矛盾的。实际业务中处理的话，根据自己的业务逻辑，权衡能接受的最大副作用，从而平衡了***“隔离” ***和***“并发” ***的问题。Mysql默认隔离级别是可重复读的。\n事务的隔离级别通常有四种（RU, RC, RR，Serializable）：\n\n| 隔离级别 | 读数据一致性 | 脏读可能性 | 不可重复读可能性 | 幻读可能性 | 加锁读 |\n| --- | --- | --- | --- | --- | --- |\n| 未提交读(Read uncommitted) | 最低级别 | Y | Y | Y  | N | \n| 已提交读(Read committed) | 语句级别 | N | Y | Y | N |\n| 可重复读(Repeatable read) | 事务级别 | N | N | Y | N | \n| 可序列化(Serializable)  | 最高级别，事务级别 | N | N | N | Y |\n\n-------\n\n#### MySql常用命令\n\n##### 查询隔离级别\nselect @@tx_isolation;\n\n##### 设置手动提交\nset autocommit=0 ;\n\n##### 查看当前事务自动提交模式\nselect @@autocommit;\n\n##### 设置隔离级别\nset tx_isolation = 'READ-COMMITTED';\n\n##### 查询表的状态\nshow table status like 'test1';\n\n##### 修改表的存储引擎\nalter table test1 engine = INNODB\n\n##### 查看是否开启日志\nshow variables like 'log_bin';\n\n##### 查看日志状态\nshow master status;\n\n-------\n\n#### 相关技术参考：\n[深入浅出事务（1）](https://segmentfault.com/a/1190000004437223)\n[深入浅出事务（2）](https://segmentfault.com/a/1190000004437275)\n[深入浅出事务（3）](https://segmentfault.com/a/1190000004469395)\n[MySQL表锁和行锁机制](https://segmentfault.com/a/1190000012773157)\n[Mysql之锁与事务](https://juejin.im/post/5ab5e44a6fb9a028c97a013d)\n[数据库 - 事务管理（ACID）、隔离级别、事务传播行为](https://segmentfault.com/a/1190000013122242)\n\n\n\n\n","slug":"Transaction/transaction","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjg7rzbnt003l9l8ielkz8je8","content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css\"><h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>&emsp;&emsp;本文主要介绍事务的相关知识点，同时也为后续讲解乐观锁和悲观锁作铺垫，先对以下事务相关的知识点：<code>ACID</code>、<code>事物的常见问题</code>以及<code>事务的隔离级别</code>先做介绍，至于<code>锁</code>后续会有专题详细介绍。<br>事务就是一组原子性的sql，或者一个独立的工作单元，事务可以就Mysql引擎来说的话就是要么全部执行这一组sql语句（CURD组合），要么全部都不执行（比如其中一条语句失败会导致这一组语句全部失败）。<br>事务是并发控制的单元，是用户定义的一个操作序列。这些操作要么都做，要么都不做，是一个不可分割的工作单位，说白了就是为了保证系统始终处于一个完整且正确的状态。</p>\n<a id=\"more\"></a>\n<hr>\n<h4 id=\"事务特性：ACID\"><a href=\"#事务特性：ACID\" class=\"headerlink\" title=\"事务特性：ACID\"></a>事务特性：ACID</h4><p>事务的ACID特性：</p>\n<h5 id=\"A：Atomiciy-原子性-：\"><a href=\"#A：Atomiciy-原子性-：\" class=\"headerlink\" title=\"A：Atomiciy(原子性)：\"></a>A：Atomiciy(原子性)：</h5><p>一个事物必须保证其中的操作要么全部执行，要么全部回滚，不可能存在只执行了一部分这种情况出现。简单说就是事务是一个不可分隔的工作单位，事务中的操作要么都发生，要么都不发生；</p>\n<p>事务包含的全部操作是一个不可分割的整体，要么全部执行，要么全部都不执行。</p>\n<h5 id=\"C：Consistency-一致性-：\"><a href=\"#C：Consistency-一致性-：\" class=\"headerlink\" title=\"C：Consistency(一致性)：\"></a>C：Consistency(一致性)：</h5><p>数据必须保证从一种一致性的状态转换为另一种一致性状态。也就是事务开始到结束的时间段内，事务前后数据的完整性必须保证一致；  </p>\n<p>例如：事务之前A,B两个账户的总和是10万(A:4W,B:6W),现在A转账B2万(A:2W,B:8W),A,B账户总和依旧应该是10万，如果不是10万的话，则事务前后对于账户总和这种资源是不一致的。</p>\n<h5 id=\"I：Isolation-隔离性-：\"><a href=\"#I：Isolation-隔离性-：\" class=\"headerlink\" title=\"I：Isolation(隔离性)：\"></a>I：Isolation(隔离性)：</h5><p>在一个事物未执行完毕时，通常会保证其他Session无法看到这个事务的执行结果。也就是说多个用户并发访问数据库时，一个用户的事物不能被其他用户的事物所干扰，多个并发事务之间数据要相互隔离。数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的”独立”环境执行；</p>\n<p>主要规定了各个事务之间相互影响的程度，主要用于规定多个事务访问同一数据资源，各个事务对该数据资源访问的行为。</p>\n<h5 id=\"D：Durability-持久性-：\"><a href=\"#D：Durability-持久性-：\" class=\"headerlink\" title=\"D：Durability(持久性)：\"></a>D：Durability(持久性)：</h5><p>事务一旦commit，则数据就会保存下来，即使提交完之后系统崩溃，数据也不会丢失。</p>\n<p>事务一旦完成，要将数据所做的变更记录下来(冗余存储或多数据网络备份)。</p>\n<hr>\n<h4 id=\"事务常见问题\"><a href=\"#事务常见问题\" class=\"headerlink\" title=\"事务常见问题\"></a>事务常见问题</h4><h5 id=\"更新丢失-Lost-Update-：\"><a href=\"#更新丢失-Lost-Update-：\" class=\"headerlink\" title=\"更新丢失(Lost Update)：\"></a><code>更新丢失(Lost Update)</code>：</h5><ol>\n<li>场景：假定两个事物有$A$和$B$，事务$A$和事物$B$同时获得相同的数据，然后在各自的事物中修改数据M，事先$A$先提交事物，数据M假如为$M+$，事务$B$后提交事物，数据$M$变成了$M++$，最终结果变成$M++$，覆盖了事物$A$的更新。  </li>\n<li>原因：当多个事务选择同一行操作，并且都是基于最初选定的值，由于每个事务都不知道其他事务的存在，就会发生更新覆盖的问题。类比Github提交冲突。  </li>\n<li>例子：   </li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事物$A$</th>\n<th>事物$B$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读取 $X=100$</td>\n<td>读取 $X=100$</td>\n</tr>\n<tr>\n<td>写入 $X=X+100$</td>\n<td></td>\n</tr>\n<tr>\n<td>事物结束 $X = 200$</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>写入 $X =X+100$</td>\n</tr>\n<tr>\n<td></td>\n<td>事物结束 $X=300$(事物A的数据更新丢失)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"脏读-Dirty-Reads-：\"><a href=\"#脏读-Dirty-Reads-：\" class=\"headerlink\" title=\"脏读(Dirty Reads)：\"></a><code>脏读(Dirty Reads)</code>：</h5><ol>\n<li>场景：<strong>允许事物B可以读到事物A修改而未提交的数据</strong>，<strong>可能</strong>会造成脏读（脏读本质就是无效数据，只有当事物$A$回滚，那么事物B读到的数据才为无效的，所以这里只是<strong>可能</strong>造成脏读，当事物$A$不回滚的时候，事物$B$读到的数据就不为脏数据，也就是有效的数据，脏数据会导致以后的操作都会发生错误，一定要避免，不能凭借侥幸，事物$A$不能百分之百保证不回滚，所以<strong>这种隔离级别很少用于实际应用</strong>，并且它的性能也不比其他借笔好）。</li>\n<li>原因：事物B读取了事物$A$已经修改但尚未提交的数据。若事物$A$回滚数据，事物$A$的数据存在不一致性的问题。</li>\n<li>例子：</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事物$A$</th>\n<th>事物$B$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>写入 $X=X+100(x=200)$</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>读取 $X=200$(无效数据，脏读)</td>\n</tr>\n<tr>\n<td>事务回滚 $X=100$</td>\n<td></td>\n</tr>\n<tr>\n<td>事务结束 $X=100$</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>事务结束</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"不可重复读-Non-Repeatable-Reads-：\"><a href=\"#不可重复读-Non-Repeatable-Reads-：\" class=\"headerlink\" title=\"不可重复读(Non-Repeatable Reads)：\"></a><code>不可重复读(Non-Repeatable Reads)</code>：</h5><ol>\n<li>场景：不可重复读是指在一个事务范围中$2$次或者多次查询同一数据$M$返回了不同的数据，例如：事务$B$读取某一数据，事务$A$修改了该数据$M$并且提交，事务$B$又读取该数据$M$(可能是再次校验)，在同一个事务$B$中，读取同一个数据$M$的结果集不同。</li>\n<li>原因：事物$B$第一次读取最初数据，第二次读取事物A已经提交的修改或删除数据。导致两次读取数据不一致。不符合事物的隔离性。</li>\n<li>例子：</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事物$A$</th>\n<th>事物$B$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读取 $X=100$</td>\n<td>读取 $X=100$</td>\n</tr>\n<tr>\n<td>写入 $X=X+100$</td>\n<td>读取 $X=100$</td>\n</tr>\n<tr>\n<td>事务结束，$X=200$</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>读取 $X=200$(在一个事务B中读X的值发生了变化)</td>\n</tr>\n<tr>\n<td></td>\n<td>事物结束</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"幻读-Phantom-Reads-：\"><a href=\"#幻读-Phantom-Reads-：\" class=\"headerlink\" title=\"幻读(Phantom Reads)：\"></a><code>幻读(Phantom Reads)</code>：</h5><ol>\n<li>当用户读取某一个范围的数据行时，另一个事物又在该范围内查询了新行，当用户再读取该范围的数据行时，会发现会有新的“幻影行”，例如：事物$B$读到某一个数据$M$，事物$A$对数据$M$增加了一行并提交，事物$B$又读数据$M$，发生多出了一行造成的结果不一致(如果行数相同，则是不可重复读)。   </li>\n<li>原因：事物$B$根据相同的条件第二次查询到事物$A$提交的新增数据，两次数据结果集不一致。不符合事物的隔离性。</li>\n<li>例子：在事物$B$里，同一个数据集$M$，读到的条数不一致(新增，删除)。</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务$A$</th>\n<th>事务$B$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>读取数据集$M$(3行)</td>\n</tr>\n<tr>\n<td>在数据集$M$插入一行(4行)</td>\n<td></td>\n</tr>\n<tr>\n<td>事务结束</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>读取数据$M$(4行)</td>\n</tr>\n<tr>\n<td></td>\n<td>事务结束</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h4 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h4><p>数据库的事物隔离越严格，并发副作用越小，但付出的代价也就越大。因为事务隔离实质上是将事务在一定程度上“串行”进行，这显然与“并发”是矛盾的。实际业务中处理的话，根据自己的业务逻辑，权衡能接受的最大副作用，从而平衡了<strong><em>“隔离” </em></strong>和<strong><em>“并发” </em></strong>的问题。Mysql默认隔离级别是可重复读的。<br>事务的隔离级别通常有四种（RU, RC, RR，Serializable）：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>读数据一致性</th>\n<th>脏读可能性</th>\n<th>不可重复读可能性</th>\n<th>幻读可能性</th>\n<th>加锁读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>未提交读(Read uncommitted)</td>\n<td>最低级别</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>已提交读(Read committed)</td>\n<td>语句级别</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>可重复读(Repeatable read)</td>\n<td>事务级别</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>可序列化(Serializable)</td>\n<td>最高级别，事务级别</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h4 id=\"MySql常用命令\"><a href=\"#MySql常用命令\" class=\"headerlink\" title=\"MySql常用命令\"></a>MySql常用命令</h4><h5 id=\"查询隔离级别\"><a href=\"#查询隔离级别\" class=\"headerlink\" title=\"查询隔离级别\"></a>查询隔离级别</h5><p>select @@tx_isolation;</p>\n<h5 id=\"设置手动提交\"><a href=\"#设置手动提交\" class=\"headerlink\" title=\"设置手动提交\"></a>设置手动提交</h5><p>set autocommit=0 ;</p>\n<h5 id=\"查看当前事务自动提交模式\"><a href=\"#查看当前事务自动提交模式\" class=\"headerlink\" title=\"查看当前事务自动提交模式\"></a>查看当前事务自动提交模式</h5><p>select @@autocommit;</p>\n<h5 id=\"设置隔离级别\"><a href=\"#设置隔离级别\" class=\"headerlink\" title=\"设置隔离级别\"></a>设置隔离级别</h5><p>set tx_isolation = ‘READ-COMMITTED’;</p>\n<h5 id=\"查询表的状态\"><a href=\"#查询表的状态\" class=\"headerlink\" title=\"查询表的状态\"></a>查询表的状态</h5><p>show table status like ‘test1’;</p>\n<h5 id=\"修改表的存储引擎\"><a href=\"#修改表的存储引擎\" class=\"headerlink\" title=\"修改表的存储引擎\"></a>修改表的存储引擎</h5><p>alter table test1 engine = INNODB</p>\n<h5 id=\"查看是否开启日志\"><a href=\"#查看是否开启日志\" class=\"headerlink\" title=\"查看是否开启日志\"></a>查看是否开启日志</h5><p>show variables like ‘log_bin’;</p>\n<h5 id=\"查看日志状态\"><a href=\"#查看日志状态\" class=\"headerlink\" title=\"查看日志状态\"></a>查看日志状态</h5><p>show master status;</p>\n<hr>\n<h4 id=\"相关技术参考：\"><a href=\"#相关技术参考：\" class=\"headerlink\" title=\"相关技术参考：\"></a>相关技术参考：</h4><p><a href=\"https://segmentfault.com/a/1190000004437223\" target=\"_blank\" rel=\"noopener\">深入浅出事务（1）</a><br><a href=\"https://segmentfault.com/a/1190000004437275\" target=\"_blank\" rel=\"noopener\">深入浅出事务（2）</a><br><a href=\"https://segmentfault.com/a/1190000004469395\" target=\"_blank\" rel=\"noopener\">深入浅出事务（3）</a><br><a href=\"https://segmentfault.com/a/1190000012773157\" target=\"_blank\" rel=\"noopener\">MySQL表锁和行锁机制</a><br><a href=\"https://juejin.im/post/5ab5e44a6fb9a028c97a013d\" target=\"_blank\" rel=\"noopener\">Mysql之锁与事务</a><br><a href=\"https://segmentfault.com/a/1190000013122242\" target=\"_blank\" rel=\"noopener\">数据库 - 事务管理（ACID）、隔离级别、事务传播行为</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>&emsp;&emsp;本文主要介绍事务的相关知识点，同时也为后续讲解乐观锁和悲观锁作铺垫，先对以下事务相关的知识点：<code>ACID</code>、<code>事物的常见问题</code>以及<code>事务的隔离级别</code>先做介绍，至于<code>锁</code>后续会有专题详细介绍。<br>事务就是一组原子性的sql，或者一个独立的工作单元，事务可以就Mysql引擎来说的话就是要么全部执行这一组sql语句（CURD组合），要么全部都不执行（比如其中一条语句失败会导致这一组语句全部失败）。<br>事务是并发控制的单元，是用户定义的一个操作序列。这些操作要么都做，要么都不做，是一个不可分割的工作单位，说白了就是为了保证系统始终处于一个完整且正确的状态。</p>","more":"<hr>\n<h4 id=\"事务特性：ACID\"><a href=\"#事务特性：ACID\" class=\"headerlink\" title=\"事务特性：ACID\"></a>事务特性：ACID</h4><p>事务的ACID特性：</p>\n<h5 id=\"A：Atomiciy-原子性-：\"><a href=\"#A：Atomiciy-原子性-：\" class=\"headerlink\" title=\"A：Atomiciy(原子性)：\"></a>A：Atomiciy(原子性)：</h5><p>一个事物必须保证其中的操作要么全部执行，要么全部回滚，不可能存在只执行了一部分这种情况出现。简单说就是事务是一个不可分隔的工作单位，事务中的操作要么都发生，要么都不发生；</p>\n<p>事务包含的全部操作是一个不可分割的整体，要么全部执行，要么全部都不执行。</p>\n<h5 id=\"C：Consistency-一致性-：\"><a href=\"#C：Consistency-一致性-：\" class=\"headerlink\" title=\"C：Consistency(一致性)：\"></a>C：Consistency(一致性)：</h5><p>数据必须保证从一种一致性的状态转换为另一种一致性状态。也就是事务开始到结束的时间段内，事务前后数据的完整性必须保证一致；  </p>\n<p>例如：事务之前A,B两个账户的总和是10万(A:4W,B:6W),现在A转账B2万(A:2W,B:8W),A,B账户总和依旧应该是10万，如果不是10万的话，则事务前后对于账户总和这种资源是不一致的。</p>\n<h5 id=\"I：Isolation-隔离性-：\"><a href=\"#I：Isolation-隔离性-：\" class=\"headerlink\" title=\"I：Isolation(隔离性)：\"></a>I：Isolation(隔离性)：</h5><p>在一个事物未执行完毕时，通常会保证其他Session无法看到这个事务的执行结果。也就是说多个用户并发访问数据库时，一个用户的事物不能被其他用户的事物所干扰，多个并发事务之间数据要相互隔离。数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的”独立”环境执行；</p>\n<p>主要规定了各个事务之间相互影响的程度，主要用于规定多个事务访问同一数据资源，各个事务对该数据资源访问的行为。</p>\n<h5 id=\"D：Durability-持久性-：\"><a href=\"#D：Durability-持久性-：\" class=\"headerlink\" title=\"D：Durability(持久性)：\"></a>D：Durability(持久性)：</h5><p>事务一旦commit，则数据就会保存下来，即使提交完之后系统崩溃，数据也不会丢失。</p>\n<p>事务一旦完成，要将数据所做的变更记录下来(冗余存储或多数据网络备份)。</p>\n<hr>\n<h4 id=\"事务常见问题\"><a href=\"#事务常见问题\" class=\"headerlink\" title=\"事务常见问题\"></a>事务常见问题</h4><h5 id=\"更新丢失-Lost-Update-：\"><a href=\"#更新丢失-Lost-Update-：\" class=\"headerlink\" title=\"更新丢失(Lost Update)：\"></a><code>更新丢失(Lost Update)</code>：</h5><ol>\n<li>场景：假定两个事物有$A$和$B$，事务$A$和事物$B$同时获得相同的数据，然后在各自的事物中修改数据M，事先$A$先提交事物，数据M假如为$M+$，事务$B$后提交事物，数据$M$变成了$M++$，最终结果变成$M++$，覆盖了事物$A$的更新。  </li>\n<li>原因：当多个事务选择同一行操作，并且都是基于最初选定的值，由于每个事务都不知道其他事务的存在，就会发生更新覆盖的问题。类比Github提交冲突。  </li>\n<li>例子：   </li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事物$A$</th>\n<th>事物$B$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读取 $X=100$</td>\n<td>读取 $X=100$</td>\n</tr>\n<tr>\n<td>写入 $X=X+100$</td>\n<td></td>\n</tr>\n<tr>\n<td>事物结束 $X = 200$</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>写入 $X =X+100$</td>\n</tr>\n<tr>\n<td></td>\n<td>事物结束 $X=300$(事物A的数据更新丢失)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"脏读-Dirty-Reads-：\"><a href=\"#脏读-Dirty-Reads-：\" class=\"headerlink\" title=\"脏读(Dirty Reads)：\"></a><code>脏读(Dirty Reads)</code>：</h5><ol>\n<li>场景：<strong>允许事物B可以读到事物A修改而未提交的数据</strong>，<strong>可能</strong>会造成脏读（脏读本质就是无效数据，只有当事物$A$回滚，那么事物B读到的数据才为无效的，所以这里只是<strong>可能</strong>造成脏读，当事物$A$不回滚的时候，事物$B$读到的数据就不为脏数据，也就是有效的数据，脏数据会导致以后的操作都会发生错误，一定要避免，不能凭借侥幸，事物$A$不能百分之百保证不回滚，所以<strong>这种隔离级别很少用于实际应用</strong>，并且它的性能也不比其他借笔好）。</li>\n<li>原因：事物B读取了事物$A$已经修改但尚未提交的数据。若事物$A$回滚数据，事物$A$的数据存在不一致性的问题。</li>\n<li>例子：</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事物$A$</th>\n<th>事物$B$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>写入 $X=X+100(x=200)$</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>读取 $X=200$(无效数据，脏读)</td>\n</tr>\n<tr>\n<td>事务回滚 $X=100$</td>\n<td></td>\n</tr>\n<tr>\n<td>事务结束 $X=100$</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>事务结束</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"不可重复读-Non-Repeatable-Reads-：\"><a href=\"#不可重复读-Non-Repeatable-Reads-：\" class=\"headerlink\" title=\"不可重复读(Non-Repeatable Reads)：\"></a><code>不可重复读(Non-Repeatable Reads)</code>：</h5><ol>\n<li>场景：不可重复读是指在一个事务范围中$2$次或者多次查询同一数据$M$返回了不同的数据，例如：事务$B$读取某一数据，事务$A$修改了该数据$M$并且提交，事务$B$又读取该数据$M$(可能是再次校验)，在同一个事务$B$中，读取同一个数据$M$的结果集不同。</li>\n<li>原因：事物$B$第一次读取最初数据，第二次读取事物A已经提交的修改或删除数据。导致两次读取数据不一致。不符合事物的隔离性。</li>\n<li>例子：</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事物$A$</th>\n<th>事物$B$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读取 $X=100$</td>\n<td>读取 $X=100$</td>\n</tr>\n<tr>\n<td>写入 $X=X+100$</td>\n<td>读取 $X=100$</td>\n</tr>\n<tr>\n<td>事务结束，$X=200$</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>读取 $X=200$(在一个事务B中读X的值发生了变化)</td>\n</tr>\n<tr>\n<td></td>\n<td>事物结束</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h5 id=\"幻读-Phantom-Reads-：\"><a href=\"#幻读-Phantom-Reads-：\" class=\"headerlink\" title=\"幻读(Phantom Reads)：\"></a><code>幻读(Phantom Reads)</code>：</h5><ol>\n<li>当用户读取某一个范围的数据行时，另一个事物又在该范围内查询了新行，当用户再读取该范围的数据行时，会发现会有新的“幻影行”，例如：事物$B$读到某一个数据$M$，事物$A$对数据$M$增加了一行并提交，事物$B$又读数据$M$，发生多出了一行造成的结果不一致(如果行数相同，则是不可重复读)。   </li>\n<li>原因：事物$B$根据相同的条件第二次查询到事物$A$提交的新增数据，两次数据结果集不一致。不符合事物的隔离性。</li>\n<li>例子：在事物$B$里，同一个数据集$M$，读到的条数不一致(新增，删除)。</li>\n</ol>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>事务$A$</th>\n<th>事务$B$</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td>读取数据集$M$(3行)</td>\n</tr>\n<tr>\n<td>在数据集$M$插入一行(4行)</td>\n<td></td>\n</tr>\n<tr>\n<td>事务结束</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>读取数据$M$(4行)</td>\n</tr>\n<tr>\n<td></td>\n<td>事务结束</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h4 id=\"事务的隔离级别\"><a href=\"#事务的隔离级别\" class=\"headerlink\" title=\"事务的隔离级别\"></a>事务的隔离级别</h4><p>数据库的事物隔离越严格，并发副作用越小，但付出的代价也就越大。因为事务隔离实质上是将事务在一定程度上“串行”进行，这显然与“并发”是矛盾的。实际业务中处理的话，根据自己的业务逻辑，权衡能接受的最大副作用，从而平衡了<strong><em>“隔离” </em></strong>和<strong><em>“并发” </em></strong>的问题。Mysql默认隔离级别是可重复读的。<br>事务的隔离级别通常有四种（RU, RC, RR，Serializable）：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>读数据一致性</th>\n<th>脏读可能性</th>\n<th>不可重复读可能性</th>\n<th>幻读可能性</th>\n<th>加锁读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>未提交读(Read uncommitted)</td>\n<td>最低级别</td>\n<td>Y</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>已提交读(Read committed)</td>\n<td>语句级别</td>\n<td>N</td>\n<td>Y</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>可重复读(Repeatable read)</td>\n<td>事务级别</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n<td>N</td>\n</tr>\n<tr>\n<td>可序列化(Serializable)</td>\n<td>最高级别，事务级别</td>\n<td>N</td>\n<td>N</td>\n<td>N</td>\n<td>Y</td>\n</tr>\n</tbody>\n</table>\n</div>\n<hr>\n<h4 id=\"MySql常用命令\"><a href=\"#MySql常用命令\" class=\"headerlink\" title=\"MySql常用命令\"></a>MySql常用命令</h4><h5 id=\"查询隔离级别\"><a href=\"#查询隔离级别\" class=\"headerlink\" title=\"查询隔离级别\"></a>查询隔离级别</h5><p>select @@tx_isolation;</p>\n<h5 id=\"设置手动提交\"><a href=\"#设置手动提交\" class=\"headerlink\" title=\"设置手动提交\"></a>设置手动提交</h5><p>set autocommit=0 ;</p>\n<h5 id=\"查看当前事务自动提交模式\"><a href=\"#查看当前事务自动提交模式\" class=\"headerlink\" title=\"查看当前事务自动提交模式\"></a>查看当前事务自动提交模式</h5><p>select @@autocommit;</p>\n<h5 id=\"设置隔离级别\"><a href=\"#设置隔离级别\" class=\"headerlink\" title=\"设置隔离级别\"></a>设置隔离级别</h5><p>set tx_isolation = ‘READ-COMMITTED’;</p>\n<h5 id=\"查询表的状态\"><a href=\"#查询表的状态\" class=\"headerlink\" title=\"查询表的状态\"></a>查询表的状态</h5><p>show table status like ‘test1’;</p>\n<h5 id=\"修改表的存储引擎\"><a href=\"#修改表的存储引擎\" class=\"headerlink\" title=\"修改表的存储引擎\"></a>修改表的存储引擎</h5><p>alter table test1 engine = INNODB</p>\n<h5 id=\"查看是否开启日志\"><a href=\"#查看是否开启日志\" class=\"headerlink\" title=\"查看是否开启日志\"></a>查看是否开启日志</h5><p>show variables like ‘log_bin’;</p>\n<h5 id=\"查看日志状态\"><a href=\"#查看日志状态\" class=\"headerlink\" title=\"查看日志状态\"></a>查看日志状态</h5><p>show master status;</p>\n<hr>\n<h4 id=\"相关技术参考：\"><a href=\"#相关技术参考：\" class=\"headerlink\" title=\"相关技术参考：\"></a>相关技术参考：</h4><p><a href=\"https://segmentfault.com/a/1190000004437223\" target=\"_blank\" rel=\"noopener\">深入浅出事务（1）</a><br><a href=\"https://segmentfault.com/a/1190000004437275\" target=\"_blank\" rel=\"noopener\">深入浅出事务（2）</a><br><a href=\"https://segmentfault.com/a/1190000004469395\" target=\"_blank\" rel=\"noopener\">深入浅出事务（3）</a><br><a href=\"https://segmentfault.com/a/1190000012773157\" target=\"_blank\" rel=\"noopener\">MySQL表锁和行锁机制</a><br><a href=\"https://juejin.im/post/5ab5e44a6fb9a028c97a013d\" target=\"_blank\" rel=\"noopener\">Mysql之锁与事务</a><br><a href=\"https://segmentfault.com/a/1190000013122242\" target=\"_blank\" rel=\"noopener\">数据库 - 事务管理（ACID）、隔离级别、事务传播行为</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sat Oct 01 2016 20:19:21 GMT+0800 (CST)","title":"事务知识点","path":"2016/10/01/Transaction/transaction/","eyeCatchImage":null,"excerpt":"<h3 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h3><p>&emsp;&emsp;本文主要介绍事务的相关知识点，同时也为后续讲解乐观锁和悲观锁作铺垫，先对以下事务相关的知识点：<code>ACID</code>、<code>事物的常见问题</code>以及<code>事务的隔离级别</code>先做介绍，至于<code>锁</code>后续会有专题详细介绍。<br>事务就是一组原子性的sql，或者一个独立的工作单元，事务可以就Mysql引擎来说的话就是要么全部执行这一组sql语句（CURD组合），要么全部都不执行（比如其中一条语句失败会导致这一组语句全部失败）。<br>事务是并发控制的单元，是用户定义的一个操作序列。这些操作要么都做，要么都不做，是一个不可分割的工作单位，说白了就是为了保证系统始终处于一个完整且正确的状态。</p>","date":"2016-10-01T11:20:43.000Z","pv":0,"totalPV":0,"categories":"并发控制相关知识点","tags":["事务"],"internalLinks":[],"keywords":[],"keywordsLength":0}}],"PostAsset":[],"PostCategory":[{"post_id":"cjg7rzbe700029l8iqa2zkwzi","category_id":"cjg7rzbed00059l8iqfsn304r","_id":"cjg7rzbej000a9l8ifp59w28x"},{"post_id":"cjg7rzbm4000c9l8i4xziw9xo","category_id":"cjg7rzbm6000e9l8i7191vqn0","_id":"cjg7rzbme000o9l8idrifjfnl"},{"post_id":"cjg7rzbm5000d9l8i25i4ckhm","category_id":"cjg7rzbma000j9l8ieivz3arh","_id":"cjg7rzbmh000u9l8i6p9tkd1v"},{"post_id":"cjg7rzbm6000g9l8iythg81gu","category_id":"cjg7rzbme000p9l8i08fnuojn","_id":"cjg7rzbmj000z9l8ir7g5dnf2"},{"post_id":"cjg7rzbm9000i9l8i8ecqrdk1","category_id":"cjg7rzbmh000v9l8iytv7pv38","_id":"cjg7rzbmn00179l8ikswvqfsi"},{"post_id":"cjg7rzbmb000m9l8icui1juvj","category_id":"cjg7rzbmh000v9l8iytv7pv38","_id":"cjg7rzbmr001d9l8ibjv2694n"},{"post_id":"cjg7rzbmc000n9l8i3pa9sdts","category_id":"cjg7rzbmh000v9l8iytv7pv38","_id":"cjg7rzbmv001j9l8iifvbbv4v"},{"post_id":"cjg7rzbmf000r9l8ivpe24yjr","category_id":"cjg7rzbmh000v9l8iytv7pv38","_id":"cjg7rzbmx001o9l8ikcw78e8j"},{"post_id":"cjg7rzbmg000t9l8ipqzh3w7k","category_id":"cjg7rzbmu001i9l8i4n3aq0ig","_id":"cjg7rzbn0001w9l8igiwubn1b"},{"post_id":"cjg7rzbmh000x9l8ig381pzk4","category_id":"cjg7rzbmu001i9l8i4n3aq0ig","_id":"cjg7rzbn300229l8ieu23fe68"},{"post_id":"cjg7rzbmi000y9l8iacmp9w1w","category_id":"cjg7rzbmu001i9l8i4n3aq0ig","_id":"cjg7rzbn600289l8iwzpb6ksx"},{"post_id":"cjg7rzbn200209l8iudr51qsw","category_id":"cjg7rzbmu001i9l8i4n3aq0ig","_id":"cjg7rzbn8002b9l8ik5h1tmfl"},{"post_id":"cjg7rzbmj00129l8iz52k1032","category_id":"cjg7rzbmu001i9l8i4n3aq0ig","_id":"cjg7rzbn9002e9l8i13ei2yun"},{"post_id":"cjg7rzbmm00149l8icjewmjbn","category_id":"cjg7rzbn500279l8i6cgzwe6l","_id":"cjg7rzbnd002m9l8ia7lo7b1p"},{"post_id":"cjg7rzbn8002d9l8iv7u6p38b","category_id":"cjg7rzbm6000e9l8i7191vqn0","_id":"cjg7rzbnf002p9l8iuv99v3so"},{"post_id":"cjg7rzbmn00189l8ie05vyqks","category_id":"cjg7rzbn500279l8i6cgzwe6l","_id":"cjg7rzbng002s9l8ioj4axg7e"},{"post_id":"cjg7rzbmp001b9l8iekyxjern","category_id":"cjg7rzbn500279l8i6cgzwe6l","_id":"cjg7rzbnj002y9l8isbe55q24"},{"post_id":"cjg7rzbmr001e9l8iemsmpbd1","category_id":"cjg7rzbn500279l8i6cgzwe6l","_id":"cjg7rzbnl00339l8irg6gospw"},{"post_id":"cjg7rzbmt001h9l8i41ri4n5l","category_id":"cjg7rzbnj002x9l8irw5rew0d","_id":"cjg7rzbnp003a9l8i8wla5ajg"},{"post_id":"cjg7rzbmv001k9l8izi70q18z","category_id":"cjg7rzbn500279l8i6cgzwe6l","_id":"cjg7rzbns003h9l8id4i7t6x2"},{"post_id":"cjg7rzbmw001n9l8ib5z13wi9","category_id":"cjg7rzbn500279l8i6cgzwe6l","_id":"cjg7rzbnu003n9l8is8p0lahg"},{"post_id":"cjg7rzbmx001p9l8i3ck1d9qz","category_id":"cjg7rzbn500279l8i6cgzwe6l","_id":"cjg7rzbnv003q9l8i72j75tp1"},{"post_id":"cjg7rzbn400249l8i07ngfnl1","category_id":"cjg7rzbnu003m9l8i9zhoh23h","_id":"cjg7rzbnw003u9l8i7ryt3kzs"},{"post_id":"cjg7rzbn500269l8ifhijcd98","category_id":"cjg7rzbnu003m9l8i9zhoh23h","_id":"cjg7rzbny003y9l8io82gm25t"},{"post_id":"cjg7rzbn7002a9l8i4m6z68ex","category_id":"cjg7rzbnu003m9l8i9zhoh23h","_id":"cjg7rzbny00419l8ir6swk8ta"},{"post_id":"cjg7rzbnb002h9l8i8khk5txs","category_id":"cjg7rzbnx003x9l8ivy209wnx","_id":"cjg7rzbnz00479l8iljc3ek6x"},{"post_id":"cjg7rzbnc002j9l8iwd7dh4lo","category_id":"cjg7rzbnx003x9l8ivy209wnx","_id":"cjg7rzbo0004a9l8iyepos4fp"},{"post_id":"cjg7rzbne002o9l8isiz5hovy","category_id":"cjg7rzbnx003x9l8ivy209wnx","_id":"cjg7rzbo1004f9l8ig3vhzfl9"},{"post_id":"cjg7rzbnf002q9l8iaggc5tr4","category_id":"cjg7rzbnx003x9l8ivy209wnx","_id":"cjg7rzbo2004j9l8ifxc4fu24"},{"post_id":"cjg7rzbng002u9l8ixb49utub","category_id":"cjg7rzbnx003x9l8ivy209wnx","_id":"cjg7rzbo3004n9l8i3wyuaqh4"},{"post_id":"cjg7rzbni002w9l8igm8o15w9","category_id":"cjg7rzbnu003m9l8i9zhoh23h","_id":"cjg7rzbo4004r9l8i6tpgwolk"},{"post_id":"cjg7rzbnj00319l8ik1zjipwi","category_id":"cjg7rzbnx003x9l8ivy209wnx","_id":"cjg7rzboa004v9l8iyimpa0aw"},{"post_id":"cjg7rzbnl00329l8i3dhgwya0","category_id":"cjg7rzbnx003x9l8ivy209wnx","_id":"cjg7rzbob004z9l8iqkkka1f0"},{"post_id":"cjg7rzbnm00369l8iq397inx4","category_id":"cjg7rzbnx003x9l8ivy209wnx","_id":"cjg7rzboc00539l8i3ohl3d3c"},{"post_id":"cjg7rzbnn00389l8i3sp06j8s","category_id":"cjg7rzbnx003x9l8ivy209wnx","_id":"cjg7rzbod00579l8iisbklz43"},{"post_id":"cjg7rzbnp003c9l8ike0mzqiy","category_id":"cjg7rzbnx003x9l8ivy209wnx","_id":"cjg7rzboe005b9l8iutnlvm15"},{"post_id":"cjg7rzbnr003f9l8i1uic9c23","category_id":"cjg7rzbnx003x9l8ivy209wnx","_id":"cjg7rzbof005d9l8iuliql30o"},{"post_id":"cjg7rzbnt003l9l8ielkz8je8","category_id":"cjg7rzbnu003m9l8i9zhoh23h","_id":"cjg7rzbof005h9l8i9ec5uk2k"}],"PostTag":[{"post_id":"cjg7rzbe700029l8iqa2zkwzi","tag_id":"cjg7rzbef00069l8i3fnegbc9","_id":"cjg7rzbeh00099l8isipihi39"},{"post_id":"cjg7rzbm4000c9l8i4xziw9xo","tag_id":"cjg7rzbm6000f9l8iqxb0j0q6","_id":"cjg7rzbmb000l9l8iokykgusi"},{"post_id":"cjg7rzbm5000d9l8i25i4ckhm","tag_id":"cjg7rzbmb000k9l8itezr75lr","_id":"cjg7rzbmf000s9l8i6ike8zux"},{"post_id":"cjg7rzbm6000g9l8iythg81gu","tag_id":"cjg7rzbme000q9l8im42dsj8j","_id":"cjg7rzbmm00139l8inj3s0qan"},{"post_id":"cjg7rzbm6000g9l8iythg81gu","tag_id":"cjg7rzbmh000w9l8i4ca8bfjq","_id":"cjg7rzbmn00159l8iug4a9h0w"},{"post_id":"cjg7rzbm9000i9l8i8ecqrdk1","tag_id":"cjg7rzbmj00119l8ia2u097gj","_id":"cjg7rzbmp001a9l8i0d9zx9lx"},{"post_id":"cjg7rzbmb000m9l8icui1juvj","tag_id":"cjg7rzbmj00119l8ia2u097gj","_id":"cjg7rzbmt001g9l8izaujx9ua"},{"post_id":"cjg7rzbmc000n9l8i3pa9sdts","tag_id":"cjg7rzbmj00119l8ia2u097gj","_id":"cjg7rzbmw001m9l8i4x0zrerf"},{"post_id":"cjg7rzbmf000r9l8ivpe24yjr","tag_id":"cjg7rzbmj00119l8ia2u097gj","_id":"cjg7rzbmz001s9l8idcca8uit"},{"post_id":"cjg7rzbmg000t9l8ipqzh3w7k","tag_id":"cjg7rzbmy001r9l8i3xnpfbf7","_id":"cjg7rzbn2001z9l8ihr8aqhct"},{"post_id":"cjg7rzbmh000x9l8ig381pzk4","tag_id":"cjg7rzbmy001r9l8i3xnpfbf7","_id":"cjg7rzbn400259l8i1q2q55tn"},{"post_id":"cjg7rzbmi000y9l8iacmp9w1w","tag_id":"cjg7rzbmy001r9l8i3xnpfbf7","_id":"cjg7rzbn8002c9l8ik5xln45a"},{"post_id":"cjg7rzbmj00129l8iz52k1032","tag_id":"cjg7rzbmy001r9l8i3xnpfbf7","_id":"cjg7rzbnc002i9l8i9rjdnzp7"},{"post_id":"cjg7rzbn8002d9l8iv7u6p38b","tag_id":"cjg7rzbm6000f9l8iqxb0j0q6","_id":"cjg7rzbnd002k9l8iezwaiyg5"},{"post_id":"cjg7rzbmm00149l8icjewmjbn","tag_id":"cjg7rzbna002g9l8i778malde","_id":"cjg7rzbnh002v9l8id1cl9sj3"},{"post_id":"cjg7rzbmm00149l8icjewmjbn","tag_id":"cjg7rzbnd002n9l8ia7cej209","_id":"cjg7rzbnj002z9l8i0q2nnakc"},{"post_id":"cjg7rzbmn00189l8ie05vyqks","tag_id":"cjg7rzbna002g9l8i778malde","_id":"cjg7rzbnn00379l8i66zdnnix"},{"post_id":"cjg7rzbmn00189l8ie05vyqks","tag_id":"cjg7rzbnd002n9l8ia7cej209","_id":"cjg7rzbnp003b9l8iq4u6600u"},{"post_id":"cjg7rzbmp001b9l8iekyxjern","tag_id":"cjg7rzbnm00359l8iw6aw43qk","_id":"cjg7rzbnr003e9l8il1igi0xe"},{"post_id":"cjg7rzbmr001e9l8iemsmpbd1","tag_id":"cjg7rzbna002g9l8i778malde","_id":"cjg7rzbnt003k9l8izfwombfv"},{"post_id":"cjg7rzbmt001h9l8i41ri4n5l","tag_id":"cjg7rzbna002g9l8i778malde","_id":"cjg7rzbnv003p9l8i9hffrxz8"},{"post_id":"cjg7rzbmv001k9l8izi70q18z","tag_id":"cjg7rzbna002g9l8i778malde","_id":"cjg7rzbnx003w9l8irkie2w1k"},{"post_id":"cjg7rzbmv001k9l8izi70q18z","tag_id":"cjg7rzbnd002n9l8ia7cej209","_id":"cjg7rzbny003z9l8i23gq5tkz"},{"post_id":"cjg7rzbmw001n9l8ib5z13wi9","tag_id":"cjg7rzbna002g9l8i778malde","_id":"cjg7rzbnz00449l8izipp3pem"},{"post_id":"cjg7rzbmw001n9l8ib5z13wi9","tag_id":"cjg7rzbnd002n9l8ia7cej209","_id":"cjg7rzbnz00459l8ik5gg0lzw"},{"post_id":"cjg7rzbmx001p9l8i3ck1d9qz","tag_id":"cjg7rzbna002g9l8i778malde","_id":"cjg7rzbo1004c9l8ip6vtfi1d"},{"post_id":"cjg7rzbmx001p9l8i3ck1d9qz","tag_id":"cjg7rzbnd002n9l8ia7cej209","_id":"cjg7rzbo1004d9l8iqe1ry6nm"},{"post_id":"cjg7rzbn200209l8iudr51qsw","tag_id":"cjg7rzbme000q9l8im42dsj8j","_id":"cjg7rzbo1004h9l8iwp7vmdes"},{"post_id":"cjg7rzbn200209l8iudr51qsw","tag_id":"cjg7rzbo0004b9l8ie6wff3jg","_id":"cjg7rzbo2004k9l8i3igz7z2i"},{"post_id":"cjg7rzbn400249l8i07ngfnl1","tag_id":"cjg7rzbo1004g9l8ireid4l6a","_id":"cjg7rzbo3004p9l8idr7chno4"},{"post_id":"cjg7rzbn400249l8i07ngfnl1","tag_id":"cjg7rzbo2004l9l8iqdekd5cu","_id":"cjg7rzbo4004s9l8iamasztsr"},{"post_id":"cjg7rzbn500269l8ifhijcd98","tag_id":"cjg7rzbo1004g9l8ireid4l6a","_id":"cjg7rzbob004x9l8ia5hjs6yr"},{"post_id":"cjg7rzbn500269l8ifhijcd98","tag_id":"cjg7rzbo2004l9l8iqdekd5cu","_id":"cjg7rzboc00509l8id7sb0rvj"},{"post_id":"cjg7rzbn7002a9l8i4m6z68ex","tag_id":"cjg7rzbo1004g9l8ireid4l6a","_id":"cjg7rzbod00559l8iwiextvxc"},{"post_id":"cjg7rzbn7002a9l8i4m6z68ex","tag_id":"cjg7rzbo2004l9l8iqdekd5cu","_id":"cjg7rzbod00589l8iak433eb3"},{"post_id":"cjg7rzbnb002h9l8i8khk5txs","tag_id":"cjg7rzbod00549l8iwhh4tb8e","_id":"cjg7rzbof005e9l8ihkbuwwl8"},{"post_id":"cjg7rzbnb002h9l8i8khk5txs","tag_id":"cjg7rzbod00599l8isg5drprp","_id":"cjg7rzbof005f9l8ih6gnd2fd"},{"post_id":"cjg7rzbnc002j9l8iwd7dh4lo","tag_id":"cjg7rzbod00549l8iwhh4tb8e","_id":"cjg7rzbog005j9l8inqk5t2y4"},{"post_id":"cjg7rzbnc002j9l8iwd7dh4lo","tag_id":"cjg7rzbod00599l8isg5drprp","_id":"cjg7rzbog005k9l8idboy17ac"},{"post_id":"cjg7rzbne002o9l8isiz5hovy","tag_id":"cjg7rzbod00549l8iwhh4tb8e","_id":"cjg7rzboh005n9l8iv195s74o"},{"post_id":"cjg7rzbne002o9l8isiz5hovy","tag_id":"cjg7rzbod00599l8isg5drprp","_id":"cjg7rzboh005o9l8ix7ya1zsh"},{"post_id":"cjg7rzbnf002q9l8iaggc5tr4","tag_id":"cjg7rzbod00549l8iwhh4tb8e","_id":"cjg7rzboi005r9l8ius1ic17l"},{"post_id":"cjg7rzbnf002q9l8iaggc5tr4","tag_id":"cjg7rzbod00599l8isg5drprp","_id":"cjg7rzboi005s9l8ixh92tdd9"},{"post_id":"cjg7rzbng002u9l8ixb49utub","tag_id":"cjg7rzbod00549l8iwhh4tb8e","_id":"cjg7rzboj005v9l8iaig77ti2"},{"post_id":"cjg7rzbng002u9l8ixb49utub","tag_id":"cjg7rzbod00599l8isg5drprp","_id":"cjg7rzboj005w9l8imu0q9922"},{"post_id":"cjg7rzbni002w9l8igm8o15w9","tag_id":"cjg7rzbo1004g9l8ireid4l6a","_id":"cjg7rzbok005z9l8i9flicgdf"},{"post_id":"cjg7rzbni002w9l8igm8o15w9","tag_id":"cjg7rzbo2004l9l8iqdekd5cu","_id":"cjg7rzbok00609l8i8crqd7s8"},{"post_id":"cjg7rzbnj00319l8ik1zjipwi","tag_id":"cjg7rzbod00549l8iwhh4tb8e","_id":"cjg7rzbol00639l8impyl3tks"},{"post_id":"cjg7rzbnj00319l8ik1zjipwi","tag_id":"cjg7rzbod00599l8isg5drprp","_id":"cjg7rzbol00649l8ime36iw8n"},{"post_id":"cjg7rzbnl00329l8i3dhgwya0","tag_id":"cjg7rzbod00549l8iwhh4tb8e","_id":"cjg7rzbom00679l8igoih7i64"},{"post_id":"cjg7rzbnl00329l8i3dhgwya0","tag_id":"cjg7rzbod00599l8isg5drprp","_id":"cjg7rzbom00689l8i19jwqbad"},{"post_id":"cjg7rzbnm00369l8iq397inx4","tag_id":"cjg7rzbod00549l8iwhh4tb8e","_id":"cjg7rzbon006b9l8i89iyxncx"},{"post_id":"cjg7rzbnm00369l8iq397inx4","tag_id":"cjg7rzbod00599l8isg5drprp","_id":"cjg7rzbon006c9l8itm1wsbly"},{"post_id":"cjg7rzbnn00389l8i3sp06j8s","tag_id":"cjg7rzbod00549l8iwhh4tb8e","_id":"cjg7rzbop006f9l8iol3e14ge"},{"post_id":"cjg7rzbnn00389l8i3sp06j8s","tag_id":"cjg7rzbod00599l8isg5drprp","_id":"cjg7rzbop006g9l8ijxhn513v"},{"post_id":"cjg7rzbnp003c9l8ike0mzqiy","tag_id":"cjg7rzbod00549l8iwhh4tb8e","_id":"cjg7rzboq006j9l8ifyw9788m"},{"post_id":"cjg7rzbnp003c9l8ike0mzqiy","tag_id":"cjg7rzbod00599l8isg5drprp","_id":"cjg7rzboq006k9l8iww3n8ze5"},{"post_id":"cjg7rzbnr003f9l8i1uic9c23","tag_id":"cjg7rzbod00549l8iwhh4tb8e","_id":"cjg7rzbor006n9l8ipb7t5hl0"},{"post_id":"cjg7rzbnr003f9l8i1uic9c23","tag_id":"cjg7rzbod00599l8isg5drprp","_id":"cjg7rzbor006o9l8ia0ogae14"},{"post_id":"cjg7rzbnt003l9l8ielkz8je8","tag_id":"cjg7rzbor006m9l8iexn9xv7r","_id":"cjg7rzbor006p9l8i9ammfl5q"}],"Tag":[{"name":"小记","_id":"cjg7rzbef00069l8i3fnegbc9"},{"name":"Code","_id":"cjg7rzbm6000f9l8iqxb0j0q6"},{"name":"tools","_id":"cjg7rzbmb000k9l8itezr75lr"},{"name":"Java","_id":"cjg7rzbme000q9l8im42dsj8j"},{"name":"面试题","_id":"cjg7rzbmh000w9l8i4ca8bfjq"},{"name":"JVM","_id":"cjg7rzbmj00119l8ia2u097gj"},{"name":"java","_id":"cjg7rzbmy001r9l8i3xnpfbf7"},{"name":"多线程","_id":"cjg7rzbna002g9l8i778malde"},{"name":"线程池","_id":"cjg7rzbnd002n9l8ia7cej209"},{"name":"Thread","_id":"cjg7rzbnm00359l8iw6aw43qk"},{"name":"Serialize","_id":"cjg7rzbo0004b9l8ie6wff3jg"},{"name":"并发控制","_id":"cjg7rzbo1004g9l8ireid4l6a"},{"name":"锁","_id":"cjg7rzbo2004l9l8iqdekd5cu"},{"name":"Algorithms","_id":"cjg7rzbod00549l8iwhh4tb8e"},{"name":"Sort","_id":"cjg7rzbod00599l8isg5drprp"},{"name":"事务","_id":"cjg7rzbor006m9l8iexn9xv7r"}]}}